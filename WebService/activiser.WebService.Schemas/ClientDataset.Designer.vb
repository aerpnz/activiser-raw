'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.1433
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("ClientDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class ClientDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableConsultant As ConsultantDataTable
    
    Private tableClientSiteStatus As ClientSiteStatusDataTable
    
    Private tableClientSite As ClientSiteDataTable
    
    Private tableRequestStatus As RequestStatusDataTable
    
    Private tableRequest As RequestDataTable
    
    Private tableJobStatus As JobStatusDataTable
    
    Private tableJob As JobDataTable
    
    Private tableCustomForm As CustomFormDataTable
    
    Private tableCustomControl As CustomControlDataTable
    
    Private relationFK_CustomControl_CustomForm As Global.System.Data.DataRelation
    
    Private relationFK_Job_Consultant As Global.System.Data.DataRelation
    
    Private relationFK_Job_ClientSite As Global.System.Data.DataRelation
    
    Private relationFK_Job_Request As Global.System.Data.DataRelation
    
    Private relationFK_Request_ClientSite As Global.System.Data.DataRelation
    
    Private relationFK_JobStatus_Job As Global.System.Data.DataRelation
    
    Private relationFK_ClientSite_ClientSiteStatus As Global.System.Data.DataRelation
    
    Private relationFK_Request_Consultant As Global.System.Data.DataRelation
    
    Private relationFK_Request_ConsultantStatus As Global.System.Data.DataRelation
    
    Private relationFK_Request_RequestStatus As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
        Me.InitExpressions
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("Consultant")) Is Nothing) Then
                MyBase.Tables.Add(New ConsultantDataTable(ds.Tables("Consultant")))
            End If
            If (Not (ds.Tables("ClientSiteStatus")) Is Nothing) Then
                MyBase.Tables.Add(New ClientSiteStatusDataTable(ds.Tables("ClientSiteStatus")))
            End If
            If (Not (ds.Tables("ClientSite")) Is Nothing) Then
                MyBase.Tables.Add(New ClientSiteDataTable(ds.Tables("ClientSite")))
            End If
            If (Not (ds.Tables("RequestStatus")) Is Nothing) Then
                MyBase.Tables.Add(New RequestStatusDataTable(ds.Tables("RequestStatus")))
            End If
            If (Not (ds.Tables("Request")) Is Nothing) Then
                MyBase.Tables.Add(New RequestDataTable(ds.Tables("Request")))
            End If
            If (Not (ds.Tables("JobStatus")) Is Nothing) Then
                MyBase.Tables.Add(New JobStatusDataTable(ds.Tables("JobStatus")))
            End If
            If (Not (ds.Tables("Job")) Is Nothing) Then
                MyBase.Tables.Add(New JobDataTable(ds.Tables("Job")))
            End If
            If (Not (ds.Tables("CustomForm")) Is Nothing) Then
                MyBase.Tables.Add(New CustomFormDataTable(ds.Tables("CustomForm")))
            End If
            If (Not (ds.Tables("CustomControl")) Is Nothing) Then
                MyBase.Tables.Add(New CustomControlDataTable(ds.Tables("CustomControl")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            Me.InitExpressions
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Consultant() As ConsultantDataTable
        Get
            Return Me.tableConsultant
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClientSiteStatus() As ClientSiteStatusDataTable
        Get
            Return Me.tableClientSiteStatus
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property ClientSite() As ClientSiteDataTable
        Get
            Return Me.tableClientSite
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property RequestStatus() As RequestStatusDataTable
        Get
            Return Me.tableRequestStatus
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Request() As RequestDataTable
        Get
            Return Me.tableRequest
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property JobStatus() As JobStatusDataTable
        Get
            Return Me.tableJobStatus
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property Job() As JobDataTable
        Get
            Return Me.tableJob
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustomForm() As CustomFormDataTable
        Get
            Return Me.tableCustomForm
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CustomControl() As CustomControlDataTable
        Get
            Return Me.tableCustomControl
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As ClientDataSet = CType(MyBase.Clone,ClientDataSet)
        cln.InitVars
        cln.InitExpressions
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("Consultant")) Is Nothing) Then
                MyBase.Tables.Add(New ConsultantDataTable(ds.Tables("Consultant")))
            End If
            If (Not (ds.Tables("ClientSiteStatus")) Is Nothing) Then
                MyBase.Tables.Add(New ClientSiteStatusDataTable(ds.Tables("ClientSiteStatus")))
            End If
            If (Not (ds.Tables("ClientSite")) Is Nothing) Then
                MyBase.Tables.Add(New ClientSiteDataTable(ds.Tables("ClientSite")))
            End If
            If (Not (ds.Tables("RequestStatus")) Is Nothing) Then
                MyBase.Tables.Add(New RequestStatusDataTable(ds.Tables("RequestStatus")))
            End If
            If (Not (ds.Tables("Request")) Is Nothing) Then
                MyBase.Tables.Add(New RequestDataTable(ds.Tables("Request")))
            End If
            If (Not (ds.Tables("JobStatus")) Is Nothing) Then
                MyBase.Tables.Add(New JobStatusDataTable(ds.Tables("JobStatus")))
            End If
            If (Not (ds.Tables("Job")) Is Nothing) Then
                MyBase.Tables.Add(New JobDataTable(ds.Tables("Job")))
            End If
            If (Not (ds.Tables("CustomForm")) Is Nothing) Then
                MyBase.Tables.Add(New CustomFormDataTable(ds.Tables("CustomForm")))
            End If
            If (Not (ds.Tables("CustomControl")) Is Nothing) Then
                MyBase.Tables.Add(New CustomControlDataTable(ds.Tables("CustomControl")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableConsultant = CType(MyBase.Tables("Consultant"),ConsultantDataTable)
        If (initTable = true) Then
            If (Not (Me.tableConsultant) Is Nothing) Then
                Me.tableConsultant.InitVars
            End If
        End If
        Me.tableClientSiteStatus = CType(MyBase.Tables("ClientSiteStatus"),ClientSiteStatusDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClientSiteStatus) Is Nothing) Then
                Me.tableClientSiteStatus.InitVars
            End If
        End If
        Me.tableClientSite = CType(MyBase.Tables("ClientSite"),ClientSiteDataTable)
        If (initTable = true) Then
            If (Not (Me.tableClientSite) Is Nothing) Then
                Me.tableClientSite.InitVars
            End If
        End If
        Me.tableRequestStatus = CType(MyBase.Tables("RequestStatus"),RequestStatusDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRequestStatus) Is Nothing) Then
                Me.tableRequestStatus.InitVars
            End If
        End If
        Me.tableRequest = CType(MyBase.Tables("Request"),RequestDataTable)
        If (initTable = true) Then
            If (Not (Me.tableRequest) Is Nothing) Then
                Me.tableRequest.InitVars
            End If
        End If
        Me.tableJobStatus = CType(MyBase.Tables("JobStatus"),JobStatusDataTable)
        If (initTable = true) Then
            If (Not (Me.tableJobStatus) Is Nothing) Then
                Me.tableJobStatus.InitVars
            End If
        End If
        Me.tableJob = CType(MyBase.Tables("Job"),JobDataTable)
        If (initTable = true) Then
            If (Not (Me.tableJob) Is Nothing) Then
                Me.tableJob.InitVars
            End If
        End If
        Me.tableCustomForm = CType(MyBase.Tables("CustomForm"),CustomFormDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustomForm) Is Nothing) Then
                Me.tableCustomForm.InitVars
            End If
        End If
        Me.tableCustomControl = CType(MyBase.Tables("CustomControl"),CustomControlDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCustomControl) Is Nothing) Then
                Me.tableCustomControl.InitVars
            End If
        End If
        Me.relationFK_CustomControl_CustomForm = Me.Relations("FK_CustomControl_CustomForm")
        Me.relationFK_Job_Consultant = Me.Relations("FK_Job_Consultant")
        Me.relationFK_Job_ClientSite = Me.Relations("FK_Job_ClientSite")
        Me.relationFK_Job_Request = Me.Relations("FK_Job_Request")
        Me.relationFK_Request_ClientSite = Me.Relations("FK_Request_ClientSite")
        Me.relationFK_JobStatus_Job = Me.Relations("FK_JobStatus_Job")
        Me.relationFK_ClientSite_ClientSiteStatus = Me.Relations("FK_ClientSite_ClientSiteStatus")
        Me.relationFK_Request_Consultant = Me.Relations("FK_Request_Consultant")
        Me.relationFK_Request_ConsultantStatus = Me.Relations("FK_Request_ConsultantStatus")
        Me.relationFK_Request_RequestStatus = Me.Relations("FK_Request_RequestStatus")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "ClientDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://www.activiser.com/schemas/ClientDataSet.XSD"
        Me.Locale = New Global.System.Globalization.CultureInfo("")
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableConsultant = New ConsultantDataTable
        MyBase.Tables.Add(Me.tableConsultant)
        Me.tableClientSiteStatus = New ClientSiteStatusDataTable
        MyBase.Tables.Add(Me.tableClientSiteStatus)
        Me.tableClientSite = New ClientSiteDataTable
        MyBase.Tables.Add(Me.tableClientSite)
        Me.tableRequestStatus = New RequestStatusDataTable
        MyBase.Tables.Add(Me.tableRequestStatus)
        Me.tableRequest = New RequestDataTable(false)
        MyBase.Tables.Add(Me.tableRequest)
        Me.tableJobStatus = New JobStatusDataTable
        MyBase.Tables.Add(Me.tableJobStatus)
        Me.tableJob = New JobDataTable(false)
        MyBase.Tables.Add(Me.tableJob)
        Me.tableCustomForm = New CustomFormDataTable
        MyBase.Tables.Add(Me.tableCustomForm)
        Me.tableCustomControl = New CustomControlDataTable
        MyBase.Tables.Add(Me.tableCustomControl)
        Me.relationFK_CustomControl_CustomForm = New Global.System.Data.DataRelation("FK_CustomControl_CustomForm", New Global.System.Data.DataColumn() {Me.tableCustomForm.CustomFormUIDColumn}, New Global.System.Data.DataColumn() {Me.tableCustomControl.CustomFormUIDColumn}, false)
        Me.Relations.Add(Me.relationFK_CustomControl_CustomForm)
        Me.relationFK_Job_Consultant = New Global.System.Data.DataRelation("FK_Job_Consultant", New Global.System.Data.DataColumn() {Me.tableConsultant.ConsultantUIDColumn}, New Global.System.Data.DataColumn() {Me.tableJob.ConsultantUIDColumn}, false)
        Me.Relations.Add(Me.relationFK_Job_Consultant)
        Me.relationFK_Job_ClientSite = New Global.System.Data.DataRelation("FK_Job_ClientSite", New Global.System.Data.DataColumn() {Me.tableClientSite.ClientSiteUIDColumn}, New Global.System.Data.DataColumn() {Me.tableJob.ClientSiteUIDColumn}, false)
        Me.Relations.Add(Me.relationFK_Job_ClientSite)
        Me.relationFK_Job_Request = New Global.System.Data.DataRelation("FK_Job_Request", New Global.System.Data.DataColumn() {Me.tableRequest.RequestUIDColumn}, New Global.System.Data.DataColumn() {Me.tableJob.RequestUIDColumn}, false)
        Me.Relations.Add(Me.relationFK_Job_Request)
        Me.relationFK_Request_ClientSite = New Global.System.Data.DataRelation("FK_Request_ClientSite", New Global.System.Data.DataColumn() {Me.tableClientSite.ClientSiteUIDColumn}, New Global.System.Data.DataColumn() {Me.tableRequest.ClientSiteUIDColumn}, false)
        Me.Relations.Add(Me.relationFK_Request_ClientSite)
        Me.relationFK_JobStatus_Job = New Global.System.Data.DataRelation("FK_JobStatus_Job", New Global.System.Data.DataColumn() {Me.tableJobStatus.JobStatusIDColumn}, New Global.System.Data.DataColumn() {Me.tableJob.JobStatusIDColumn}, false)
        Me.Relations.Add(Me.relationFK_JobStatus_Job)
        Me.relationFK_ClientSite_ClientSiteStatus = New Global.System.Data.DataRelation("FK_ClientSite_ClientSiteStatus", New Global.System.Data.DataColumn() {Me.tableClientSiteStatus.ClientSiteStatusIDColumn}, New Global.System.Data.DataColumn() {Me.tableClientSite.ClientSiteStatusIDColumn}, false)
        Me.Relations.Add(Me.relationFK_ClientSite_ClientSiteStatus)
        Me.relationFK_Request_Consultant = New Global.System.Data.DataRelation("FK_Request_Consultant", New Global.System.Data.DataColumn() {Me.tableConsultant.ConsultantUIDColumn}, New Global.System.Data.DataColumn() {Me.tableRequest.AssignedToUIDColumn}, false)
        Me.Relations.Add(Me.relationFK_Request_Consultant)
        Me.relationFK_Request_ConsultantStatus = New Global.System.Data.DataRelation("FK_Request_ConsultantStatus", New Global.System.Data.DataColumn() {Me.tableRequestStatus.RequestStatusIDColumn}, New Global.System.Data.DataColumn() {Me.tableRequest.ConsultantStatusIDColumn}, false)
        Me.Relations.Add(Me.relationFK_Request_ConsultantStatus)
        Me.relationFK_Request_RequestStatus = New Global.System.Data.DataRelation("FK_Request_RequestStatus", New Global.System.Data.DataColumn() {Me.tableRequestStatus.RequestStatusIDColumn}, New Global.System.Data.DataColumn() {Me.tableRequest.RequestStatusIDColumn}, false)
        Me.Relations.Add(Me.relationFK_Request_RequestStatus)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeConsultant() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClientSiteStatus() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeClientSite() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRequestStatus() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeRequest() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeJobStatus() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeJob() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCustomForm() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCustomControl() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As ClientDataSet = New ClientDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitExpressions()
        Me.Request.ClientSiteNameColumn.Expression = "Parent(FK_Request_ClientSite).SiteName"
        Me.Request.JobsColumn.Expression = "COUNT(CHILD(FK_Job_Request).JobStatusID)"
        Me.Request.AssignedToNameColumn.Expression = "Parent(FK_Request_Consultant).Name"
        Me.Request.RequestStatusDescriptionColumn.Expression = "Parent(FK_Request_RequestStatus).Description"
        Me.Request.RequestStatusOrderColumn.Expression = "Parent(FK_Request_RequestStatus).DisplayOrder"
        Me.Request.ConsultantStatusDescriptionColumn.Expression = "ISNULL(Parent(FK_Request_ConsultantStatus).Description,Parent(FK_Request_RequestS"& _ 
            "tatus).Description)"
        Me.Request.ConsultantStatusOrderColumn.Expression = "ISNULL(Parent(FK_Request_ConsultantStatus).DisplayOrder, Parent(FK_Request_Reques"& _ 
            "tStatus).DisplayOrder)"
        Me.Job.ConsultantNameColumn.Expression = "Parent(FK_Job_Consultant).Name"
        Me.Job.RequestNumberColumn.Expression = "Parent(FK_Job_Request).RequestNumber"
        Me.Job.ClientSiteNameColumn.Expression = "Parent(FK_Job_ClientSite).SiteName"
    End Sub
    
    Public Delegate Sub ConsultantRowChangeEventHandler(ByVal sender As Object, ByVal e As ConsultantRowChangeEvent)
    
    Public Delegate Sub ClientSiteStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientSiteStatusRowChangeEvent)
    
    Public Delegate Sub ClientSiteRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientSiteRowChangeEvent)
    
    Public Delegate Sub RequestStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As RequestStatusRowChangeEvent)
    
    Public Delegate Sub RequestRowChangeEventHandler(ByVal sender As Object, ByVal e As RequestRowChangeEvent)
    
    Public Delegate Sub JobStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As JobStatusRowChangeEvent)
    
    Public Delegate Sub JobRowChangeEventHandler(ByVal sender As Object, ByVal e As JobRowChangeEvent)
    
    Public Delegate Sub CustomFormRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomFormRowChangeEvent)
    
    Public Delegate Sub CustomControlRowChangeEventHandler(ByVal sender As Object, ByVal e As CustomControlRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ConsultantDataTable
        Inherits Global.System.Data.TypedTableBase(Of ConsultantRow)
        
        Private columnConsultantNumber As Global.System.Data.DataColumn
        
        Private columnName As Global.System.Data.DataColumn
        
        Private columnUsername As Global.System.Data.DataColumn
        
        Private columnEmailAddress As Global.System.Data.DataColumn
        
        Private columnMobilePhone As Global.System.Data.DataColumn
        
        Private columnConsultantUID As Global.System.Data.DataColumn
        
        Private columnConsultantID As Global.System.Data.DataColumn
        
        Private columnCreatedDateTime As Global.System.Data.DataColumn
        
        Private columnModifiedDateTime As Global.System.Data.DataColumn
        
        Private columnMinSyncTime As Global.System.Data.DataColumn
        
        Private columnLastSyncTime As Global.System.Data.DataColumn
        
        Private columnSyncTime As Global.System.Data.DataColumn
        
        Private columnMobileAlert As Global.System.Data.DataColumn
        
        Private columnIsActiviserUser As Global.System.Data.DataColumn
        
        Private columnManagement As Global.System.Data.DataColumn
        
        Private columnAdministration As Global.System.Data.DataColumn
        
        Private columnDomainLogon As Global.System.Data.DataColumn
        
        Private columnTrackingTimestamp As Global.System.Data.DataColumn
        
        Private columnTrackingInfo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "Consultant"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsultantNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsultantNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property UsernameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnUsername
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MobilePhoneColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMobilePhone
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsultantUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsultantUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsultantIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsultantID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinSyncTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinSyncTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LastSyncTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLastSyncTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SyncTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSyncTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MobileAlertColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMobileAlert
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsActiviserUserColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsActiviserUser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ManagementColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnManagement
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AdministrationColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAdministration
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DomainLogonColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDomainLogon
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrackingTimestampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrackingTimestamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrackingInfoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrackingInfo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ConsultantRow
            Get
                Return CType(Me.Rows(index),ConsultantRow)
            End Get
        End Property
        
        Public Event ConsultantRowChanging As ConsultantRowChangeEventHandler
        
        Public Event ConsultantRowChanged As ConsultantRowChangeEventHandler
        
        Public Event ConsultantRowDeleting As ConsultantRowChangeEventHandler
        
        Public Event ConsultantRowDeleted As ConsultantRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddConsultantRow(ByVal row As ConsultantRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddConsultantRow( _
                    ByVal ConsultantNumber As String,  _
                    ByVal Name As String,  _
                    ByVal Username As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal MobilePhone As String,  _
                    ByVal ConsultantUID As System.Guid,  _
                    ByVal ConsultantID As Integer,  _
                    ByVal CreatedDateTime As Date,  _
                    ByVal ModifiedDateTime As Date,  _
                    ByVal MinSyncTime As Integer,  _
                    ByVal LastSyncTime As Date,  _
                    ByVal SyncTime As Date,  _
                    ByVal MobileAlert As Boolean,  _
                    ByVal IsActiviserUser As Boolean,  _
                    ByVal Management As Boolean,  _
                    ByVal Administration As Boolean,  _
                    ByVal DomainLogon As String,  _
                    ByVal TrackingTimestamp As Date,  _
                    ByVal TrackingInfo As String) As ConsultantRow
            Dim rowConsultantRow As ConsultantRow = CType(Me.NewRow,ConsultantRow)
            Dim columnValuesArray() As Object = New Object() {ConsultantNumber, Name, Username, EmailAddress, MobilePhone, ConsultantUID, ConsultantID, CreatedDateTime, ModifiedDateTime, MinSyncTime, LastSyncTime, SyncTime, MobileAlert, IsActiviserUser, Management, Administration, DomainLogon, TrackingTimestamp, TrackingInfo}
            rowConsultantRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowConsultantRow)
            Return rowConsultantRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByConsultantUID(ByVal ConsultantUID As System.Guid) As ConsultantRow
            Return CType(Me.Rows.Find(New Object() {ConsultantUID}),ConsultantRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ConsultantDataTable = CType(MyBase.Clone,ConsultantDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ConsultantDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnConsultantNumber = MyBase.Columns("ConsultantNumber")
            Me.columnName = MyBase.Columns("Name")
            Me.columnUsername = MyBase.Columns("Username")
            Me.columnEmailAddress = MyBase.Columns("EmailAddress")
            Me.columnMobilePhone = MyBase.Columns("MobilePhone")
            Me.columnConsultantUID = MyBase.Columns("ConsultantUID")
            Me.columnConsultantID = MyBase.Columns("ConsultantID")
            Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
            Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
            Me.columnMinSyncTime = MyBase.Columns("MinSyncTime")
            Me.columnLastSyncTime = MyBase.Columns("LastSyncTime")
            Me.columnSyncTime = MyBase.Columns("SyncTime")
            Me.columnMobileAlert = MyBase.Columns("MobileAlert")
            Me.columnIsActiviserUser = MyBase.Columns("IsActiviserUser")
            Me.columnManagement = MyBase.Columns("Management")
            Me.columnAdministration = MyBase.Columns("Administration")
            Me.columnDomainLogon = MyBase.Columns("DomainLogon")
            Me.columnTrackingTimestamp = MyBase.Columns("TrackingTimestamp")
            Me.columnTrackingInfo = MyBase.Columns("TrackingInfo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnConsultantNumber = New Global.System.Data.DataColumn("ConsultantNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsultantNumber)
            Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnName)
            Me.columnUsername = New Global.System.Data.DataColumn("Username", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnUsername)
            Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailAddress)
            Me.columnMobilePhone = New Global.System.Data.DataColumn("MobilePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMobilePhone)
            Me.columnConsultantUID = New Global.System.Data.DataColumn("ConsultantUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsultantUID)
            Me.columnConsultantID = New Global.System.Data.DataColumn("ConsultantID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsultantID)
            Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedDateTime)
            Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDateTime)
            Me.columnMinSyncTime = New Global.System.Data.DataColumn("MinSyncTime", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinSyncTime)
            Me.columnLastSyncTime = New Global.System.Data.DataColumn("LastSyncTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLastSyncTime)
            Me.columnSyncTime = New Global.System.Data.DataColumn("SyncTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSyncTime)
            Me.columnMobileAlert = New Global.System.Data.DataColumn("MobileAlert", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMobileAlert)
            Me.columnIsActiviserUser = New Global.System.Data.DataColumn("IsActiviserUser", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsActiviserUser)
            Me.columnManagement = New Global.System.Data.DataColumn("Management", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnManagement)
            Me.columnAdministration = New Global.System.Data.DataColumn("Administration", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAdministration)
            Me.columnDomainLogon = New Global.System.Data.DataColumn("DomainLogon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDomainLogon)
            Me.columnTrackingTimestamp = New Global.System.Data.DataColumn("TrackingTimestamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrackingTimestamp)
            Me.columnTrackingInfo = New Global.System.Data.DataColumn("TrackingInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrackingInfo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_Consultant", New Global.System.Data.DataColumn() {Me.columnConsultantUID}, true))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("UX_Consultant_Username", New Global.System.Data.DataColumn() {Me.columnUsername}, false))
            Me.columnConsultantNumber.MaxLength = 100
            Me.columnName.AllowDBNull = false
            Me.columnName.MaxLength = 250
            Me.columnUsername.Unique = true
            Me.columnUsername.MaxLength = 50
            Me.columnEmailAddress.MaxLength = 250
            Me.columnMobilePhone.MaxLength = 50
            Me.columnConsultantUID.AllowDBNull = false
            Me.columnConsultantUID.Unique = true
            Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnMobileAlert.DefaultValue = CType(false,Boolean)
            Me.columnIsActiviserUser.DefaultValue = CType(true,Boolean)
            Me.columnManagement.DefaultValue = CType(false,Boolean)
            Me.columnAdministration.DefaultValue = CType(false,Boolean)
            Me.columnDomainLogon.MaxLength = 250
            Me.columnTrackingInfo.MaxLength = 128
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewConsultantRow() As ConsultantRow
            Return CType(Me.NewRow,ConsultantRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ConsultantRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ConsultantRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ConsultantRowChangedEvent) Is Nothing) Then
                RaiseEvent ConsultantRowChanged(Me, New ConsultantRowChangeEvent(CType(e.Row,ConsultantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ConsultantRowChangingEvent) Is Nothing) Then
                RaiseEvent ConsultantRowChanging(Me, New ConsultantRowChangeEvent(CType(e.Row,ConsultantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ConsultantRowDeletedEvent) Is Nothing) Then
                RaiseEvent ConsultantRowDeleted(Me, New ConsultantRowChangeEvent(CType(e.Row,ConsultantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ConsultantRowDeletingEvent) Is Nothing) Then
                RaiseEvent ConsultantRowDeleting(Me, New ConsultantRowChangeEvent(CType(e.Row,ConsultantRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveConsultantRow(ByVal row As ConsultantRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ClientDataSet = New ClientDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ConsultantDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClientSiteStatusDataTable
        Inherits Global.System.Data.TypedTableBase(Of ClientSiteStatusRow)
        
        Private columnClientSiteStatusID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnIsActive As Global.System.Data.DataColumn
        
        Private columnCreatedDateTime As Global.System.Data.DataColumn
        
        Private columnModifiedDateTime As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ClientSiteStatus"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientSiteStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientSiteStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsActiveColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsActive
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientSiteStatusRow
            Get
                Return CType(Me.Rows(index),ClientSiteStatusRow)
            End Get
        End Property
        
        Public Event ClientSiteStatusRowChanging As ClientSiteStatusRowChangeEventHandler
        
        Public Event ClientSiteStatusRowChanged As ClientSiteStatusRowChangeEventHandler
        
        Public Event ClientSiteStatusRowDeleting As ClientSiteStatusRowChangeEventHandler
        
        Public Event ClientSiteStatusRowDeleted As ClientSiteStatusRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClientSiteStatusRow(ByVal row As ClientSiteStatusRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClientSiteStatusRow(ByVal ClientSiteStatusID As Integer, ByVal Description As String, ByVal IsActive As Boolean, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date) As ClientSiteStatusRow
            Dim rowClientSiteStatusRow As ClientSiteStatusRow = CType(Me.NewRow,ClientSiteStatusRow)
            Dim columnValuesArray() As Object = New Object() {ClientSiteStatusID, Description, IsActive, CreatedDateTime, ModifiedDateTime}
            rowClientSiteStatusRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClientSiteStatusRow)
            Return rowClientSiteStatusRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByClientSiteStatusID(ByVal ClientSiteStatusID As Integer) As ClientSiteStatusRow
            Return CType(Me.Rows.Find(New Object() {ClientSiteStatusID}),ClientSiteStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ClientSiteStatusDataTable = CType(MyBase.Clone,ClientSiteStatusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ClientSiteStatusDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnClientSiteStatusID = MyBase.Columns("ClientSiteStatusID")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnIsActive = MyBase.Columns("IsActive")
            Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
            Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnClientSiteStatusID = New Global.System.Data.DataColumn("ClientSiteStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientSiteStatusID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnIsActive = New Global.System.Data.DataColumn("IsActive", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsActive)
            Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedDateTime)
            Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDateTime)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_ClientSiteStatus", New Global.System.Data.DataColumn() {Me.columnClientSiteStatusID}, true))
            Me.columnClientSiteStatusID.AllowDBNull = false
            Me.columnClientSiteStatusID.Unique = true
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 250
            Me.columnIsActive.AllowDBNull = false
            Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClientSiteStatusRow() As ClientSiteStatusRow
            Return CType(Me.NewRow,ClientSiteStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ClientSiteStatusRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ClientSiteStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientSiteStatusRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientSiteStatusRowChanged(Me, New ClientSiteStatusRowChangeEvent(CType(e.Row,ClientSiteStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientSiteStatusRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientSiteStatusRowChanging(Me, New ClientSiteStatusRowChangeEvent(CType(e.Row,ClientSiteStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientSiteStatusRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientSiteStatusRowDeleted(Me, New ClientSiteStatusRowChangeEvent(CType(e.Row,ClientSiteStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientSiteStatusRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientSiteStatusRowDeleting(Me, New ClientSiteStatusRowChangeEvent(CType(e.Row,ClientSiteStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClientSiteStatusRow(ByVal row As ClientSiteStatusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ClientDataSet = New ClientDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClientSiteStatusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class ClientSiteDataTable
        Inherits Global.System.Data.TypedTableBase(Of ClientSiteRow)
        
        Private columnClientSiteUID As Global.System.Data.DataColumn
        
        Private columnClientSiteID As Global.System.Data.DataColumn
        
        Private columnClientSiteNumber As Global.System.Data.DataColumn
        
        Private columnSiteName As Global.System.Data.DataColumn
        
        Private columnSiteAddress As Global.System.Data.DataColumn
        
        Private columnSiteContactEmail As Global.System.Data.DataColumn
        
        Private columnSiteNotes As Global.System.Data.DataColumn
        
        Private columnContact As Global.System.Data.DataColumn
        
        Private columnContactPhone1 As Global.System.Data.DataColumn
        
        Private columnContactPhone2 As Global.System.Data.DataColumn
        
        Private columnHold As Global.System.Data.DataColumn
        
        Private columnClientSiteStatusID As Global.System.Data.DataColumn
        
        Private columnCreatedDateTime As Global.System.Data.DataColumn
        
        Private columnModifiedDateTime As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "ClientSite"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientSiteUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientSiteUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientSiteIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientSiteID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientSiteNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientSiteNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SiteNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SiteAddressColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteAddress
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SiteContactEmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteContactEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SiteNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSiteNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactPhone1Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactPhone1
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactPhone2Column() As Global.System.Data.DataColumn
            Get
                Return Me.columnContactPhone2
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property HoldColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnHold
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientSiteStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientSiteStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As ClientSiteRow
            Get
                Return CType(Me.Rows(index),ClientSiteRow)
            End Get
        End Property
        
        Public Event ClientSiteRowChanging As ClientSiteRowChangeEventHandler
        
        Public Event ClientSiteRowChanged As ClientSiteRowChangeEventHandler
        
        Public Event ClientSiteRowDeleting As ClientSiteRowChangeEventHandler
        
        Public Event ClientSiteRowDeleted As ClientSiteRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddClientSiteRow(ByVal row As ClientSiteRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddClientSiteRow(ByVal ClientSiteUID As System.Guid, ByVal ClientSiteID As Integer, ByVal ClientSiteNumber As String, ByVal SiteName As String, ByVal SiteAddress As String, ByVal SiteContactEmail As String, ByVal SiteNotes As String, ByVal Contact As String, ByVal ContactPhone1 As String, ByVal ContactPhone2 As String, ByVal Hold As Boolean, ByVal parentClientSiteStatusRowByFK_ClientSite_ClientSiteStatus As ClientSiteStatusRow, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date) As ClientSiteRow
            Dim rowClientSiteRow As ClientSiteRow = CType(Me.NewRow,ClientSiteRow)
            Dim columnValuesArray() As Object = New Object() {ClientSiteUID, ClientSiteID, ClientSiteNumber, SiteName, SiteAddress, SiteContactEmail, SiteNotes, Contact, ContactPhone1, ContactPhone2, Hold, Nothing, CreatedDateTime, ModifiedDateTime}
            If (Not (parentClientSiteStatusRowByFK_ClientSite_ClientSiteStatus) Is Nothing) Then
                columnValuesArray(11) = parentClientSiteStatusRowByFK_ClientSite_ClientSiteStatus(0)
            End If
            rowClientSiteRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowClientSiteRow)
            Return rowClientSiteRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByClientSiteUID(ByVal ClientSiteUID As System.Guid) As ClientSiteRow
            Return CType(Me.Rows.Find(New Object() {ClientSiteUID}),ClientSiteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As ClientSiteDataTable = CType(MyBase.Clone,ClientSiteDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New ClientSiteDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnClientSiteUID = MyBase.Columns("ClientSiteUID")
            Me.columnClientSiteID = MyBase.Columns("ClientSiteID")
            Me.columnClientSiteNumber = MyBase.Columns("ClientSiteNumber")
            Me.columnSiteName = MyBase.Columns("SiteName")
            Me.columnSiteAddress = MyBase.Columns("SiteAddress")
            Me.columnSiteContactEmail = MyBase.Columns("SiteContactEmail")
            Me.columnSiteNotes = MyBase.Columns("SiteNotes")
            Me.columnContact = MyBase.Columns("Contact")
            Me.columnContactPhone1 = MyBase.Columns("ContactPhone1")
            Me.columnContactPhone2 = MyBase.Columns("ContactPhone2")
            Me.columnHold = MyBase.Columns("Hold")
            Me.columnClientSiteStatusID = MyBase.Columns("ClientSiteStatusID")
            Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
            Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnClientSiteUID = New Global.System.Data.DataColumn("ClientSiteUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientSiteUID)
            Me.columnClientSiteID = New Global.System.Data.DataColumn("ClientSiteID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientSiteID)
            Me.columnClientSiteNumber = New Global.System.Data.DataColumn("ClientSiteNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientSiteNumber)
            Me.columnSiteName = New Global.System.Data.DataColumn("SiteName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteName)
            Me.columnSiteAddress = New Global.System.Data.DataColumn("SiteAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteAddress)
            Me.columnSiteContactEmail = New Global.System.Data.DataColumn("SiteContactEmail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteContactEmail)
            Me.columnSiteNotes = New Global.System.Data.DataColumn("SiteNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSiteNotes)
            Me.columnContact = New Global.System.Data.DataColumn("Contact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContact)
            Me.columnContactPhone1 = New Global.System.Data.DataColumn("ContactPhone1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactPhone1)
            Me.columnContactPhone2 = New Global.System.Data.DataColumn("ContactPhone2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContactPhone2)
            Me.columnHold = New Global.System.Data.DataColumn("Hold", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnHold)
            Me.columnClientSiteStatusID = New Global.System.Data.DataColumn("ClientSiteStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientSiteStatusID)
            Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedDateTime)
            Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDateTime)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_ClientSite", New Global.System.Data.DataColumn() {Me.columnClientSiteUID}, true))
            Me.columnClientSiteUID.AllowDBNull = false
            Me.columnClientSiteUID.Unique = true
            Me.columnClientSiteUID.Caption = "UID"
            Me.columnClientSiteID.Caption = "ID"
            Me.columnClientSiteNumber.MaxLength = 100
            Me.columnSiteName.MaxLength = 250
            Me.columnSiteAddress.MaxLength = 250
            Me.columnSiteContactEmail.MaxLength = 100
            Me.columnSiteNotes.MaxLength = 2000
            Me.columnContact.MaxLength = 100
            Me.columnContactPhone1.MaxLength = 50
            Me.columnContactPhone2.MaxLength = 50
            Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewClientSiteRow() As ClientSiteRow
            Return CType(Me.NewRow,ClientSiteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New ClientSiteRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(ClientSiteRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.ClientSiteRowChangedEvent) Is Nothing) Then
                RaiseEvent ClientSiteRowChanged(Me, New ClientSiteRowChangeEvent(CType(e.Row,ClientSiteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.ClientSiteRowChangingEvent) Is Nothing) Then
                RaiseEvent ClientSiteRowChanging(Me, New ClientSiteRowChangeEvent(CType(e.Row,ClientSiteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.ClientSiteRowDeletedEvent) Is Nothing) Then
                RaiseEvent ClientSiteRowDeleted(Me, New ClientSiteRowChangeEvent(CType(e.Row,ClientSiteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.ClientSiteRowDeletingEvent) Is Nothing) Then
                RaiseEvent ClientSiteRowDeleting(Me, New ClientSiteRowChangeEvent(CType(e.Row,ClientSiteRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveClientSiteRow(ByVal row As ClientSiteRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ClientDataSet = New ClientDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "ClientSiteDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RequestStatusDataTable
        Inherits Global.System.Data.TypedTableBase(Of RequestStatusRow)
        
        Private columnRequestStatusID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnDisplayOrder As Global.System.Data.DataColumn
        
        Private columnIsClientMenuItem As Global.System.Data.DataColumn
        
        Private columnIsReasonRequired As Global.System.Data.DataColumn
        
        Private columnIsNewStatus As Global.System.Data.DataColumn
        
        Private columnIsInProgressStatus As Global.System.Data.DataColumn
        
        Private columnIsCompleteStatus As Global.System.Data.DataColumn
        
        Private columnIsCancelledStatus As Global.System.Data.DataColumn
        
        Private columnCreatedDateTime As Global.System.Data.DataColumn
        
        Private columnModifiedDateTime As Global.System.Data.DataColumn
        
        Private columnColour As Global.System.Data.DataColumn
        
        Private columnBackColour As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "RequestStatus"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DisplayOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDisplayOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsClientMenuItemColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsClientMenuItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsReasonRequiredColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsReasonRequired
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsNewStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsNewStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsInProgressStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsInProgressStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsCompleteStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsCompleteStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsCancelledStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsCancelledStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ColourColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnColour
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property BackColourColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnBackColour
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RequestStatusRow
            Get
                Return CType(Me.Rows(index),RequestStatusRow)
            End Get
        End Property
        
        Public Event RequestStatusRowChanging As RequestStatusRowChangeEventHandler
        
        Public Event RequestStatusRowChanged As RequestStatusRowChangeEventHandler
        
        Public Event RequestStatusRowDeleting As RequestStatusRowChangeEventHandler
        
        Public Event RequestStatusRowDeleted As RequestStatusRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRequestStatusRow(ByVal row As RequestStatusRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRequestStatusRow(ByVal RequestStatusID As Integer, ByVal Description As String, ByVal DisplayOrder As Integer, ByVal IsClientMenuItem As Boolean, ByVal IsReasonRequired As Boolean, ByVal IsNewStatus As Boolean, ByVal IsInProgressStatus As Boolean, ByVal IsCompleteStatus As Boolean, ByVal IsCancelledStatus As Boolean, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date, ByVal Colour As Integer, ByVal BackColour As Integer) As RequestStatusRow
            Dim rowRequestStatusRow As RequestStatusRow = CType(Me.NewRow,RequestStatusRow)
            Dim columnValuesArray() As Object = New Object() {RequestStatusID, Description, DisplayOrder, IsClientMenuItem, IsReasonRequired, IsNewStatus, IsInProgressStatus, IsCompleteStatus, IsCancelledStatus, CreatedDateTime, ModifiedDateTime, Colour, BackColour}
            rowRequestStatusRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRequestStatusRow)
            Return rowRequestStatusRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRequestStatusID(ByVal RequestStatusID As Integer) As RequestStatusRow
            Return CType(Me.Rows.Find(New Object() {RequestStatusID}),RequestStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RequestStatusDataTable = CType(MyBase.Clone,RequestStatusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RequestStatusDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRequestStatusID = MyBase.Columns("RequestStatusID")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnDisplayOrder = MyBase.Columns("DisplayOrder")
            Me.columnIsClientMenuItem = MyBase.Columns("IsClientMenuItem")
            Me.columnIsReasonRequired = MyBase.Columns("IsReasonRequired")
            Me.columnIsNewStatus = MyBase.Columns("IsNewStatus")
            Me.columnIsInProgressStatus = MyBase.Columns("IsInProgressStatus")
            Me.columnIsCompleteStatus = MyBase.Columns("IsCompleteStatus")
            Me.columnIsCancelledStatus = MyBase.Columns("IsCancelledStatus")
            Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
            Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
            Me.columnColour = MyBase.Columns("Colour")
            Me.columnBackColour = MyBase.Columns("BackColour")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRequestStatusID = New Global.System.Data.DataColumn("RequestStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestStatusID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnDisplayOrder = New Global.System.Data.DataColumn("DisplayOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDisplayOrder)
            Me.columnIsClientMenuItem = New Global.System.Data.DataColumn("IsClientMenuItem", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsClientMenuItem)
            Me.columnIsReasonRequired = New Global.System.Data.DataColumn("IsReasonRequired", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsReasonRequired)
            Me.columnIsNewStatus = New Global.System.Data.DataColumn("IsNewStatus", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsNewStatus)
            Me.columnIsInProgressStatus = New Global.System.Data.DataColumn("IsInProgressStatus", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsInProgressStatus)
            Me.columnIsCompleteStatus = New Global.System.Data.DataColumn("IsCompleteStatus", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsCompleteStatus)
            Me.columnIsCancelledStatus = New Global.System.Data.DataColumn("IsCancelledStatus", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsCancelledStatus)
            Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedDateTime)
            Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDateTime)
            Me.columnColour = New Global.System.Data.DataColumn("Colour", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnColour)
            Me.columnBackColour = New Global.System.Data.DataColumn("BackColour", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnBackColour)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_RequestStatus", New Global.System.Data.DataColumn() {Me.columnRequestStatusID}, true))
            Me.columnRequestStatusID.AllowDBNull = false
            Me.columnRequestStatusID.Unique = true
            Me.columnRequestStatusID.Caption = "ID"
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 50
            Me.columnIsClientMenuItem.AllowDBNull = false
            Me.columnIsReasonRequired.AllowDBNull = false
            Me.columnIsNewStatus.AllowDBNull = false
            Me.columnIsInProgressStatus.AllowDBNull = false
            Me.columnIsCompleteStatus.AllowDBNull = false
            Me.columnIsCancelledStatus.AllowDBNull = false
            Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnColour.AllowDBNull = false
            Me.columnColour.DefaultValue = CType(0,Integer)
            Me.columnBackColour.AllowDBNull = false
            Me.columnBackColour.DefaultValue = CType(-1,Integer)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRequestStatusRow() As RequestStatusRow
            Return CType(Me.NewRow,RequestStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RequestStatusRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RequestStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RequestStatusRowChangedEvent) Is Nothing) Then
                RaiseEvent RequestStatusRowChanged(Me, New RequestStatusRowChangeEvent(CType(e.Row,RequestStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RequestStatusRowChangingEvent) Is Nothing) Then
                RaiseEvent RequestStatusRowChanging(Me, New RequestStatusRowChangeEvent(CType(e.Row,RequestStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RequestStatusRowDeletedEvent) Is Nothing) Then
                RaiseEvent RequestStatusRowDeleted(Me, New RequestStatusRowChangeEvent(CType(e.Row,RequestStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RequestStatusRowDeletingEvent) Is Nothing) Then
                RaiseEvent RequestStatusRowDeleting(Me, New RequestStatusRowChangeEvent(CType(e.Row,RequestStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRequestStatusRow(ByVal row As RequestStatusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ClientDataSet = New ClientDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RequestStatusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class RequestDataTable
        Inherits Global.System.Data.TypedTableBase(Of RequestRow)
        
        Private columnRequestUID As Global.System.Data.DataColumn
        
        Private columnRequestID As Global.System.Data.DataColumn
        
        Private columnRequestNumber As Global.System.Data.DataColumn
        
        Private columnConsultantRID As Global.System.Data.DataColumn
        
        Private columnConsultantStatusID As Global.System.Data.DataColumn
        
        Private columnClientSiteUID As Global.System.Data.DataColumn
        
        Private columnAssignedToUID As Global.System.Data.DataColumn
        
        Private columnRequestStatusID As Global.System.Data.DataColumn
        
        Private columnNextActionDate As Global.System.Data.DataColumn
        
        Private columnCompletedDate As Global.System.Data.DataColumn
        
        Private columnContact As Global.System.Data.DataColumn
        
        Private columnShortDescription As Global.System.Data.DataColumn
        
        Private columnLongDescription As Global.System.Data.DataColumn
        
        Private columnCreatedDateTime As Global.System.Data.DataColumn
        
        Private columnModifiedDateTime As Global.System.Data.DataColumn
        
        Private columnClientSiteName As Global.System.Data.DataColumn
        
        Private columnJobs As Global.System.Data.DataColumn
        
        Private columnAssignedToName As Global.System.Data.DataColumn
        
        Private columnRequestStatusDescription As Global.System.Data.DataColumn
        
        Private columnRequestStatusOrder As Global.System.Data.DataColumn
        
        Private columnConsultantStatusDescription As Global.System.Data.DataColumn
        
        Private columnConsultantStatusOrder As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "Request"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsultantRIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsultantRID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsultantStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsultantStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientSiteUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientSiteUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssignedToUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssignedToUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property NextActionDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnNextActionDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CompletedDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCompletedDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ContactColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnContact
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ShortDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnShortDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LongDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLongDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientSiteNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientSiteName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobs
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AssignedToNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAssignedToName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestStatusDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestStatusDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestStatusOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestStatusOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsultantStatusDescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsultantStatusDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsultantStatusOrderColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsultantStatusOrder
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As RequestRow
            Get
                Return CType(Me.Rows(index),RequestRow)
            End Get
        End Property
        
        Public Event RequestRowChanging As RequestRowChangeEventHandler
        
        Public Event RequestRowChanged As RequestRowChangeEventHandler
        
        Public Event RequestRowDeleting As RequestRowChangeEventHandler
        
        Public Event RequestRowDeleted As RequestRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddRequestRow(ByVal row As RequestRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRequestRow( _
                    ByVal RequestUID As System.Guid,  _
                    ByVal RequestNumber As String,  _
                    ByVal parentRequestStatusRowByFK_Request_ConsultantStatus As RequestStatusRow,  _
                    ByVal parentClientSiteRowByFK_Request_ClientSite As ClientSiteRow,  _
                    ByVal parentConsultantRowByFK_Request_Consultant As ConsultantRow,  _
                    ByVal parentRequestStatusRowByFK_Request_RequestStatus As RequestStatusRow,  _
                    ByVal NextActionDate As Date,  _
                    ByVal CompletedDate As Date,  _
                    ByVal Contact As String,  _
                    ByVal ShortDescription As String,  _
                    ByVal LongDescription As String,  _
                    ByVal CreatedDateTime As Date,  _
                    ByVal ModifiedDateTime As Date,  _
                    ByVal ClientSiteName As String,  _
                    ByVal Jobs As Integer,  _
                    ByVal AssignedToName As String,  _
                    ByVal RequestStatusDescription As String,  _
                    ByVal RequestStatusOrder As Integer,  _
                    ByVal ConsultantStatusDescription As String,  _
                    ByVal ConsultantStatusOrder As Integer) As RequestRow
            Dim rowRequestRow As RequestRow = CType(Me.NewRow,RequestRow)
            Dim columnValuesArray() As Object = New Object() {RequestUID, Nothing, RequestNumber, Nothing, Nothing, Nothing, Nothing, Nothing, NextActionDate, CompletedDate, Contact, ShortDescription, LongDescription, CreatedDateTime, ModifiedDateTime, ClientSiteName, Jobs, AssignedToName, RequestStatusDescription, RequestStatusOrder, ConsultantStatusDescription, ConsultantStatusOrder}
            If (Not (parentRequestStatusRowByFK_Request_ConsultantStatus) Is Nothing) Then
                columnValuesArray(4) = parentRequestStatusRowByFK_Request_ConsultantStatus(0)
            End If
            If (Not (parentClientSiteRowByFK_Request_ClientSite) Is Nothing) Then
                columnValuesArray(5) = parentClientSiteRowByFK_Request_ClientSite(0)
            End If
            If (Not (parentConsultantRowByFK_Request_Consultant) Is Nothing) Then
                columnValuesArray(6) = parentConsultantRowByFK_Request_Consultant(5)
            End If
            If (Not (parentRequestStatusRowByFK_Request_RequestStatus) Is Nothing) Then
                columnValuesArray(7) = parentRequestStatusRowByFK_Request_RequestStatus(0)
            End If
            rowRequestRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRequestRow)
            Return rowRequestRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddRequestRow(ByVal RequestUID As System.Guid, ByVal RequestNumber As String, ByVal parentRequestStatusRowByFK_Request_ConsultantStatus As RequestStatusRow, ByVal parentClientSiteRowByFK_Request_ClientSite As ClientSiteRow, ByVal parentConsultantRowByFK_Request_Consultant As ConsultantRow, ByVal parentRequestStatusRowByFK_Request_RequestStatus As RequestStatusRow, ByVal NextActionDate As Date, ByVal CompletedDate As Date, ByVal Contact As String, ByVal ShortDescription As String, ByVal LongDescription As String, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date) As RequestRow
            Dim rowRequestRow As RequestRow = CType(Me.NewRow,RequestRow)
            Dim columnValuesArray() As Object = New Object() {RequestUID, Nothing, RequestNumber, Nothing, Nothing, Nothing, Nothing, Nothing, NextActionDate, CompletedDate, Contact, ShortDescription, LongDescription, CreatedDateTime, ModifiedDateTime, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}
            If (Not (parentRequestStatusRowByFK_Request_ConsultantStatus) Is Nothing) Then
                columnValuesArray(4) = parentRequestStatusRowByFK_Request_ConsultantStatus(0)
            End If
            If (Not (parentClientSiteRowByFK_Request_ClientSite) Is Nothing) Then
                columnValuesArray(5) = parentClientSiteRowByFK_Request_ClientSite(0)
            End If
            If (Not (parentConsultantRowByFK_Request_Consultant) Is Nothing) Then
                columnValuesArray(6) = parentConsultantRowByFK_Request_Consultant(5)
            End If
            If (Not (parentRequestStatusRowByFK_Request_RequestStatus) Is Nothing) Then
                columnValuesArray(7) = parentRequestStatusRowByFK_Request_RequestStatus(0)
            End If
            rowRequestRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowRequestRow)
            Return rowRequestRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByRequestUID(ByVal RequestUID As System.Guid) As RequestRow
            Return CType(Me.Rows.Find(New Object() {RequestUID}),RequestRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As RequestDataTable = CType(MyBase.Clone,RequestDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New RequestDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnRequestUID = MyBase.Columns("RequestUID")
            Me.columnRequestID = MyBase.Columns("RequestID")
            Me.columnRequestNumber = MyBase.Columns("RequestNumber")
            Me.columnConsultantRID = MyBase.Columns("ConsultantRID")
            Me.columnConsultantStatusID = MyBase.Columns("ConsultantStatusID")
            Me.columnClientSiteUID = MyBase.Columns("ClientSiteUID")
            Me.columnAssignedToUID = MyBase.Columns("AssignedToUID")
            Me.columnRequestStatusID = MyBase.Columns("RequestStatusID")
            Me.columnNextActionDate = MyBase.Columns("NextActionDate")
            Me.columnCompletedDate = MyBase.Columns("CompletedDate")
            Me.columnContact = MyBase.Columns("Contact")
            Me.columnShortDescription = MyBase.Columns("ShortDescription")
            Me.columnLongDescription = MyBase.Columns("LongDescription")
            Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
            Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
            Me.columnClientSiteName = MyBase.Columns("ClientSiteName")
            Me.columnJobs = MyBase.Columns("Jobs")
            Me.columnAssignedToName = MyBase.Columns("AssignedToName")
            Me.columnRequestStatusDescription = MyBase.Columns("RequestStatusDescription")
            Me.columnRequestStatusOrder = MyBase.Columns("RequestStatusOrder")
            Me.columnConsultantStatusDescription = MyBase.Columns("ConsultantStatusDescription")
            Me.columnConsultantStatusOrder = MyBase.Columns("ConsultantStatusOrder")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnRequestUID = New Global.System.Data.DataColumn("RequestUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestUID)
            Me.columnRequestID = New Global.System.Data.DataColumn("RequestID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestID)
            Me.columnRequestNumber = New Global.System.Data.DataColumn("RequestNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestNumber)
            Me.columnConsultantRID = New Global.System.Data.DataColumn("ConsultantRID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsultantRID)
            Me.columnConsultantStatusID = New Global.System.Data.DataColumn("ConsultantStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsultantStatusID)
            Me.columnClientSiteUID = New Global.System.Data.DataColumn("ClientSiteUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientSiteUID)
            Me.columnAssignedToUID = New Global.System.Data.DataColumn("AssignedToUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssignedToUID)
            Me.columnRequestStatusID = New Global.System.Data.DataColumn("RequestStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestStatusID)
            Me.columnNextActionDate = New Global.System.Data.DataColumn("NextActionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnNextActionDate)
            Me.columnCompletedDate = New Global.System.Data.DataColumn("CompletedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCompletedDate)
            Me.columnContact = New Global.System.Data.DataColumn("Contact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnContact)
            Me.columnShortDescription = New Global.System.Data.DataColumn("ShortDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnShortDescription)
            Me.columnLongDescription = New Global.System.Data.DataColumn("LongDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLongDescription)
            Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedDateTime)
            Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDateTime)
            Me.columnClientSiteName = New Global.System.Data.DataColumn("ClientSiteName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientSiteName)
            Me.columnJobs = New Global.System.Data.DataColumn("Jobs", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobs)
            Me.columnAssignedToName = New Global.System.Data.DataColumn("AssignedToName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAssignedToName)
            Me.columnRequestStatusDescription = New Global.System.Data.DataColumn("RequestStatusDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestStatusDescription)
            Me.columnRequestStatusOrder = New Global.System.Data.DataColumn("RequestStatusOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestStatusOrder)
            Me.columnConsultantStatusDescription = New Global.System.Data.DataColumn("ConsultantStatusDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsultantStatusDescription)
            Me.columnConsultantStatusOrder = New Global.System.Data.DataColumn("ConsultantStatusOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsultantStatusOrder)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_Request", New Global.System.Data.DataColumn() {Me.columnRequestUID}, true))
            Me.columnRequestUID.AllowDBNull = false
            Me.columnRequestUID.Unique = true
            Me.columnRequestUID.Caption = "UID"
            Me.columnRequestID.AutoIncrement = true
            Me.columnRequestID.AutoIncrementSeed = -1
            Me.columnRequestID.AutoIncrementStep = -1
            Me.columnRequestID.Caption = "ID"
            Me.columnRequestNumber.MaxLength = 100
            Me.columnConsultantRID.AutoIncrement = true
            Me.columnConsultantRID.AutoIncrementSeed = -1
            Me.columnConsultantRID.AutoIncrementStep = -1
            Me.columnNextActionDate.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnCompletedDate.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnContact.MaxLength = 100
            Me.columnShortDescription.MaxLength = 200
            Me.columnLongDescription.MaxLength = 3500
            Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnClientSiteName.ReadOnly = true
            Me.columnJobs.ReadOnly = true
            Me.columnAssignedToName.ReadOnly = true
            Me.columnRequestStatusDescription.ReadOnly = true
            Me.columnRequestStatusOrder.ReadOnly = true
            Me.columnConsultantStatusDescription.ReadOnly = true
            Me.columnConsultantStatusOrder.ReadOnly = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewRequestRow() As RequestRow
            Return CType(Me.NewRow,RequestRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New RequestRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(RequestRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.ClientSiteNameColumn.Expression = "Parent(FK_Request_ClientSite).SiteName"
            Me.JobsColumn.Expression = "COUNT(CHILD(FK_Job_Request).JobStatusID)"
            Me.AssignedToNameColumn.Expression = "Parent(FK_Request_Consultant).Name"
            Me.RequestStatusDescriptionColumn.Expression = "Parent(FK_Request_RequestStatus).Description"
            Me.RequestStatusOrderColumn.Expression = "Parent(FK_Request_RequestStatus).DisplayOrder"
            Me.ConsultantStatusDescriptionColumn.Expression = "ISNULL(Parent(FK_Request_ConsultantStatus).Description,Parent(FK_Request_RequestS"& _ 
                "tatus).Description)"
            Me.ConsultantStatusOrderColumn.Expression = "ISNULL(Parent(FK_Request_ConsultantStatus).DisplayOrder, Parent(FK_Request_Reques"& _ 
                "tStatus).DisplayOrder)"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.RequestRowChangedEvent) Is Nothing) Then
                RaiseEvent RequestRowChanged(Me, New RequestRowChangeEvent(CType(e.Row,RequestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.RequestRowChangingEvent) Is Nothing) Then
                RaiseEvent RequestRowChanging(Me, New RequestRowChangeEvent(CType(e.Row,RequestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.RequestRowDeletedEvent) Is Nothing) Then
                RaiseEvent RequestRowDeleted(Me, New RequestRowChangeEvent(CType(e.Row,RequestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.RequestRowDeletingEvent) Is Nothing) Then
                RaiseEvent RequestRowDeleting(Me, New RequestRowChangeEvent(CType(e.Row,RequestRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveRequestRow(ByVal row As RequestRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ClientDataSet = New ClientDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "RequestDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class JobStatusDataTable
        Inherits Global.System.Data.TypedTableBase(Of JobStatusRow)
        
        Private columnJobStatusID As Global.System.Data.DataColumn
        
        Private columnDescription As Global.System.Data.DataColumn
        
        Private columnCreatedDateTime As Global.System.Data.DataColumn
        
        Private columnModifiedDateTime As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "JobStatus"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDescription
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As JobStatusRow
            Get
                Return CType(Me.Rows(index),JobStatusRow)
            End Get
        End Property
        
        Public Event JobStatusRowChanging As JobStatusRowChangeEventHandler
        
        Public Event JobStatusRowChanged As JobStatusRowChangeEventHandler
        
        Public Event JobStatusRowDeleting As JobStatusRowChangeEventHandler
        
        Public Event JobStatusRowDeleted As JobStatusRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddJobStatusRow(ByVal row As JobStatusRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddJobStatusRow(ByVal JobStatusID As Integer, ByVal Description As String, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date) As JobStatusRow
            Dim rowJobStatusRow As JobStatusRow = CType(Me.NewRow,JobStatusRow)
            Dim columnValuesArray() As Object = New Object() {JobStatusID, Description, CreatedDateTime, ModifiedDateTime}
            rowJobStatusRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowJobStatusRow)
            Return rowJobStatusRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByJobStatusID(ByVal JobStatusID As Integer) As JobStatusRow
            Return CType(Me.Rows.Find(New Object() {JobStatusID}),JobStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As JobStatusDataTable = CType(MyBase.Clone,JobStatusDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New JobStatusDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnJobStatusID = MyBase.Columns("JobStatusID")
            Me.columnDescription = MyBase.Columns("Description")
            Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
            Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnJobStatusID = New Global.System.Data.DataColumn("JobStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobStatusID)
            Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDescription)
            Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedDateTime)
            Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDateTime)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_JobStatus", New Global.System.Data.DataColumn() {Me.columnJobStatusID}, true))
            Me.columnJobStatusID.AllowDBNull = false
            Me.columnJobStatusID.Unique = true
            Me.columnDescription.AllowDBNull = false
            Me.columnDescription.MaxLength = 50
            Me.columnCreatedDateTime.AllowDBNull = false
            Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnModifiedDateTime.AllowDBNull = false
            Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewJobStatusRow() As JobStatusRow
            Return CType(Me.NewRow,JobStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New JobStatusRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(JobStatusRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.JobStatusRowChangedEvent) Is Nothing) Then
                RaiseEvent JobStatusRowChanged(Me, New JobStatusRowChangeEvent(CType(e.Row,JobStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.JobStatusRowChangingEvent) Is Nothing) Then
                RaiseEvent JobStatusRowChanging(Me, New JobStatusRowChangeEvent(CType(e.Row,JobStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.JobStatusRowDeletedEvent) Is Nothing) Then
                RaiseEvent JobStatusRowDeleted(Me, New JobStatusRowChangeEvent(CType(e.Row,JobStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.JobStatusRowDeletingEvent) Is Nothing) Then
                RaiseEvent JobStatusRowDeleting(Me, New JobStatusRowChangeEvent(CType(e.Row,JobStatusRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveJobStatusRow(ByVal row As JobStatusRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ClientDataSet = New ClientDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "JobStatusDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class JobDataTable
        Inherits Global.System.Data.TypedTableBase(Of JobRow)
        
        Private columnJobUID As Global.System.Data.DataColumn
        
        Private columnJobID As Global.System.Data.DataColumn
        
        Private columnJobNumber As Global.System.Data.DataColumn
        
        Private columnConsultantJobID As Global.System.Data.DataColumn
        
        Private columnConsultantUID As Global.System.Data.DataColumn
        
        Private columnClientSiteUID As Global.System.Data.DataColumn
        
        Private columnRequestUID As Global.System.Data.DataColumn
        
        Private columnJobDate As Global.System.Data.DataColumn
        
        Private columnStartTime As Global.System.Data.DataColumn
        
        Private columnFinishTime As Global.System.Data.DataColumn
        
        Private columnJobDetails As Global.System.Data.DataColumn
        
        Private columnJobNotes As Global.System.Data.DataColumn
        
        Private columnEquipment As Global.System.Data.DataColumn
        
        Private columnJobStatusID As Global.System.Data.DataColumn
        
        Private columnReturnDate As Global.System.Data.DataColumn
        
        Private columnSignatory As Global.System.Data.DataColumn
        
        Private columnSignature As Global.System.Data.DataColumn
        
        Private columnEmail As Global.System.Data.DataColumn
        
        Private columnEmailStatus As Global.System.Data.DataColumn
        
        Private columnMinutesTravelled As Global.System.Data.DataColumn
        
        Private columnCreatedDateTime As Global.System.Data.DataColumn
        
        Private columnModifiedDateTime As Global.System.Data.DataColumn
        
        Private columnFlag As Global.System.Data.DataColumn
        
        Private columnConsultantName As Global.System.Data.DataColumn
        
        Private columnRequestNumber As Global.System.Data.DataColumn
        
        Private columnClientSiteName As Global.System.Data.DataColumn
        
        Private columnTrackingTimeStamp As Global.System.Data.DataColumn
        
        Private columnTrackingInfo As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            Me.New(false)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal initExpressions As Boolean)
            MyBase.New
            Me.TableName = "Job"
            Me.BeginInit
            Me.InitClass
            If (initExpressions = true) Then
                Me.InitExpressions
            End If
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsultantJobIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsultantJobID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsultantUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsultantUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientSiteUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientSiteUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StartTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnStartTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FinishTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFinishTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobDetailsColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobDetails
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobNotesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobNotes
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EquipmentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEquipment
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobStatusIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnJobStatusID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ReturnDateColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnReturnDate
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SignatoryColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSignatory
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SignatureColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSignature
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmail
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EmailStatusColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEmailStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinutesTravelledColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinutesTravelled
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FlagColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFlag
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsultantNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnConsultantName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestNumberColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnRequestNumber
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientSiteNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnClientSiteName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrackingTimeStampColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrackingTimeStamp
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TrackingInfoColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTrackingInfo
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As JobRow
            Get
                Return CType(Me.Rows(index),JobRow)
            End Get
        End Property
        
        Public Event JobRowChanging As JobRowChangeEventHandler
        
        Public Event JobRowChanged As JobRowChangeEventHandler
        
        Public Event JobRowDeleting As JobRowChangeEventHandler
        
        Public Event JobRowDeleted As JobRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddJobRow(ByVal row As JobRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddJobRow( _
                    ByVal JobUID As System.Guid,  _
                    ByVal JobNumber As String,  _
                    ByVal parentConsultantRowByFK_Job_Consultant As ConsultantRow,  _
                    ByVal parentClientSiteRowByFK_Job_ClientSite As ClientSiteRow,  _
                    ByVal parentRequestRowByFK_Job_Request As RequestRow,  _
                    ByVal JobDate As Date,  _
                    ByVal StartTime As Date,  _
                    ByVal FinishTime As Date,  _
                    ByVal JobDetails As String,  _
                    ByVal JobNotes As String,  _
                    ByVal Equipment As String,  _
                    ByVal parentJobStatusRowByFK_JobStatus_Job As JobStatusRow,  _
                    ByVal ReturnDate As Date,  _
                    ByVal Signatory As String,  _
                    ByVal Signature As String,  _
                    ByVal Email As String,  _
                    ByVal EmailStatus As Byte,  _
                    ByVal MinutesTravelled As Integer,  _
                    ByVal CreatedDateTime As Date,  _
                    ByVal ModifiedDateTime As Date,  _
                    ByVal Flag As Integer,  _
                    ByVal ConsultantName As String,  _
                    ByVal RequestNumber As String,  _
                    ByVal ClientSiteName As String,  _
                    ByVal TrackingTimeStamp As Date,  _
                    ByVal TrackingInfo As String) As JobRow
            Dim rowJobRow As JobRow = CType(Me.NewRow,JobRow)
            Dim columnValuesArray() As Object = New Object() {JobUID, Nothing, JobNumber, Nothing, Nothing, Nothing, Nothing, JobDate, StartTime, FinishTime, JobDetails, JobNotes, Equipment, Nothing, ReturnDate, Signatory, Signature, Email, EmailStatus, MinutesTravelled, CreatedDateTime, ModifiedDateTime, Flag, ConsultantName, RequestNumber, ClientSiteName, TrackingTimeStamp, TrackingInfo}
            If (Not (parentConsultantRowByFK_Job_Consultant) Is Nothing) Then
                columnValuesArray(4) = parentConsultantRowByFK_Job_Consultant(5)
            End If
            If (Not (parentClientSiteRowByFK_Job_ClientSite) Is Nothing) Then
                columnValuesArray(5) = parentClientSiteRowByFK_Job_ClientSite(0)
            End If
            If (Not (parentRequestRowByFK_Job_Request) Is Nothing) Then
                columnValuesArray(6) = parentRequestRowByFK_Job_Request(0)
            End If
            If (Not (parentJobStatusRowByFK_JobStatus_Job) Is Nothing) Then
                columnValuesArray(13) = parentJobStatusRowByFK_JobStatus_Job(0)
            End If
            rowJobRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowJobRow)
            Return rowJobRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddJobRow( _
                    ByVal JobUID As System.Guid,  _
                    ByVal JobNumber As String,  _
                    ByVal parentConsultantRowByFK_Job_Consultant As ConsultantRow,  _
                    ByVal parentClientSiteRowByFK_Job_ClientSite As ClientSiteRow,  _
                    ByVal parentRequestRowByFK_Job_Request As RequestRow,  _
                    ByVal JobDate As Date,  _
                    ByVal StartTime As Date,  _
                    ByVal FinishTime As Date,  _
                    ByVal JobDetails As String,  _
                    ByVal JobNotes As String,  _
                    ByVal Equipment As String,  _
                    ByVal parentJobStatusRowByFK_JobStatus_Job As JobStatusRow,  _
                    ByVal ReturnDate As Date,  _
                    ByVal Signatory As String,  _
                    ByVal Signature As String,  _
                    ByVal Email As String,  _
                    ByVal EmailStatus As Byte,  _
                    ByVal MinutesTravelled As Integer,  _
                    ByVal CreatedDateTime As Date,  _
                    ByVal ModifiedDateTime As Date,  _
                    ByVal Flag As Integer,  _
                    ByVal TrackingTimeStamp As Date,  _
                    ByVal TrackingInfo As String) As JobRow
            Dim rowJobRow As JobRow = CType(Me.NewRow,JobRow)
            Dim columnValuesArray() As Object = New Object() {JobUID, Nothing, JobNumber, Nothing, Nothing, Nothing, Nothing, JobDate, StartTime, FinishTime, JobDetails, JobNotes, Equipment, Nothing, ReturnDate, Signatory, Signature, Email, EmailStatus, MinutesTravelled, CreatedDateTime, ModifiedDateTime, Flag, Nothing, Nothing, Nothing, TrackingTimeStamp, TrackingInfo}
            If (Not (parentConsultantRowByFK_Job_Consultant) Is Nothing) Then
                columnValuesArray(4) = parentConsultantRowByFK_Job_Consultant(5)
            End If
            If (Not (parentClientSiteRowByFK_Job_ClientSite) Is Nothing) Then
                columnValuesArray(5) = parentClientSiteRowByFK_Job_ClientSite(0)
            End If
            If (Not (parentRequestRowByFK_Job_Request) Is Nothing) Then
                columnValuesArray(6) = parentRequestRowByFK_Job_Request(0)
            End If
            If (Not (parentJobStatusRowByFK_JobStatus_Job) Is Nothing) Then
                columnValuesArray(13) = parentJobStatusRowByFK_JobStatus_Job(0)
            End If
            rowJobRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowJobRow)
            Return rowJobRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByJobUID(ByVal JobUID As System.Guid) As JobRow
            Return CType(Me.Rows.Find(New Object() {JobUID}),JobRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As JobDataTable = CType(MyBase.Clone,JobDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New JobDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnJobUID = MyBase.Columns("JobUID")
            Me.columnJobID = MyBase.Columns("JobID")
            Me.columnJobNumber = MyBase.Columns("JobNumber")
            Me.columnConsultantJobID = MyBase.Columns("ConsultantJobID")
            Me.columnConsultantUID = MyBase.Columns("ConsultantUID")
            Me.columnClientSiteUID = MyBase.Columns("ClientSiteUID")
            Me.columnRequestUID = MyBase.Columns("RequestUID")
            Me.columnJobDate = MyBase.Columns("JobDate")
            Me.columnStartTime = MyBase.Columns("StartTime")
            Me.columnFinishTime = MyBase.Columns("FinishTime")
            Me.columnJobDetails = MyBase.Columns("JobDetails")
            Me.columnJobNotes = MyBase.Columns("JobNotes")
            Me.columnEquipment = MyBase.Columns("Equipment")
            Me.columnJobStatusID = MyBase.Columns("JobStatusID")
            Me.columnReturnDate = MyBase.Columns("ReturnDate")
            Me.columnSignatory = MyBase.Columns("Signatory")
            Me.columnSignature = MyBase.Columns("Signature")
            Me.columnEmail = MyBase.Columns("Email")
            Me.columnEmailStatus = MyBase.Columns("EmailStatus")
            Me.columnMinutesTravelled = MyBase.Columns("MinutesTravelled")
            Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
            Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
            Me.columnFlag = MyBase.Columns("Flag")
            Me.columnConsultantName = MyBase.Columns("ConsultantName")
            Me.columnRequestNumber = MyBase.Columns("RequestNumber")
            Me.columnClientSiteName = MyBase.Columns("ClientSiteName")
            Me.columnTrackingTimeStamp = MyBase.Columns("TrackingTimeStamp")
            Me.columnTrackingInfo = MyBase.Columns("TrackingInfo")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnJobUID = New Global.System.Data.DataColumn("JobUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobUID)
            Me.columnJobID = New Global.System.Data.DataColumn("JobID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobID)
            Me.columnJobNumber = New Global.System.Data.DataColumn("JobNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobNumber)
            Me.columnConsultantJobID = New Global.System.Data.DataColumn("ConsultantJobID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsultantJobID)
            Me.columnConsultantUID = New Global.System.Data.DataColumn("ConsultantUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsultantUID)
            Me.columnClientSiteUID = New Global.System.Data.DataColumn("ClientSiteUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientSiteUID)
            Me.columnRequestUID = New Global.System.Data.DataColumn("RequestUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestUID)
            Me.columnJobDate = New Global.System.Data.DataColumn("JobDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobDate)
            Me.columnStartTime = New Global.System.Data.DataColumn("StartTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnStartTime)
            Me.columnFinishTime = New Global.System.Data.DataColumn("FinishTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFinishTime)
            Me.columnJobDetails = New Global.System.Data.DataColumn("JobDetails", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobDetails)
            Me.columnJobNotes = New Global.System.Data.DataColumn("JobNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobNotes)
            Me.columnEquipment = New Global.System.Data.DataColumn("Equipment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEquipment)
            Me.columnJobStatusID = New Global.System.Data.DataColumn("JobStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnJobStatusID)
            Me.columnReturnDate = New Global.System.Data.DataColumn("ReturnDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnReturnDate)
            Me.columnSignatory = New Global.System.Data.DataColumn("Signatory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSignatory)
            Me.columnSignature = New Global.System.Data.DataColumn("Signature", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSignature)
            Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmail)
            Me.columnEmailStatus = New Global.System.Data.DataColumn("EmailStatus", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEmailStatus)
            Me.columnMinutesTravelled = New Global.System.Data.DataColumn("MinutesTravelled", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinutesTravelled)
            Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedDateTime)
            Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDateTime)
            Me.columnFlag = New Global.System.Data.DataColumn("Flag", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFlag)
            Me.columnConsultantName = New Global.System.Data.DataColumn("ConsultantName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnConsultantName)
            Me.columnRequestNumber = New Global.System.Data.DataColumn("RequestNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnRequestNumber)
            Me.columnClientSiteName = New Global.System.Data.DataColumn("ClientSiteName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnClientSiteName)
            Me.columnTrackingTimeStamp = New Global.System.Data.DataColumn("TrackingTimeStamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrackingTimeStamp)
            Me.columnTrackingInfo = New Global.System.Data.DataColumn("TrackingInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTrackingInfo)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_Job", New Global.System.Data.DataColumn() {Me.columnJobUID}, true))
            Me.columnJobUID.AllowDBNull = false
            Me.columnJobUID.Unique = true
            Me.columnJobID.AutoIncrement = true
            Me.columnJobID.AutoIncrementSeed = -1
            Me.columnJobID.AutoIncrementStep = -1
            Me.columnJobNumber.MaxLength = 100
            Me.columnConsultantJobID.AutoIncrement = true
            Me.columnConsultantJobID.AutoIncrementSeed = -1
            Me.columnConsultantJobID.AutoIncrementStep = -1
            Me.columnJobDate.DateTimeMode = Global.System.Data.DataSetDateTime.Local
            Me.columnStartTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnFinishTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnJobDetails.MaxLength = 3500
            Me.columnJobNotes.MaxLength = 1073741823
            Me.columnEquipment.MaxLength = 1073741823
            Me.columnJobStatusID.DefaultValue = CType(0,Integer)
            Me.columnReturnDate.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnSignatory.MaxLength = 50
            Me.columnSignature.MaxLength = 2147483647
            Me.columnEmail.MaxLength = 100
            Me.columnEmailStatus.DefaultValue = CType(0,Byte)
            Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnConsultantName.ReadOnly = true
            Me.columnRequestNumber.ReadOnly = true
            Me.columnClientSiteName.ReadOnly = true
            Me.columnTrackingTimeStamp.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnTrackingInfo.DefaultValue = CType("",String)
            Me.columnTrackingInfo.MaxLength = 128
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewJobRow() As JobRow
            Return CType(Me.NewRow,JobRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New JobRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(JobRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.ConsultantNameColumn.Expression = "Parent(FK_Job_Consultant).Name"
            Me.RequestNumberColumn.Expression = "Parent(FK_Job_Request).RequestNumber"
            Me.ClientSiteNameColumn.Expression = "Parent(FK_Job_ClientSite).SiteName"
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.JobRowChangedEvent) Is Nothing) Then
                RaiseEvent JobRowChanged(Me, New JobRowChangeEvent(CType(e.Row,JobRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.JobRowChangingEvent) Is Nothing) Then
                RaiseEvent JobRowChanging(Me, New JobRowChangeEvent(CType(e.Row,JobRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.JobRowDeletedEvent) Is Nothing) Then
                RaiseEvent JobRowDeleted(Me, New JobRowChangeEvent(CType(e.Row,JobRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.JobRowDeletingEvent) Is Nothing) Then
                RaiseEvent JobRowDeleting(Me, New JobRowChangeEvent(CType(e.Row,JobRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveJobRow(ByVal row As JobRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ClientDataSet = New ClientDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "JobDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CustomFormDataTable
        Inherits Global.System.Data.TypedTableBase(Of CustomFormRow)
        
        Private columnCustomFormUID As Global.System.Data.DataColumn
        
        Private columnFormType As Global.System.Data.DataColumn
        
        Private columnTableName As Global.System.Data.DataColumn
        
        Private columnPrimaryKeyColumnName As Global.System.Data.DataColumn
        
        Private columnForeignKeyColumnName As Global.System.Data.DataColumn
        
        Private columnCustomFormName As Global.System.Data.DataColumn
        
        Private columnParentFilter As Global.System.Data.DataColumn
        
        Private columnPriority As Global.System.Data.DataColumn
        
        Private columnParentTableName As Global.System.Data.DataColumn
        
        Private columnParentPrimaryKeyColumnName As Global.System.Data.DataColumn
        
        Private columnOneToMany As Global.System.Data.DataColumn
        
        Private columnCreatedDateTime As Global.System.Data.DataColumn
        
        Private columnModifiedDateTime As Global.System.Data.DataColumn
        
        Private columnLockWithParent As Global.System.Data.DataColumn
        
        Private columnIsReadOnly As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CustomForm"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomFormUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomFormUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFormType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property TableNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnTableName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrimaryKeyColumnNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrimaryKeyColumnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ForeignKeyColumnNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnForeignKeyColumnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomFormNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomFormName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParentFilterColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParentFilter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PriorityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPriority
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParentTableNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParentTableName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ParentPrimaryKeyColumnNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnParentPrimaryKeyColumnName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property OneToManyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnOneToMany
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LockWithParentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLockWithParent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsReadOnlyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsReadOnly
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomFormRow
            Get
                Return CType(Me.Rows(index),CustomFormRow)
            End Get
        End Property
        
        Public Event CustomFormRowChanging As CustomFormRowChangeEventHandler
        
        Public Event CustomFormRowChanged As CustomFormRowChangeEventHandler
        
        Public Event CustomFormRowDeleting As CustomFormRowChangeEventHandler
        
        Public Event CustomFormRowDeleted As CustomFormRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCustomFormRow(ByVal row As CustomFormRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCustomFormRow(ByVal CustomFormUID As System.Guid, ByVal FormType As String, ByVal TableName As String, ByVal PrimaryKeyColumnName As String, ByVal ForeignKeyColumnName As String, ByVal CustomFormName As String, ByVal ParentFilter As String, ByVal Priority As Byte, ByVal ParentTableName As String, ByVal ParentPrimaryKeyColumnName As String, ByVal OneToMany As Byte, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date, ByVal LockWithParent As Boolean, ByVal IsReadOnly As Boolean) As CustomFormRow
            Dim rowCustomFormRow As CustomFormRow = CType(Me.NewRow,CustomFormRow)
            Dim columnValuesArray() As Object = New Object() {CustomFormUID, FormType, TableName, PrimaryKeyColumnName, ForeignKeyColumnName, CustomFormName, ParentFilter, Priority, ParentTableName, ParentPrimaryKeyColumnName, OneToMany, CreatedDateTime, ModifiedDateTime, LockWithParent, IsReadOnly}
            rowCustomFormRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCustomFormRow)
            Return rowCustomFormRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCustomFormUID(ByVal CustomFormUID As System.Guid) As CustomFormRow
            Return CType(Me.Rows.Find(New Object() {CustomFormUID}),CustomFormRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CustomFormDataTable = CType(MyBase.Clone,CustomFormDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CustomFormDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCustomFormUID = MyBase.Columns("CustomFormUID")
            Me.columnFormType = MyBase.Columns("FormType")
            Me.columnTableName = MyBase.Columns("TableName")
            Me.columnPrimaryKeyColumnName = MyBase.Columns("PrimaryKeyColumnName")
            Me.columnForeignKeyColumnName = MyBase.Columns("ForeignKeyColumnName")
            Me.columnCustomFormName = MyBase.Columns("CustomFormName")
            Me.columnParentFilter = MyBase.Columns("ParentFilter")
            Me.columnPriority = MyBase.Columns("Priority")
            Me.columnParentTableName = MyBase.Columns("ParentTableName")
            Me.columnParentPrimaryKeyColumnName = MyBase.Columns("ParentPrimaryKeyColumnName")
            Me.columnOneToMany = MyBase.Columns("OneToMany")
            Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
            Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
            Me.columnLockWithParent = MyBase.Columns("LockWithParent")
            Me.columnIsReadOnly = MyBase.Columns("IsReadOnly")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCustomFormUID = New Global.System.Data.DataColumn("CustomFormUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomFormUID)
            Me.columnFormType = New Global.System.Data.DataColumn("FormType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFormType)
            Me.columnTableName = New Global.System.Data.DataColumn("TableName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnTableName)
            Me.columnPrimaryKeyColumnName = New Global.System.Data.DataColumn("PrimaryKeyColumnName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrimaryKeyColumnName)
            Me.columnForeignKeyColumnName = New Global.System.Data.DataColumn("ForeignKeyColumnName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnForeignKeyColumnName)
            Me.columnCustomFormName = New Global.System.Data.DataColumn("CustomFormName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomFormName)
            Me.columnParentFilter = New Global.System.Data.DataColumn("ParentFilter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParentFilter)
            Me.columnPriority = New Global.System.Data.DataColumn("Priority", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPriority)
            Me.columnParentTableName = New Global.System.Data.DataColumn("ParentTableName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParentTableName)
            Me.columnParentPrimaryKeyColumnName = New Global.System.Data.DataColumn("ParentPrimaryKeyColumnName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnParentPrimaryKeyColumnName)
            Me.columnOneToMany = New Global.System.Data.DataColumn("OneToMany", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnOneToMany)
            Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedDateTime)
            Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDateTime)
            Me.columnLockWithParent = New Global.System.Data.DataColumn("LockWithParent", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLockWithParent)
            Me.columnIsReadOnly = New Global.System.Data.DataColumn("IsReadOnly", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsReadOnly)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("UC_CustomForm_Name", New Global.System.Data.DataColumn() {Me.columnFormType, Me.columnCustomFormName}, false))
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_CustomForm", New Global.System.Data.DataColumn() {Me.columnCustomFormUID}, true))
            Me.columnCustomFormUID.AllowDBNull = false
            Me.columnCustomFormUID.Unique = true
            Me.columnFormType.AllowDBNull = false
            Me.columnFormType.MaxLength = 1
            Me.columnTableName.AllowDBNull = false
            Me.columnTableName.MaxLength = 128
            Me.columnPrimaryKeyColumnName.AllowDBNull = false
            Me.columnPrimaryKeyColumnName.MaxLength = 128
            Me.columnForeignKeyColumnName.AllowDBNull = false
            Me.columnForeignKeyColumnName.MaxLength = 128
            Me.columnCustomFormName.AllowDBNull = false
            Me.columnCustomFormName.MaxLength = 255
            Me.columnParentFilter.MaxLength = 1000
            Me.columnPriority.AllowDBNull = false
            Me.columnParentTableName.AllowDBNull = false
            Me.columnParentTableName.MaxLength = 128
            Me.columnParentPrimaryKeyColumnName.AllowDBNull = false
            Me.columnParentPrimaryKeyColumnName.MaxLength = 128
            Me.columnOneToMany.AllowDBNull = false
            Me.columnCreatedDateTime.AllowDBNull = false
            Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnModifiedDateTime.AllowDBNull = false
            Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnLockWithParent.AllowDBNull = false
            Me.columnIsReadOnly.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCustomFormRow() As CustomFormRow
            Return CType(Me.NewRow,CustomFormRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CustomFormRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CustomFormRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomFormRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomFormRowChanged(Me, New CustomFormRowChangeEvent(CType(e.Row,CustomFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomFormRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomFormRowChanging(Me, New CustomFormRowChangeEvent(CType(e.Row,CustomFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomFormRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomFormRowDeleted(Me, New CustomFormRowChangeEvent(CType(e.Row,CustomFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomFormRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomFormRowDeleting(Me, New CustomFormRowChangeEvent(CType(e.Row,CustomFormRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCustomFormRow(ByVal row As CustomFormRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ClientDataSet = New ClientDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CustomFormDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CustomControlDataTable
        Inherits Global.System.Data.TypedTableBase(Of CustomControlRow)
        
        Private columnCustomControlUID As Global.System.Data.DataColumn
        
        Private columnCustomFormUID As Global.System.Data.DataColumn
        
        Private columnFieldName As Global.System.Data.DataColumn
        
        Private columnCustomControlTypeID As Global.System.Data.DataColumn
        
        Private columnLabel As Global.System.Data.DataColumn
        
        Private columnSequence As Global.System.Data.DataColumn
        
        Private columnSortPriority As Global.System.Data.DataColumn
        
        Private columnLines As Global.System.Data.DataColumn
        
        Private columnMinimumValue As Global.System.Data.DataColumn
        
        Private columnMaximumValue As Global.System.Data.DataColumn
        
        Private columnDecimalPlaces As Global.System.Data.DataColumn
        
        Private columnIsReadOnly As Global.System.Data.DataColumn
        
        Private columnPosition As Global.System.Data.DataColumn
        
        Private columnWidthPercent As Global.System.Data.DataColumn
        
        Private columnLabelPosition As Global.System.Data.DataColumn
        
        Private columnListDataSource As Global.System.Data.DataColumn
        
        Private columnListValueColumn As Global.System.Data.DataColumn
        
        Private columnListDisplayColumn As Global.System.Data.DataColumn
        
        Private columnListData As Global.System.Data.DataColumn
        
        Private columnCreatedDateTime As Global.System.Data.DataColumn
        
        Private columnModifiedDateTime As Global.System.Data.DataColumn
        
        Private columnLockWithParent As Global.System.Data.DataColumn
        
        Private columnLabelWidthPercent As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CustomControl"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomControlUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomControlUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomFormUIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomFormUID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FieldNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnFieldName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CustomControlTypeIDColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCustomControlTypeID
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabelColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabel
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SequenceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSequence
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SortPriorityColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSortPriority
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LinesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLines
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MinimumValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMinimumValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaximumValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaximumValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DecimalPlacesColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnDecimalPlaces
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property IsReadOnlyColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnIsReadOnly
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property WidthPercentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnWidthPercent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabelPositionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabelPosition
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListDataSourceColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListDataSource
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListValueColumnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListValueColumn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListDisplayColumnColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListDisplayColumn
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ListDataColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnListData
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnCreatedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnModifiedDateTime
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LockWithParentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLockWithParent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property LabelWidthPercentColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnLabelWidthPercent
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CustomControlRow
            Get
                Return CType(Me.Rows(index),CustomControlRow)
            End Get
        End Property
        
        Public Event CustomControlRowChanging As CustomControlRowChangeEventHandler
        
        Public Event CustomControlRowChanged As CustomControlRowChangeEventHandler
        
        Public Event CustomControlRowDeleting As CustomControlRowChangeEventHandler
        
        Public Event CustomControlRowDeleted As CustomControlRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCustomControlRow(ByVal row As CustomControlRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCustomControlRow( _
                    ByVal CustomControlUID As System.Guid,  _
                    ByVal parentCustomFormRowByFK_CustomControl_CustomForm As CustomFormRow,  _
                    ByVal FieldName As String,  _
                    ByVal CustomControlTypeID As Byte,  _
                    ByVal Label As String,  _
                    ByVal Sequence As Byte,  _
                    ByVal SortPriority As Byte,  _
                    ByVal Lines As Byte,  _
                    ByVal MinimumValue As Integer,  _
                    ByVal MaximumValue As Integer,  _
                    ByVal DecimalPlaces As Byte,  _
                    ByVal IsReadOnly As Boolean,  _
                    ByVal Position As String,  _
                    ByVal WidthPercent As Byte,  _
                    ByVal LabelPosition As String,  _
                    ByVal ListDataSource As String,  _
                    ByVal ListValueColumn As String,  _
                    ByVal ListDisplayColumn As String,  _
                    ByVal ListData As String,  _
                    ByVal CreatedDateTime As Date,  _
                    ByVal ModifiedDateTime As Date,  _
                    ByVal LockWithParent As Boolean,  _
                    ByVal LabelWidthPercent As Byte) As CustomControlRow
            Dim rowCustomControlRow As CustomControlRow = CType(Me.NewRow,CustomControlRow)
            Dim columnValuesArray() As Object = New Object() {CustomControlUID, Nothing, FieldName, CustomControlTypeID, Label, Sequence, SortPriority, Lines, MinimumValue, MaximumValue, DecimalPlaces, IsReadOnly, Position, WidthPercent, LabelPosition, ListDataSource, ListValueColumn, ListDisplayColumn, ListData, CreatedDateTime, ModifiedDateTime, LockWithParent, LabelWidthPercent}
            If (Not (parentCustomFormRowByFK_CustomControl_CustomForm) Is Nothing) Then
                columnValuesArray(1) = parentCustomFormRowByFK_CustomControl_CustomForm(0)
            End If
            rowCustomControlRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCustomControlRow)
            Return rowCustomControlRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindByCustomControlUID(ByVal CustomControlUID As System.Guid) As CustomControlRow
            Return CType(Me.Rows.Find(New Object() {CustomControlUID}),CustomControlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CustomControlDataTable = CType(MyBase.Clone,CustomControlDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CustomControlDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnCustomControlUID = MyBase.Columns("CustomControlUID")
            Me.columnCustomFormUID = MyBase.Columns("CustomFormUID")
            Me.columnFieldName = MyBase.Columns("FieldName")
            Me.columnCustomControlTypeID = MyBase.Columns("CustomControlTypeID")
            Me.columnLabel = MyBase.Columns("Label")
            Me.columnSequence = MyBase.Columns("Sequence")
            Me.columnSortPriority = MyBase.Columns("SortPriority")
            Me.columnLines = MyBase.Columns("Lines")
            Me.columnMinimumValue = MyBase.Columns("MinimumValue")
            Me.columnMaximumValue = MyBase.Columns("MaximumValue")
            Me.columnDecimalPlaces = MyBase.Columns("DecimalPlaces")
            Me.columnIsReadOnly = MyBase.Columns("IsReadOnly")
            Me.columnPosition = MyBase.Columns("Position")
            Me.columnWidthPercent = MyBase.Columns("WidthPercent")
            Me.columnLabelPosition = MyBase.Columns("LabelPosition")
            Me.columnListDataSource = MyBase.Columns("ListDataSource")
            Me.columnListValueColumn = MyBase.Columns("ListValueColumn")
            Me.columnListDisplayColumn = MyBase.Columns("ListDisplayColumn")
            Me.columnListData = MyBase.Columns("ListData")
            Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
            Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
            Me.columnLockWithParent = MyBase.Columns("LockWithParent")
            Me.columnLabelWidthPercent = MyBase.Columns("LabelWidthPercent")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnCustomControlUID = New Global.System.Data.DataColumn("CustomControlUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomControlUID)
            Me.columnCustomFormUID = New Global.System.Data.DataColumn("CustomFormUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomFormUID)
            Me.columnFieldName = New Global.System.Data.DataColumn("FieldName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnFieldName)
            Me.columnCustomControlTypeID = New Global.System.Data.DataColumn("CustomControlTypeID", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCustomControlTypeID)
            Me.columnLabel = New Global.System.Data.DataColumn("Label", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabel)
            Me.columnSequence = New Global.System.Data.DataColumn("Sequence", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSequence)
            Me.columnSortPriority = New Global.System.Data.DataColumn("SortPriority", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSortPriority)
            Me.columnLines = New Global.System.Data.DataColumn("Lines", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLines)
            Me.columnMinimumValue = New Global.System.Data.DataColumn("MinimumValue", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMinimumValue)
            Me.columnMaximumValue = New Global.System.Data.DataColumn("MaximumValue", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaximumValue)
            Me.columnDecimalPlaces = New Global.System.Data.DataColumn("DecimalPlaces", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnDecimalPlaces)
            Me.columnIsReadOnly = New Global.System.Data.DataColumn("IsReadOnly", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnIsReadOnly)
            Me.columnPosition = New Global.System.Data.DataColumn("Position", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPosition)
            Me.columnWidthPercent = New Global.System.Data.DataColumn("WidthPercent", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnWidthPercent)
            Me.columnLabelPosition = New Global.System.Data.DataColumn("LabelPosition", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabelPosition)
            Me.columnListDataSource = New Global.System.Data.DataColumn("ListDataSource", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListDataSource)
            Me.columnListValueColumn = New Global.System.Data.DataColumn("ListValueColumn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListValueColumn)
            Me.columnListDisplayColumn = New Global.System.Data.DataColumn("ListDisplayColumn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListDisplayColumn)
            Me.columnListData = New Global.System.Data.DataColumn("ListData", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnListData)
            Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnCreatedDateTime)
            Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnModifiedDateTime)
            Me.columnLockWithParent = New Global.System.Data.DataColumn("LockWithParent", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLockWithParent)
            Me.columnLabelWidthPercent = New Global.System.Data.DataColumn("LabelWidthPercent", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnLabelWidthPercent)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_CustomControl", New Global.System.Data.DataColumn() {Me.columnCustomControlUID}, true))
            Me.columnCustomControlUID.AllowDBNull = false
            Me.columnCustomControlUID.Unique = true
            Me.columnCustomFormUID.AllowDBNull = false
            Me.columnFieldName.AllowDBNull = false
            Me.columnFieldName.MaxLength = 128
            Me.columnCustomControlTypeID.AllowDBNull = false
            Me.columnLabel.MaxLength = 255
            Me.columnSequence.AllowDBNull = false
            Me.columnSortPriority.AllowDBNull = false
            Me.columnLines.AllowDBNull = false
            Me.columnMinimumValue.AllowDBNull = false
            Me.columnMaximumValue.AllowDBNull = false
            Me.columnDecimalPlaces.AllowDBNull = false
            Me.columnIsReadOnly.AllowDBNull = false
            Me.columnPosition.AllowDBNull = false
            Me.columnPosition.MaxLength = 1
            Me.columnWidthPercent.AllowDBNull = false
            Me.columnLabelPosition.AllowDBNull = false
            Me.columnLabelPosition.MaxLength = 1
            Me.columnListDataSource.MaxLength = 128
            Me.columnListValueColumn.MaxLength = 128
            Me.columnListDisplayColumn.MaxLength = 128
            Me.columnListData.MaxLength = 1073741823
            Me.columnCreatedDateTime.AllowDBNull = false
            Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnModifiedDateTime.AllowDBNull = false
            Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            Me.columnLockWithParent.AllowDBNull = false
            Me.columnLabelWidthPercent.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCustomControlRow() As CustomControlRow
            Return CType(Me.NewRow,CustomControlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CustomControlRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CustomControlRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CustomControlRowChangedEvent) Is Nothing) Then
                RaiseEvent CustomControlRowChanged(Me, New CustomControlRowChangeEvent(CType(e.Row,CustomControlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CustomControlRowChangingEvent) Is Nothing) Then
                RaiseEvent CustomControlRowChanging(Me, New CustomControlRowChangeEvent(CType(e.Row,CustomControlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CustomControlRowDeletedEvent) Is Nothing) Then
                RaiseEvent CustomControlRowDeleted(Me, New CustomControlRowChangeEvent(CType(e.Row,CustomControlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CustomControlRowDeletingEvent) Is Nothing) Then
                RaiseEvent CustomControlRowDeleting(Me, New CustomControlRowChangeEvent(CType(e.Row,CustomControlRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCustomControlRow(ByVal row As CustomControlRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As ClientDataSet = New ClientDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CustomControlDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ConsultantRow
        Inherits Global.System.Data.DataRow
        
        Private tableConsultant As ConsultantDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableConsultant = CType(Me.Table,ConsultantDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsultantNumber() As String
            Get
                If Me.IsConsultantNumberNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableConsultant.ConsultantNumberColumn),String)
                End If
            End Get
            Set
                Me(Me.tableConsultant.ConsultantNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Name() As String
            Get
                Return CType(Me(Me.tableConsultant.NameColumn),String)
            End Get
            Set
                Me(Me.tableConsultant.NameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Username() As String
            Get
                Try 
                    Return CType(Me(Me.tableConsultant.UsernameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Username' in table 'Consultant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultant.UsernameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailAddress() As String
            Get
                If Me.IsEmailAddressNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableConsultant.EmailAddressColumn),String)
                End If
            End Get
            Set
                Me(Me.tableConsultant.EmailAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MobilePhone() As String
            Get
                If Me.IsMobilePhoneNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableConsultant.MobilePhoneColumn),String)
                End If
            End Get
            Set
                Me(Me.tableConsultant.MobilePhoneColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsultantUID() As System.Guid
            Get
                Return CType(Me(Me.tableConsultant.ConsultantUIDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tableConsultant.ConsultantUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsultantID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableConsultant.ConsultantIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantID' in table 'Consultant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultant.ConsultantIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedDateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableConsultant.CreatedDateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDateTime' in table 'Consultant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultant.CreatedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableConsultant.ModifiedDateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDateTime' in table 'Consultant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultant.ModifiedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinSyncTime() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableConsultant.MinSyncTimeColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MinSyncTime' in table 'Consultant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultant.MinSyncTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LastSyncTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableConsultant.LastSyncTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'LastSyncTime' in table 'Consultant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultant.LastSyncTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SyncTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableConsultant.SyncTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'SyncTime' in table 'Consultant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultant.SyncTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MobileAlert() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableConsultant.MobileAlertColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MobileAlert' in table 'Consultant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultant.MobileAlertColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsActiviserUser() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableConsultant.IsActiviserUserColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'IsActiviserUser' in table 'Consultant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultant.IsActiviserUserColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Management() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableConsultant.ManagementColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Management' in table 'Consultant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultant.ManagementColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Administration() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableConsultant.AdministrationColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Administration' in table 'Consultant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultant.AdministrationColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DomainLogon() As String
            Get
                Try 
                    Return CType(Me(Me.tableConsultant.DomainLogonColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DomainLogon' in table 'Consultant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultant.DomainLogonColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrackingTimestamp() As Date
            Get
                Try 
                    Return CType(Me(Me.tableConsultant.TrackingTimestampColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrackingTimestamp' in table 'Consultant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultant.TrackingTimestampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrackingInfo() As String
            Get
                Try 
                    Return CType(Me(Me.tableConsultant.TrackingInfoColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrackingInfo' in table 'Consultant' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableConsultant.TrackingInfoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsultantNumberNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.ConsultantNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsultantNumberNull()
            Me(Me.tableConsultant.ConsultantNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsUsernameNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.UsernameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetUsernameNull()
            Me(Me.tableConsultant.UsernameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailAddressNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.EmailAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailAddressNull()
            Me(Me.tableConsultant.EmailAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMobilePhoneNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.MobilePhoneColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMobilePhoneNull()
            Me(Me.tableConsultant.MobilePhoneColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsultantIDNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.ConsultantIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsultantIDNull()
            Me(Me.tableConsultant.ConsultantIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.CreatedDateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedDateTimeNull()
            Me(Me.tableConsultant.CreatedDateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.ModifiedDateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedDateTimeNull()
            Me(Me.tableConsultant.ModifiedDateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMinSyncTimeNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.MinSyncTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMinSyncTimeNull()
            Me(Me.tableConsultant.MinSyncTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLastSyncTimeNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.LastSyncTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLastSyncTimeNull()
            Me(Me.tableConsultant.LastSyncTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSyncTimeNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.SyncTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSyncTimeNull()
            Me(Me.tableConsultant.SyncTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMobileAlertNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.MobileAlertColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMobileAlertNull()
            Me(Me.tableConsultant.MobileAlertColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsIsActiviserUserNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.IsActiviserUserColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetIsActiviserUserNull()
            Me(Me.tableConsultant.IsActiviserUserColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsManagementNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.ManagementColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetManagementNull()
            Me(Me.tableConsultant.ManagementColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAdministrationNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.AdministrationColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAdministrationNull()
            Me(Me.tableConsultant.AdministrationColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDomainLogonNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.DomainLogonColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDomainLogonNull()
            Me(Me.tableConsultant.DomainLogonColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrackingTimestampNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.TrackingTimestampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrackingTimestampNull()
            Me(Me.tableConsultant.TrackingTimestampColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrackingInfoNull() As Boolean
            Return Me.IsNull(Me.tableConsultant.TrackingInfoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrackingInfoNull()
            Me(Me.tableConsultant.TrackingInfoColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetJobRows() As JobRow()
            If (Me.Table.ChildRelations("FK_Job_Consultant") Is Nothing) Then
                Return New JobRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Job_Consultant")),JobRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRequestRows() As RequestRow()
            If (Me.Table.ChildRelations("FK_Request_Consultant") Is Nothing) Then
                Return New RequestRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Request_Consultant")),RequestRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ClientSiteStatusRow
        Inherits Global.System.Data.DataRow
        
        Private tableClientSiteStatus As ClientSiteStatusDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientSiteStatus = CType(Me.Table,ClientSiteStatusDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientSiteStatusID() As Integer
            Get
                Return CType(Me(Me.tableClientSiteStatus.ClientSiteStatusIDColumn),Integer)
            End Get
            Set
                Me(Me.tableClientSiteStatus.ClientSiteStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tableClientSiteStatus.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableClientSiteStatus.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsActive() As Boolean
            Get
                Return CType(Me(Me.tableClientSiteStatus.IsActiveColumn),Boolean)
            End Get
            Set
                Me(Me.tableClientSiteStatus.IsActiveColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedDateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableClientSiteStatus.CreatedDateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDateTime' in table 'ClientSiteStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientSiteStatus.CreatedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableClientSiteStatus.ModifiedDateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDateTime' in table 'ClientSiteStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientSiteStatus.ModifiedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableClientSiteStatus.CreatedDateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedDateTimeNull()
            Me(Me.tableClientSiteStatus.CreatedDateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableClientSiteStatus.ModifiedDateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedDateTimeNull()
            Me(Me.tableClientSiteStatus.ModifiedDateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetClientSiteRows() As ClientSiteRow()
            If (Me.Table.ChildRelations("FK_ClientSite_ClientSiteStatus") Is Nothing) Then
                Return New ClientSiteRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ClientSite_ClientSiteStatus")),ClientSiteRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class ClientSiteRow
        Inherits Global.System.Data.DataRow
        
        Private tableClientSite As ClientSiteDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableClientSite = CType(Me.Table,ClientSiteDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientSiteUID() As System.Guid
            Get
                Return CType(Me(Me.tableClientSite.ClientSiteUIDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tableClientSite.ClientSiteUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientSiteID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableClientSite.ClientSiteIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientSiteID' in table 'ClientSite' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientSite.ClientSiteIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientSiteNumber() As String
            Get
                If Me.IsClientSiteNumberNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableClientSite.ClientSiteNumberColumn),String)
                End If
            End Get
            Set
                Me(Me.tableClientSite.ClientSiteNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SiteName() As String
            Get
                If Me.IsSiteNameNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableClientSite.SiteNameColumn),String)
                End If
            End Get
            Set
                Me(Me.tableClientSite.SiteNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SiteAddress() As String
            Get
                If Me.IsSiteAddressNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableClientSite.SiteAddressColumn),String)
                End If
            End Get
            Set
                Me(Me.tableClientSite.SiteAddressColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SiteContactEmail() As String
            Get
                If Me.IsSiteContactEmailNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableClientSite.SiteContactEmailColumn),String)
                End If
            End Get
            Set
                Me(Me.tableClientSite.SiteContactEmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SiteNotes() As String
            Get
                If Me.IsSiteNotesNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableClientSite.SiteNotesColumn),String)
                End If
            End Get
            Set
                Me(Me.tableClientSite.SiteNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contact() As String
            Get
                If Me.IsContactNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableClientSite.ContactColumn),String)
                End If
            End Get
            Set
                Me(Me.tableClientSite.ContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactPhone1() As String
            Get
                If Me.IsContactPhone1Null Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableClientSite.ContactPhone1Column),String)
                End If
            End Get
            Set
                Me(Me.tableClientSite.ContactPhone1Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ContactPhone2() As String
            Get
                If Me.IsContactPhone2Null Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableClientSite.ContactPhone2Column),String)
                End If
            End Get
            Set
                Me(Me.tableClientSite.ContactPhone2Column) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Hold() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableClientSite.HoldColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Hold' in table 'ClientSite' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientSite.HoldColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientSiteStatusID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableClientSite.ClientSiteStatusIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientSiteStatusID' in table 'ClientSite' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientSite.ClientSiteStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedDateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableClientSite.CreatedDateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDateTime' in table 'ClientSite' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientSite.CreatedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableClientSite.ModifiedDateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDateTime' in table 'ClientSite' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableClientSite.ModifiedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientSiteStatusRow() As ClientSiteStatusRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ClientSite_ClientSiteStatus")),ClientSiteStatusRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_ClientSite_ClientSiteStatus"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientSiteIDNull() As Boolean
            Return Me.IsNull(Me.tableClientSite.ClientSiteIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientSiteIDNull()
            Me(Me.tableClientSite.ClientSiteIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientSiteNumberNull() As Boolean
            Return Me.IsNull(Me.tableClientSite.ClientSiteNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientSiteNumberNull()
            Me(Me.tableClientSite.ClientSiteNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSiteNameNull() As Boolean
            Return Me.IsNull(Me.tableClientSite.SiteNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSiteNameNull()
            Me(Me.tableClientSite.SiteNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSiteAddressNull() As Boolean
            Return Me.IsNull(Me.tableClientSite.SiteAddressColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSiteAddressNull()
            Me(Me.tableClientSite.SiteAddressColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSiteContactEmailNull() As Boolean
            Return Me.IsNull(Me.tableClientSite.SiteContactEmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSiteContactEmailNull()
            Me(Me.tableClientSite.SiteContactEmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSiteNotesNull() As Boolean
            Return Me.IsNull(Me.tableClientSite.SiteNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSiteNotesNull()
            Me(Me.tableClientSite.SiteNotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactNull() As Boolean
            Return Me.IsNull(Me.tableClientSite.ContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactNull()
            Me(Me.tableClientSite.ContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactPhone1Null() As Boolean
            Return Me.IsNull(Me.tableClientSite.ContactPhone1Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactPhone1Null()
            Me(Me.tableClientSite.ContactPhone1Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactPhone2Null() As Boolean
            Return Me.IsNull(Me.tableClientSite.ContactPhone2Column)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactPhone2Null()
            Me(Me.tableClientSite.ContactPhone2Column) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsHoldNull() As Boolean
            Return Me.IsNull(Me.tableClientSite.HoldColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetHoldNull()
            Me(Me.tableClientSite.HoldColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientSiteStatusIDNull() As Boolean
            Return Me.IsNull(Me.tableClientSite.ClientSiteStatusIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientSiteStatusIDNull()
            Me(Me.tableClientSite.ClientSiteStatusIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableClientSite.CreatedDateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedDateTimeNull()
            Me(Me.tableClientSite.CreatedDateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableClientSite.ModifiedDateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedDateTimeNull()
            Me(Me.tableClientSite.ModifiedDateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetJobRows() As JobRow()
            If (Me.Table.ChildRelations("FK_Job_ClientSite") Is Nothing) Then
                Return New JobRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Job_ClientSite")),JobRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRequestRows() As RequestRow()
            If (Me.Table.ChildRelations("FK_Request_ClientSite") Is Nothing) Then
                Return New RequestRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Request_ClientSite")),RequestRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RequestStatusRow
        Inherits Global.System.Data.DataRow
        
        Private tableRequestStatus As RequestStatusDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRequestStatus = CType(Me.Table,RequestStatusDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestStatusID() As Integer
            Get
                Return CType(Me(Me.tableRequestStatus.RequestStatusIDColumn),Integer)
            End Get
            Set
                Me(Me.tableRequestStatus.RequestStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tableRequestStatus.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableRequestStatus.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DisplayOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRequestStatus.DisplayOrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'DisplayOrder' in table 'RequestStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequestStatus.DisplayOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsClientMenuItem() As Boolean
            Get
                Return CType(Me(Me.tableRequestStatus.IsClientMenuItemColumn),Boolean)
            End Get
            Set
                Me(Me.tableRequestStatus.IsClientMenuItemColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsReasonRequired() As Boolean
            Get
                Return CType(Me(Me.tableRequestStatus.IsReasonRequiredColumn),Boolean)
            End Get
            Set
                Me(Me.tableRequestStatus.IsReasonRequiredColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsNewStatus() As Boolean
            Get
                Return CType(Me(Me.tableRequestStatus.IsNewStatusColumn),Boolean)
            End Get
            Set
                Me(Me.tableRequestStatus.IsNewStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsInProgressStatus() As Boolean
            Get
                Return CType(Me(Me.tableRequestStatus.IsInProgressStatusColumn),Boolean)
            End Get
            Set
                Me(Me.tableRequestStatus.IsInProgressStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsCompleteStatus() As Boolean
            Get
                Return CType(Me(Me.tableRequestStatus.IsCompleteStatusColumn),Boolean)
            End Get
            Set
                Me(Me.tableRequestStatus.IsCompleteStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsCancelledStatus() As Boolean
            Get
                Return CType(Me(Me.tableRequestStatus.IsCancelledStatusColumn),Boolean)
            End Get
            Set
                Me(Me.tableRequestStatus.IsCancelledStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedDateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRequestStatus.CreatedDateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDateTime' in table 'RequestStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequestStatus.CreatedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRequestStatus.ModifiedDateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDateTime' in table 'RequestStatus' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequestStatus.ModifiedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Colour() As Integer
            Get
                Return CType(Me(Me.tableRequestStatus.ColourColumn),Integer)
            End Get
            Set
                Me(Me.tableRequestStatus.ColourColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackColour() As Integer
            Get
                Return CType(Me(Me.tableRequestStatus.BackColourColumn),Integer)
            End Get
            Set
                Me(Me.tableRequestStatus.BackColourColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsDisplayOrderNull() As Boolean
            Return Me.IsNull(Me.tableRequestStatus.DisplayOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetDisplayOrderNull()
            Me(Me.tableRequestStatus.DisplayOrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableRequestStatus.CreatedDateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedDateTimeNull()
            Me(Me.tableRequestStatus.CreatedDateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableRequestStatus.ModifiedDateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedDateTimeNull()
            Me(Me.tableRequestStatus.ModifiedDateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRequestRowsByFK_Request_ConsultantStatus() As RequestRow()
            If (Me.Table.ChildRelations("FK_Request_ConsultantStatus") Is Nothing) Then
                Return New RequestRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Request_ConsultantStatus")),RequestRow())
            End If
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetRequestRowsByFK_Request_RequestStatus() As RequestRow()
            If (Me.Table.ChildRelations("FK_Request_RequestStatus") Is Nothing) Then
                Return New RequestRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Request_RequestStatus")),RequestRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class RequestRow
        Inherits Global.System.Data.DataRow
        
        Private tableRequest As RequestDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableRequest = CType(Me.Table,RequestDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestUID() As System.Guid
            Get
                Return CType(Me(Me.tableRequest.RequestUIDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tableRequest.RequestUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRequest.RequestIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestID' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.RequestIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestNumber() As String
            Get
                If Me.IsRequestNumberNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableRequest.RequestNumberColumn),String)
                End If
            End Get
            Set
                Me(Me.tableRequest.RequestNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsultantRID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRequest.ConsultantRIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantRID' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.ConsultantRIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsultantStatusID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRequest.ConsultantStatusIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantStatusID' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.ConsultantStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientSiteUID() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableRequest.ClientSiteUIDColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientSiteUID' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.ClientSiteUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssignedToUID() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableRequest.AssignedToUIDColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssignedToUID' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.AssignedToUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestStatusID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRequest.RequestStatusIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestStatusID' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.RequestStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property NextActionDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRequest.NextActionDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'NextActionDate' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.NextActionDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CompletedDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRequest.CompletedDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CompletedDate' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.CompletedDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Contact() As String
            Get
                If Me.IsContactNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableRequest.ContactColumn),String)
                End If
            End Get
            Set
                Me(Me.tableRequest.ContactColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ShortDescription() As String
            Get
                If Me.IsShortDescriptionNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableRequest.ShortDescriptionColumn),String)
                End If
            End Get
            Set
                Me(Me.tableRequest.ShortDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LongDescription() As String
            Get
                If Me.IsLongDescriptionNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableRequest.LongDescriptionColumn),String)
                End If
            End Get
            Set
                Me(Me.tableRequest.LongDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedDateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRequest.CreatedDateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDateTime' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.CreatedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableRequest.ModifiedDateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDateTime' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.ModifiedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientSiteName() As String
            Get
                Try 
                    Return CType(Me(Me.tableRequest.ClientSiteNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientSiteName' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.ClientSiteNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Jobs() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRequest.JobsColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Jobs' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.JobsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AssignedToName() As String
            Get
                Try 
                    Return CType(Me(Me.tableRequest.AssignedToNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AssignedToName' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.AssignedToNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestStatusDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableRequest.RequestStatusDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestStatusDescription' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.RequestStatusDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestStatusOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRequest.RequestStatusOrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestStatusOrder' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.RequestStatusOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsultantStatusDescription() As String
            Get
                Try 
                    Return CType(Me(Me.tableRequest.ConsultantStatusDescriptionColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantStatusDescription' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.ConsultantStatusDescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsultantStatusOrder() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableRequest.ConsultantStatusOrderColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantStatusOrder' in table 'Request' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableRequest.ConsultantStatusOrderColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientSiteRow() As ClientSiteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Request_ClientSite")),ClientSiteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Request_ClientSite"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsultantRow() As ConsultantRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Request_Consultant")),ConsultantRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Request_Consultant"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestStatusRowByFK_Request_ConsultantStatus() As RequestStatusRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Request_ConsultantStatus")),RequestStatusRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Request_ConsultantStatus"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestStatusRowByFK_Request_RequestStatus() As RequestStatusRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Request_RequestStatus")),RequestStatusRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Request_RequestStatus"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestIDNull() As Boolean
            Return Me.IsNull(Me.tableRequest.RequestIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestIDNull()
            Me(Me.tableRequest.RequestIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestNumberNull() As Boolean
            Return Me.IsNull(Me.tableRequest.RequestNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestNumberNull()
            Me(Me.tableRequest.RequestNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsultantRIDNull() As Boolean
            Return Me.IsNull(Me.tableRequest.ConsultantRIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsultantRIDNull()
            Me(Me.tableRequest.ConsultantRIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsultantStatusIDNull() As Boolean
            Return Me.IsNull(Me.tableRequest.ConsultantStatusIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsultantStatusIDNull()
            Me(Me.tableRequest.ConsultantStatusIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientSiteUIDNull() As Boolean
            Return Me.IsNull(Me.tableRequest.ClientSiteUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientSiteUIDNull()
            Me(Me.tableRequest.ClientSiteUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssignedToUIDNull() As Boolean
            Return Me.IsNull(Me.tableRequest.AssignedToUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssignedToUIDNull()
            Me(Me.tableRequest.AssignedToUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestStatusIDNull() As Boolean
            Return Me.IsNull(Me.tableRequest.RequestStatusIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestStatusIDNull()
            Me(Me.tableRequest.RequestStatusIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsNextActionDateNull() As Boolean
            Return Me.IsNull(Me.tableRequest.NextActionDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetNextActionDateNull()
            Me(Me.tableRequest.NextActionDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCompletedDateNull() As Boolean
            Return Me.IsNull(Me.tableRequest.CompletedDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCompletedDateNull()
            Me(Me.tableRequest.CompletedDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsContactNull() As Boolean
            Return Me.IsNull(Me.tableRequest.ContactColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetContactNull()
            Me(Me.tableRequest.ContactColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsShortDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableRequest.ShortDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetShortDescriptionNull()
            Me(Me.tableRequest.ShortDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLongDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableRequest.LongDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLongDescriptionNull()
            Me(Me.tableRequest.LongDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableRequest.CreatedDateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedDateTimeNull()
            Me(Me.tableRequest.CreatedDateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableRequest.ModifiedDateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedDateTimeNull()
            Me(Me.tableRequest.ModifiedDateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientSiteNameNull() As Boolean
            Return Me.IsNull(Me.tableRequest.ClientSiteNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientSiteNameNull()
            Me(Me.tableRequest.ClientSiteNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobsNull() As Boolean
            Return Me.IsNull(Me.tableRequest.JobsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobsNull()
            Me(Me.tableRequest.JobsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAssignedToNameNull() As Boolean
            Return Me.IsNull(Me.tableRequest.AssignedToNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAssignedToNameNull()
            Me(Me.tableRequest.AssignedToNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestStatusDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableRequest.RequestStatusDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestStatusDescriptionNull()
            Me(Me.tableRequest.RequestStatusDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestStatusOrderNull() As Boolean
            Return Me.IsNull(Me.tableRequest.RequestStatusOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestStatusOrderNull()
            Me(Me.tableRequest.RequestStatusOrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsultantStatusDescriptionNull() As Boolean
            Return Me.IsNull(Me.tableRequest.ConsultantStatusDescriptionColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsultantStatusDescriptionNull()
            Me(Me.tableRequest.ConsultantStatusDescriptionColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsultantStatusOrderNull() As Boolean
            Return Me.IsNull(Me.tableRequest.ConsultantStatusOrderColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsultantStatusOrderNull()
            Me(Me.tableRequest.ConsultantStatusOrderColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetJobRows() As JobRow()
            If (Me.Table.ChildRelations("FK_Job_Request") Is Nothing) Then
                Return New JobRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Job_Request")),JobRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class JobStatusRow
        Inherits Global.System.Data.DataRow
        
        Private tableJobStatus As JobStatusDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableJobStatus = CType(Me.Table,JobStatusDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobStatusID() As Integer
            Get
                Return CType(Me(Me.tableJobStatus.JobStatusIDColumn),Integer)
            End Get
            Set
                Me(Me.tableJobStatus.JobStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Description() As String
            Get
                Return CType(Me(Me.tableJobStatus.DescriptionColumn),String)
            End Get
            Set
                Me(Me.tableJobStatus.DescriptionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedDateTime() As Date
            Get
                Return CType(Me(Me.tableJobStatus.CreatedDateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableJobStatus.CreatedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDateTime() As Date
            Get
                Return CType(Me(Me.tableJobStatus.ModifiedDateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableJobStatus.ModifiedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetJobRows() As JobRow()
            If (Me.Table.ChildRelations("FK_JobStatus_Job") Is Nothing) Then
                Return New JobRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_JobStatus_Job")),JobRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class JobRow
        Inherits Global.System.Data.DataRow
        
        Private tableJob As JobDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableJob = CType(Me.Table,JobDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobUID() As System.Guid
            Get
                Return CType(Me(Me.tableJob.JobUIDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tableJob.JobUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableJob.JobIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobID' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.JobIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobNumber() As String
            Get
                If Me.IsJobNumberNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableJob.JobNumberColumn),String)
                End If
            End Get
            Set
                Me(Me.tableJob.JobNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsultantJobID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableJob.ConsultantJobIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantJobID' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.ConsultantJobIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsultantUID() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableJob.ConsultantUIDColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantUID' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.ConsultantUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientSiteUID() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableJob.ClientSiteUIDColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientSiteUID' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.ClientSiteUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestUID() As System.Guid
            Get
                Try 
                    Return CType(Me(Me.tableJob.RequestUIDColumn),Global.System.Guid)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestUID' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.RequestUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableJob.JobDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobDate' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.JobDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property StartTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableJob.StartTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'StartTime' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.StartTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FinishTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableJob.FinishTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'FinishTime' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.FinishTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobDetails() As String
            Get
                If Me.IsJobDetailsNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableJob.JobDetailsColumn),String)
                End If
            End Get
            Set
                Me(Me.tableJob.JobDetailsColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobNotes() As String
            Get
                If Me.IsJobNotesNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableJob.JobNotesColumn),String)
                End If
            End Get
            Set
                Me(Me.tableJob.JobNotesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Equipment() As String
            Get
                If Me.IsEquipmentNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableJob.EquipmentColumn),String)
                End If
            End Get
            Set
                Me(Me.tableJob.EquipmentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobStatusID() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableJob.JobStatusIDColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'JobStatusID' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.JobStatusIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ReturnDate() As Date
            Get
                Try 
                    Return CType(Me(Me.tableJob.ReturnDateColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ReturnDate' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.ReturnDateColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Signatory() As String
            Get
                If Me.IsSignatoryNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableJob.SignatoryColumn),String)
                End If
            End Get
            Set
                Me(Me.tableJob.SignatoryColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Signature() As String
            Get
                If Me.IsSignatureNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableJob.SignatureColumn),String)
                End If
            End Get
            Set
                Me(Me.tableJob.SignatureColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Email() As String
            Get
                If Me.IsEmailNull Then
                    Return "(Empty)"
                Else
                    Return CType(Me(Me.tableJob.EmailColumn),String)
                End If
            End Get
            Set
                Me(Me.tableJob.EmailColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EmailStatus() As Byte
            Get
                Try 
                    Return CType(Me(Me.tableJob.EmailStatusColumn),Byte)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'EmailStatus' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.EmailStatusColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinutesTravelled() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableJob.MinutesTravelledColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'MinutesTravelled' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.MinutesTravelledColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedDateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableJob.CreatedDateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDateTime' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.CreatedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDateTime() As Date
            Get
                Try 
                    Return CType(Me(Me.tableJob.ModifiedDateTimeColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDateTime' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.ModifiedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Flag() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableJob.FlagColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Flag' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.FlagColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsultantName() As String
            Get
                Try 
                    Return CType(Me(Me.tableJob.ConsultantNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantName' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.ConsultantNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestNumber() As String
            Get
                Try 
                    Return CType(Me(Me.tableJob.RequestNumberColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'RequestNumber' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.RequestNumberColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientSiteName() As String
            Get
                Try 
                    Return CType(Me(Me.tableJob.ClientSiteNameColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ClientSiteName' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.ClientSiteNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrackingTimeStamp() As Date
            Get
                Try 
                    Return CType(Me(Me.tableJob.TrackingTimeStampColumn),Date)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'TrackingTimeStamp' in table 'Job' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableJob.TrackingTimeStampColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TrackingInfo() As String
            Get
                If Me.IsTrackingInfoNull Then
                    Return String.Empty
                Else
                    Return CType(Me(Me.tableJob.TrackingInfoColumn),String)
                End If
            End Get
            Set
                Me(Me.tableJob.TrackingInfoColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ConsultantRow() As ConsultantRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Job_Consultant")),ConsultantRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Job_Consultant"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClientSiteRow() As ClientSiteRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Job_ClientSite")),ClientSiteRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Job_ClientSite"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property RequestRow() As RequestRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Job_Request")),RequestRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_Job_Request"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property JobStatusRow() As JobStatusRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_JobStatus_Job")),JobStatusRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_JobStatus_Job"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobIDNull() As Boolean
            Return Me.IsNull(Me.tableJob.JobIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobIDNull()
            Me(Me.tableJob.JobIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobNumberNull() As Boolean
            Return Me.IsNull(Me.tableJob.JobNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobNumberNull()
            Me(Me.tableJob.JobNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsultantJobIDNull() As Boolean
            Return Me.IsNull(Me.tableJob.ConsultantJobIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsultantJobIDNull()
            Me(Me.tableJob.ConsultantJobIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsultantUIDNull() As Boolean
            Return Me.IsNull(Me.tableJob.ConsultantUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsultantUIDNull()
            Me(Me.tableJob.ConsultantUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientSiteUIDNull() As Boolean
            Return Me.IsNull(Me.tableJob.ClientSiteUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientSiteUIDNull()
            Me(Me.tableJob.ClientSiteUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestUIDNull() As Boolean
            Return Me.IsNull(Me.tableJob.RequestUIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestUIDNull()
            Me(Me.tableJob.RequestUIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobDateNull() As Boolean
            Return Me.IsNull(Me.tableJob.JobDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobDateNull()
            Me(Me.tableJob.JobDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsStartTimeNull() As Boolean
            Return Me.IsNull(Me.tableJob.StartTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetStartTimeNull()
            Me(Me.tableJob.StartTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFinishTimeNull() As Boolean
            Return Me.IsNull(Me.tableJob.FinishTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFinishTimeNull()
            Me(Me.tableJob.FinishTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobDetailsNull() As Boolean
            Return Me.IsNull(Me.tableJob.JobDetailsColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobDetailsNull()
            Me(Me.tableJob.JobDetailsColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobNotesNull() As Boolean
            Return Me.IsNull(Me.tableJob.JobNotesColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobNotesNull()
            Me(Me.tableJob.JobNotesColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEquipmentNull() As Boolean
            Return Me.IsNull(Me.tableJob.EquipmentColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEquipmentNull()
            Me(Me.tableJob.EquipmentColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsJobStatusIDNull() As Boolean
            Return Me.IsNull(Me.tableJob.JobStatusIDColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetJobStatusIDNull()
            Me(Me.tableJob.JobStatusIDColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsReturnDateNull() As Boolean
            Return Me.IsNull(Me.tableJob.ReturnDateColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetReturnDateNull()
            Me(Me.tableJob.ReturnDateColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSignatoryNull() As Boolean
            Return Me.IsNull(Me.tableJob.SignatoryColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSignatoryNull()
            Me(Me.tableJob.SignatoryColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsSignatureNull() As Boolean
            Return Me.IsNull(Me.tableJob.SignatureColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetSignatureNull()
            Me(Me.tableJob.SignatureColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailNull() As Boolean
            Return Me.IsNull(Me.tableJob.EmailColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailNull()
            Me(Me.tableJob.EmailColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsEmailStatusNull() As Boolean
            Return Me.IsNull(Me.tableJob.EmailStatusColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetEmailStatusNull()
            Me(Me.tableJob.EmailStatusColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsMinutesTravelledNull() As Boolean
            Return Me.IsNull(Me.tableJob.MinutesTravelledColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetMinutesTravelledNull()
            Me(Me.tableJob.MinutesTravelledColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsCreatedDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableJob.CreatedDateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetCreatedDateTimeNull()
            Me(Me.tableJob.CreatedDateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsModifiedDateTimeNull() As Boolean
            Return Me.IsNull(Me.tableJob.ModifiedDateTimeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetModifiedDateTimeNull()
            Me(Me.tableJob.ModifiedDateTimeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsFlagNull() As Boolean
            Return Me.IsNull(Me.tableJob.FlagColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetFlagNull()
            Me(Me.tableJob.FlagColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsConsultantNameNull() As Boolean
            Return Me.IsNull(Me.tableJob.ConsultantNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetConsultantNameNull()
            Me(Me.tableJob.ConsultantNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsRequestNumberNull() As Boolean
            Return Me.IsNull(Me.tableJob.RequestNumberColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetRequestNumberNull()
            Me(Me.tableJob.RequestNumberColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsClientSiteNameNull() As Boolean
            Return Me.IsNull(Me.tableJob.ClientSiteNameColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetClientSiteNameNull()
            Me(Me.tableJob.ClientSiteNameColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrackingTimeStampNull() As Boolean
            Return Me.IsNull(Me.tableJob.TrackingTimeStampColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrackingTimeStampNull()
            Me(Me.tableJob.TrackingTimeStampColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsTrackingInfoNull() As Boolean
            Return Me.IsNull(Me.tableJob.TrackingInfoColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetTrackingInfoNull()
            Me(Me.tableJob.TrackingInfoColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CustomFormRow
        Inherits Global.System.Data.DataRow
        
        Private tableCustomForm As CustomFormDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomForm = CType(Me.Table,CustomFormDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomFormUID() As System.Guid
            Get
                Return CType(Me(Me.tableCustomForm.CustomFormUIDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tableCustomForm.CustomFormUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FormType() As String
            Get
                Return CType(Me(Me.tableCustomForm.FormTypeColumn),String)
            End Get
            Set
                Me(Me.tableCustomForm.FormTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property TableName() As String
            Get
                Return CType(Me(Me.tableCustomForm.TableNameColumn),String)
            End Get
            Set
                Me(Me.tableCustomForm.TableNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property PrimaryKeyColumnName() As String
            Get
                Return CType(Me(Me.tableCustomForm.PrimaryKeyColumnNameColumn),String)
            End Get
            Set
                Me(Me.tableCustomForm.PrimaryKeyColumnNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ForeignKeyColumnName() As String
            Get
                Return CType(Me(Me.tableCustomForm.ForeignKeyColumnNameColumn),String)
            End Get
            Set
                Me(Me.tableCustomForm.ForeignKeyColumnNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomFormName() As String
            Get
                Return CType(Me(Me.tableCustomForm.CustomFormNameColumn),String)
            End Get
            Set
                Me(Me.tableCustomForm.CustomFormNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParentFilter() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomForm.ParentFilterColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ParentFilter' in table 'CustomForm' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomForm.ParentFilterColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Priority() As Byte
            Get
                Return CType(Me(Me.tableCustomForm.PriorityColumn),Byte)
            End Get
            Set
                Me(Me.tableCustomForm.PriorityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParentTableName() As String
            Get
                Return CType(Me(Me.tableCustomForm.ParentTableNameColumn),String)
            End Get
            Set
                Me(Me.tableCustomForm.ParentTableNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ParentPrimaryKeyColumnName() As String
            Get
                Return CType(Me(Me.tableCustomForm.ParentPrimaryKeyColumnNameColumn),String)
            End Get
            Set
                Me(Me.tableCustomForm.ParentPrimaryKeyColumnNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property OneToMany() As Byte
            Get
                Return CType(Me(Me.tableCustomForm.OneToManyColumn),Byte)
            End Get
            Set
                Me(Me.tableCustomForm.OneToManyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedDateTime() As Date
            Get
                Return CType(Me(Me.tableCustomForm.CreatedDateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableCustomForm.CreatedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDateTime() As Date
            Get
                Return CType(Me(Me.tableCustomForm.ModifiedDateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableCustomForm.ModifiedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LockWithParent() As Boolean
            Get
                Return CType(Me(Me.tableCustomForm.LockWithParentColumn),Boolean)
            End Get
            Set
                Me(Me.tableCustomForm.LockWithParentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsReadOnly() As Boolean
            Get
                Return CType(Me(Me.tableCustomForm.IsReadOnlyColumn),Boolean)
            End Get
            Set
                Me(Me.tableCustomForm.IsReadOnlyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsParentFilterNull() As Boolean
            Return Me.IsNull(Me.tableCustomForm.ParentFilterColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetParentFilterNull()
            Me(Me.tableCustomForm.ParentFilterColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCustomControlRows() As CustomControlRow()
            If (Me.Table.ChildRelations("FK_CustomControl_CustomForm") Is Nothing) Then
                Return New CustomControlRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_CustomControl_CustomForm")),CustomControlRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CustomControlRow
        Inherits Global.System.Data.DataRow
        
        Private tableCustomControl As CustomControlDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCustomControl = CType(Me.Table,CustomControlDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomControlUID() As System.Guid
            Get
                Return CType(Me(Me.tableCustomControl.CustomControlUIDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tableCustomControl.CustomControlUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomFormUID() As System.Guid
            Get
                Return CType(Me(Me.tableCustomControl.CustomFormUIDColumn),Global.System.Guid)
            End Get
            Set
                Me(Me.tableCustomControl.CustomFormUIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property FieldName() As String
            Get
                Return CType(Me(Me.tableCustomControl.FieldNameColumn),String)
            End Get
            Set
                Me(Me.tableCustomControl.FieldNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomControlTypeID() As Byte
            Get
                Return CType(Me(Me.tableCustomControl.CustomControlTypeIDColumn),Byte)
            End Get
            Set
                Me(Me.tableCustomControl.CustomControlTypeIDColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Label() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomControl.LabelColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'Label' in table 'CustomControl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomControl.LabelColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Sequence() As Byte
            Get
                Return CType(Me(Me.tableCustomControl.SequenceColumn),Byte)
            End Get
            Set
                Me(Me.tableCustomControl.SequenceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SortPriority() As Byte
            Get
                Return CType(Me(Me.tableCustomControl.SortPriorityColumn),Byte)
            End Get
            Set
                Me(Me.tableCustomControl.SortPriorityColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Lines() As Byte
            Get
                Return CType(Me(Me.tableCustomControl.LinesColumn),Byte)
            End Get
            Set
                Me(Me.tableCustomControl.LinesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MinimumValue() As Integer
            Get
                Return CType(Me(Me.tableCustomControl.MinimumValueColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomControl.MinimumValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaximumValue() As Integer
            Get
                Return CType(Me(Me.tableCustomControl.MaximumValueColumn),Integer)
            End Get
            Set
                Me(Me.tableCustomControl.MaximumValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property DecimalPlaces() As Byte
            Get
                Return CType(Me(Me.tableCustomControl.DecimalPlacesColumn),Byte)
            End Get
            Set
                Me(Me.tableCustomControl.DecimalPlacesColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property IsReadOnly() As Boolean
            Get
                Return CType(Me(Me.tableCustomControl.IsReadOnlyColumn),Boolean)
            End Get
            Set
                Me(Me.tableCustomControl.IsReadOnlyColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Position() As String
            Get
                Return CType(Me(Me.tableCustomControl.PositionColumn),String)
            End Get
            Set
                Me(Me.tableCustomControl.PositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property WidthPercent() As Byte
            Get
                Return CType(Me(Me.tableCustomControl.WidthPercentColumn),Byte)
            End Get
            Set
                Me(Me.tableCustomControl.WidthPercentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabelPosition() As String
            Get
                Return CType(Me(Me.tableCustomControl.LabelPositionColumn),String)
            End Get
            Set
                Me(Me.tableCustomControl.LabelPositionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListDataSource() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomControl.ListDataSourceColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListDataSource' in table 'CustomControl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomControl.ListDataSourceColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListValueColumn() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomControl.ListValueColumnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListValueColumn' in table 'CustomControl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomControl.ListValueColumnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListDisplayColumn() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomControl.ListDisplayColumnColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListDisplayColumn' in table 'CustomControl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomControl.ListDisplayColumnColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ListData() As String
            Get
                Try 
                    Return CType(Me(Me.tableCustomControl.ListDataColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'ListData' in table 'CustomControl' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCustomControl.ListDataColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CreatedDateTime() As Date
            Get
                Return CType(Me(Me.tableCustomControl.CreatedDateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableCustomControl.CreatedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ModifiedDateTime() As Date
            Get
                Return CType(Me(Me.tableCustomControl.ModifiedDateTimeColumn),Date)
            End Get
            Set
                Me(Me.tableCustomControl.ModifiedDateTimeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LockWithParent() As Boolean
            Get
                Return CType(Me(Me.tableCustomControl.LockWithParentColumn),Boolean)
            End Get
            Set
                Me(Me.tableCustomControl.LockWithParentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property LabelWidthPercent() As Byte
            Get
                Return CType(Me(Me.tableCustomControl.LabelWidthPercentColumn),Byte)
            End Get
            Set
                Me(Me.tableCustomControl.LabelWidthPercentColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CustomFormRow() As CustomFormRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_CustomControl_CustomForm")),CustomFormRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("FK_CustomControl_CustomForm"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsLabelNull() As Boolean
            Return Me.IsNull(Me.tableCustomControl.LabelColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetLabelNull()
            Me(Me.tableCustomControl.LabelColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListDataSourceNull() As Boolean
            Return Me.IsNull(Me.tableCustomControl.ListDataSourceColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListDataSourceNull()
            Me(Me.tableCustomControl.ListDataSourceColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListValueColumnNull() As Boolean
            Return Me.IsNull(Me.tableCustomControl.ListValueColumnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListValueColumnNull()
            Me(Me.tableCustomControl.ListValueColumnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListDisplayColumnNull() As Boolean
            Return Me.IsNull(Me.tableCustomControl.ListDisplayColumnColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListDisplayColumnNull()
            Me(Me.tableCustomControl.ListDisplayColumnColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsListDataNull() As Boolean
            Return Me.IsNull(Me.tableCustomControl.ListDataColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetListDataNull()
            Me(Me.tableCustomControl.ListDataColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ConsultantRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ConsultantRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ConsultantRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ConsultantRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ClientSiteStatusRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ClientSiteStatusRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClientSiteStatusRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClientSiteStatusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class ClientSiteRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As ClientSiteRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As ClientSiteRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As ClientSiteRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RequestStatusRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RequestStatusRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RequestStatusRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RequestStatusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class RequestRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As RequestRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As RequestRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As RequestRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class JobStatusRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As JobStatusRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As JobStatusRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As JobStatusRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class JobRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As JobRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As JobRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As JobRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CustomFormRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CustomFormRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CustomFormRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CustomFormRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CustomControlRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CustomControlRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CustomControlRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CustomControlRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace ClientDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ConsultantTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Consultant"
            tableMapping.ColumnMappings.Add("ConsultantNumber", "ConsultantNumber")
            tableMapping.ColumnMappings.Add("Name", "Name")
            tableMapping.ColumnMappings.Add("EmailAddress", "EmailAddress")
            tableMapping.ColumnMappings.Add("MobilePhone", "MobilePhone")
            tableMapping.ColumnMappings.Add("ConsultantUID", "ConsultantUID")
            tableMapping.ColumnMappings.Add("ConsultantID", "ConsultantID")
            tableMapping.ColumnMappings.Add("CreatedDateTime", "CreatedDateTime")
            tableMapping.ColumnMappings.Add("ModifiedDateTime", "ModifiedDateTime")
            tableMapping.ColumnMappings.Add("MinSyncTime", "MinSyncTime")
            tableMapping.ColumnMappings.Add("LastSyncTime", "LastSyncTime")
            tableMapping.ColumnMappings.Add("SyncTime", "SyncTime")
            tableMapping.ColumnMappings.Add("MobileAlert", "MobileAlert")
            tableMapping.ColumnMappings.Add("IsActiviserUser", "IsActiviserUser")
            tableMapping.ColumnMappings.Add("Management", "Management")
            tableMapping.ColumnMappings.Add("Administration", "Administration")
            tableMapping.ColumnMappings.Add("DomainLogon", "DomainLogon")
            tableMapping.ColumnMappings.Add("Username", "Username")
            tableMapping.ColumnMappings.Add("TrackingTimestamp", "TrackingTimestamp")
            tableMapping.ColumnMappings.Add("TrackingInfo", "TrackingInfo")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM Consultant"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ConsultanUID = @ConsultantUID)"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUID", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Consultant] ([ConsultantUID], [ConsultantID], [ConsultantNumber], [N"& _ 
                "ame], [Username], [DomainLogon], [MobilePhone], [EmailAddress], [MobileAlert], ["& _ 
                "IsActiviserUser], [Management], [Administration], [MinSyncTime], [LastSyncTime],"& _ 
                " [SyncTime], [CreatedDateTime], [ModifiedDateTime], [TrackingTimestamp], [Tracki"& _ 
                "ngInfo]) VALUES (@ConsultantUID, @ConsultantID, @ConsultantNumber, @Name, @Usern"& _ 
                "ame, @DomainLogon, @MobilePhone, @EmailAddress, @MobileAlert, @IsActiviserUser, "& _ 
                "@Management, @Administration, @MinSyncTime, @LastSyncTime, @SyncTime, @CreatedDa"& _ 
                "teTime, @ModifiedDateTime, @TrackingTimestamp, @TrackingInfo);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT Consultan"& _ 
                "tUID, ConsultantID, ConsultantNumber, Name, Username, DomainLogon, MobilePhone, "& _ 
                "EmailAddress, MobileAlert, IsActiviserUser, Management, Administration, MinSyncT"& _ 
                "ime, LastSyncTime, SyncTime, CreatedDateTime, ModifiedDateTime, TrackingTimestam"& _ 
                "p, TrackingInfo FROM Consultant WHERE (ConsultantUID = @ConsultantUID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantNumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Username", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Username", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DomainLogon", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DomainLogon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MobilePhone", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MobilePhone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmailAddress", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MobileAlert", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MobileAlert", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsActiviserUser", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsActiviserUser", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Management", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Management", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Administration", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Administration", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinSyncTime", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinSyncTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastSyncTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LastSyncTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SyncTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SyncTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TrackingTimestamp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TrackingTimestamp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TrackingInfo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TrackingInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE    Consultant"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              ConsultantID = @ConsultantID, ConsultantNu"& _ 
                "mber = @ConsultantNumber, Name = @Name, Username = @Username, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                "& _ 
                "      DomainLogon = @DomainLogon, MobilePhone = @MobilePhone, EmailAddress = @Em"& _ 
                "ailAddress, MobileAlert = @MobileAlert, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      IsActiviserUser "& _ 
                "= @IsActiviserUser, Management = @Management, Administration = @Administration, "& _ 
                "MinSyncTime = @MinSyncTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      LastSyncTime = @LastSyncTime"& _ 
                ", SyncTime = @SyncTime, CreatedDateTime = @CreatedDateTime, ModifiedDateTime = @"& _ 
                "ModifiedDateTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      TrackingTimestamp = @TrackingTimestamp"& _ 
                ", TrackingInfo = @TrackingInfo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ConsultantUID = @ConsultantUID); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SE"& _ 
                "LECT ConsultantUID, ConsultantID, ConsultantNumber, Name, Username, DomainLogon,"& _ 
                " MobilePhone, EmailAddress, MobileAlert, IsActiviserUser, Management, Administra"& _ 
                "tion, MinSyncTime, LastSyncTime, SyncTime, CreatedDateTime, ModifiedDateTime, Tr"& _ 
                "ackingTimestamp, TrackingInfo FROM Consultant WHERE (ConsultantUID = @Consultant"& _ 
                "UID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUID", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantUID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantNumber", Global.System.Data.SqlDbType.NVarChar, 100, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Name", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "Name", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Username", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Username", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DomainLogon", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "DomainLogon", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MobilePhone", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "MobilePhone", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmailAddress", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailAddress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MobileAlert", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "MobileAlert", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsActiviserUser", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "IsActiviserUser", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Management", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Management", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Administration", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 0, 0, "Administration", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinSyncTime", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 0, 0, "MinSyncTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LastSyncTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "LastSyncTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SyncTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "SyncTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TrackingTimestamp", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TrackingTimestamp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TrackingInfo", Global.System.Data.SqlDbType.NVarChar, 128, Global.System.Data.ParameterDirection.Input, 0, 0, "TrackingInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.activiser.My.MySettings.Default.activiserConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(8) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     ConsultantUID, ConsultantID, ConsultantNumber, Name, Username, DomainL"& _ 
                "ogon, MobilePhone, EmailAddress, MobileAlert, IsActiviserUser, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "       Management, Administration, MinSyncTime, LastSyncTime, SyncTime, CreatedD"& _ 
                "ateTime, ModifiedDateTime, TrackingTimestamp, TrackingInfo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Consult"& _ 
                "ant"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     ConsultantUID, ConsultantID, ConsultantNumber, Name, Username, DomainL"& _ 
                "ogon, MobilePhone, EmailAddress, MobileAlert, IsActiviserUser, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "       Management, Administration, MinSyncTime, LastSyncTime, SyncTime, CreatedD"& _ 
                "ateTime, ModifiedDateTime, TrackingTimestamp, TrackingInfo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Consult"& _ 
                "ant"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ConsultantUID = @ConsultantUid)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUid", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     ConsultantUID, ConsultantID, ConsultantNumber, Name, Username, DomainL"& _ 
                "ogon, MobilePhone, EmailAddress, MobileAlert, IsActiviserUser, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "       Management, Administration, MinSyncTime, LastSyncTime, SyncTime, CreatedD"& _ 
                "ateTime, ModifiedDateTime, TrackingTimestamp, TrackingInfo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Consult"& _ 
                "ant"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (IsActiviserUser <> 0)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     ConsultantUID, ConsultantID, ConsultantNumber, Name, Username, DomainL"& _ 
                "ogon, MobilePhone, EmailAddress, MobileAlert, IsActiviserUser, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "       Management, Administration, MinSyncTime, LastSyncTime, SyncTime, CreatedD"& _ 
                "ateTime, ModifiedDateTime, TrackingTimestamp, TrackingInfo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Consult"& _ 
                "ant"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ModifiedDateTime >= @ModifiedSince) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (L"& _ 
                "astSyncTime > @ModifiedSince)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedSince", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT     Consultant.ConsultantUID, Consultant.ConsultantID, Consultant.Consulta"& _ 
                "ntNumber, Consultant.Name, Consultant.Username, Consultant.DomainLogon, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                Consultant.MobilePhone, Consultant.EmailAddress, Consultant.Mobi"& _ 
                "leAlert, Consultant.IsActiviserUser, Consultant.Management, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "    Consultant.Administration, Consultant.MinSyncTime, Consultant.LastSyncTime, "& _ 
                "Consultant.SyncTime, Consultant.CreatedDateTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Consult"& _ 
                "ant.ModifiedDateTime, Consultant.TrackingTimestamp, Consultant.TrackingInfo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FRO"& _ 
                "M         Consultant INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Request ON Consultant.Con"& _ 
                "sultantUID = Request.AssignedToUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Request.RequestUID = @RequestUid)"& _ 
                ""
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestUid", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT     ConsultantID, ConsultantNumber, ConsultantUID, Name, Username, Created"& _ 
                "DateTime, ModifiedDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Consultant"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT     ConsultantID, ConsultantNumber, ConsultantUID, Name, Username, Created"& _ 
                "DateTime, ModifiedDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Consultant"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ConsultantUID = "& _ 
                "@ConsultantUid)"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUid", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT     ConsultantID, ConsultantNumber, ConsultantUID, Name, Username, Created"& _ 
                "DateTime, ModifiedDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Consultant"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ModifiedDateTime"& _ 
                " >= @ModifiedSince)"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedSince", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "UPDATE    Consultant"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SET              ModifiedDateTime = @ModifiedDateTime, Trac"& _ 
                "kingTimestamp = @TrackingTimestamp, TrackingInfo = @TrackingInfo"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Con"& _ 
                "sultantUID = @ConsultantUID); "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUID", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantUID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TrackingTimestamp", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "TrackingTimestamp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TrackingInfo", Global.System.Data.SqlDbType.NVarChar, 128, Global.System.Data.ParameterDirection.Input, 0, 0, "TrackingInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ClientDataSet.ConsultantDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ClientDataSet.ConsultantDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ClientDataSet.ConsultantDataTable = New ClientDataSet.ConsultantDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByConsultantUid(ByVal dataTable As ClientDataSet.ConsultantDataTable, ByVal ConsultantUid As System.Guid) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUid,System.Guid)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByConsultantUid(ByVal ConsultantUid As System.Guid) As ClientDataSet.ConsultantDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUid,System.Guid)
            Dim dataTable As ClientDataSet.ConsultantDataTable = New ClientDataSet.ConsultantDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByIsActiviserUser(ByVal dataTable As ClientDataSet.ConsultantDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByIsActiviserUser() As ClientDataSet.ConsultantDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Dim dataTable As ClientDataSet.ConsultantDataTable = New ClientDataSet.ConsultantDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByModifiedDateTime(ByVal dataTable As ClientDataSet.ConsultantDataTable, ByVal ModifiedSince As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByModifiedDateTime(ByVal ModifiedSince As Global.System.Nullable(Of Date)) As ClientDataSet.ConsultantDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.ConsultantDataTable = New ClientDataSet.ConsultantDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRequestUid(ByVal dataTable As ClientDataSet.ConsultantDataTable, ByVal RequestUid As System.Guid) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(RequestUid,System.Guid)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRequestUid(ByVal RequestUid As System.Guid) As ClientDataSet.ConsultantDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(RequestUid,System.Guid)
            Dim dataTable As ClientDataSet.ConsultantDataTable = New ClientDataSet.ConsultantDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillForClient(ByVal dataTable As ClientDataSet.ConsultantDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataForClient() As ClientDataSet.ConsultantDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Dim dataTable As ClientDataSet.ConsultantDataTable = New ClientDataSet.ConsultantDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillForClientByConsultantUid(ByVal dataTable As ClientDataSet.ConsultantDataTable, ByVal ConsultantUid As System.Guid) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUid,System.Guid)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataForClientByConsultantUid(ByVal ConsultantUid As System.Guid) As ClientDataSet.ConsultantDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUid,System.Guid)
            Dim dataTable As ClientDataSet.ConsultantDataTable = New ClientDataSet.ConsultantDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillForClientByModifiedDateTime(ByVal dataTable As ClientDataSet.ConsultantDataTable, ByVal ModifiedSince As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataForClientByModifiedDateTime(ByVal ModifiedSince As Global.System.Nullable(Of Date)) As ClientDataSet.ConsultantDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.ConsultantDataTable = New ClientDataSet.ConsultantDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ClientDataSet.ConsultantDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ClientDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Consultant")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal ConsultantUID As Object) As Integer
            If (ConsultantUID Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ConsultantUID")
            Else
                Me.Adapter.DeleteCommand.Parameters(0).Value = CType(ConsultantUID,Object)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal ConsultantUID As System.Guid,  _
                    ByVal ConsultantID As Global.System.Nullable(Of Integer),  _
                    ByVal ConsultantNumber As String,  _
                    ByVal Name As String,  _
                    ByVal Username As String,  _
                    ByVal DomainLogon As String,  _
                    ByVal MobilePhone As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal MobileAlert As Global.System.Nullable(Of Boolean),  _
                    ByVal IsActiviserUser As Global.System.Nullable(Of Boolean),  _
                    ByVal Management As Global.System.Nullable(Of Boolean),  _
                    ByVal Administration As Global.System.Nullable(Of Boolean),  _
                    ByVal MinSyncTime As Global.System.Nullable(Of Integer),  _
                    ByVal LastSyncTime As Global.System.Nullable(Of Date),  _
                    ByVal SyncTime As Global.System.Nullable(Of Date),  _
                    ByVal CreatedDateTime As Global.System.Nullable(Of Date),  _
                    ByVal ModifiedDateTime As Global.System.Nullable(Of Date),  _
                    ByVal TrackingTimestamp As Global.System.Nullable(Of Date),  _
                    ByVal TrackingInfo As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ConsultantUID,System.Guid)
            If (ConsultantID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ConsultantID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ConsultantNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ConsultantNumber,String)
            End If
            If (Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Name")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(Name,String)
            End If
            If (Username Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Username,String)
            End If
            If (DomainLogon Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(DomainLogon,String)
            End If
            If (MobilePhone Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(MobilePhone,String)
            End If
            If (EmailAddress Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(EmailAddress,String)
            End If
            If (MobileAlert.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(MobileAlert.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (IsActiviserUser.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(IsActiviserUser.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Management.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Management.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Administration.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(Administration.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (MinSyncTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(MinSyncTime.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (LastSyncTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(LastSyncTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (SyncTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(SyncTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (CreatedDateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(CreatedDateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (ModifiedDateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(ModifiedDateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            End If
            If (TrackingTimestamp.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(TrackingTimestamp.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (TrackingInfo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(TrackingInfo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal ConsultantUID As System.Guid,  _
                    ByVal ConsultantID As Global.System.Nullable(Of Integer),  _
                    ByVal ConsultantNumber As String,  _
                    ByVal Name As String,  _
                    ByVal Username As String,  _
                    ByVal DomainLogon As String,  _
                    ByVal MobilePhone As String,  _
                    ByVal EmailAddress As String,  _
                    ByVal MobileAlert As Global.System.Nullable(Of Boolean),  _
                    ByVal IsActiviserUser As Global.System.Nullable(Of Boolean),  _
                    ByVal Management As Global.System.Nullable(Of Boolean),  _
                    ByVal Administration As Global.System.Nullable(Of Boolean),  _
                    ByVal MinSyncTime As Global.System.Nullable(Of Integer),  _
                    ByVal LastSyncTime As Global.System.Nullable(Of Date),  _
                    ByVal SyncTime As Global.System.Nullable(Of Date),  _
                    ByVal TrackingTimestamp As Global.System.Nullable(Of Date),  _
                    ByVal TrackingInfo As String,  _
                    ByVal CreatedDateTime As Global.System.Nullable(Of Date),  _
                    ByVal ModifiedDateTime As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ConsultantUID,System.Guid)
            If (ConsultantID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ConsultantID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ConsultantNumber Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ConsultantNumber,String)
            End If
            If (Name Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Name")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(Name,String)
            End If
            If (Username Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Username,String)
            End If
            If (DomainLogon Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(DomainLogon,String)
            End If
            If (MobilePhone Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(MobilePhone,String)
            End If
            If (EmailAddress Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(EmailAddress,String)
            End If
            If (MobileAlert.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(MobileAlert.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (IsActiviserUser.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(IsActiviserUser.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (Management.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Management.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (Administration.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(Administration.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (MinSyncTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(MinSyncTime.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (LastSyncTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(LastSyncTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (SyncTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(SyncTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (TrackingTimestamp.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(TrackingTimestamp.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            End If
            If (TrackingInfo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(TrackingInfo,String)
            End If
            If (CreatedDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(CreatedDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            End If
            If (ModifiedDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(ModifiedDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, false)>  _
        Public Overloads Overridable Function UpdateTrackingInfo(ByVal ConsultantUID As System.Guid, ByVal ModifiedDateTime As Global.System.Nullable(Of Date), ByVal TrackingTimestamp As Global.System.Nullable(Of Date), ByVal TrackingInfo As String) As Integer
            Dim command As Global.System.Data.SqlClient.SqlCommand = Me.CommandCollection(8)
            command.Parameters(0).Value = CType(ConsultantUID,System.Guid)
            If (ModifiedDateTime.HasValue = true) Then
                command.Parameters(1).Value = CType(ModifiedDateTime.Value,Date)
            Else
                command.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (TrackingTimestamp.HasValue = true) Then
                command.Parameters(2).Value = CType(TrackingTimestamp.Value,Date)
            Else
                command.Parameters(2).Value = Global.System.DBNull.Value
            End If
            If (TrackingInfo Is Nothing) Then
                command.Parameters(3).Value = Global.System.DBNull.Value
            Else
                command.Parameters(3).Value = CType(TrackingInfo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = command.Connection.State
            If ((command.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                command.Connection.Open
            End If
            Dim returnValue As Integer
            Try 
                returnValue = command.ExecuteNonQuery
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    command.Connection.Close
                End If
            End Try
            Return returnValue
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ClientSiteStatusTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ClientSiteStatus"
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("IsActive", "IsActive")
            tableMapping.ColumnMappings.Add("CreatedDateTime", "CreatedDateTime")
            tableMapping.ColumnMappings.Add("ModifiedDateTime", "ModifiedDateTime")
            tableMapping.ColumnMappings.Add("ClientSiteStatusID", "ClientSiteStatusID")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "activiser.ClientSiteStatus_Delete"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteStatusID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, "ClientSiteStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "activiser.ClientSiteStatus_Insert"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteStatusID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, "ClientSiteStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsActive", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, "IsActive", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "activiser.ClientSiteStatus_Update"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteStatusID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, "ClientSiteStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NVarChar, 250, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsActive", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, "IsActive", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.activiser.My.MySettings.Default.activiserConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "activiser.ClientSiteStatus_Select"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "activiser.ClientSiteStatus_SelectModifiedSince"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Since", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ClientDataSet.ClientSiteStatusDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ClientDataSet.ClientSiteStatusDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ClientDataSet.ClientSiteStatusDataTable = New ClientDataSet.ClientSiteStatusDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByModifiedDateTime(ByVal dataTable As ClientDataSet.ClientSiteStatusDataTable, ByVal Since As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Since.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Since.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByModifiedDateTime(ByVal Since As Global.System.Nullable(Of Date)) As ClientDataSet.ClientSiteStatusDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Since.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(Since.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.ClientSiteStatusDataTable = New ClientDataSet.ClientSiteStatusDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ClientDataSet.ClientSiteStatusDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ClientDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ClientSiteStatus")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal ClientSiteStatusID As Global.System.Nullable(Of Integer)) As Integer
            If (ClientSiteStatusID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(ClientSiteStatusID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ClientSiteStatusID As Global.System.Nullable(Of Integer), ByVal Description As String, ByVal IsActive As Global.System.Nullable(Of Boolean), ByVal CreatedDateTime As Global.System.Nullable(Of Date), ByVal ModifiedDateTime As Global.System.Nullable(Of Date)) As Integer
            If (ClientSiteStatusID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ClientSiteStatusID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Description,String)
            End If
            If (IsActive.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(IsActive.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (CreatedDateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(CreatedDateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ModifiedDateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ModifiedDateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ClientSiteStatusID As Global.System.Nullable(Of Integer), ByVal Description As String, ByVal IsActive As Global.System.Nullable(Of Boolean), ByVal CreatedDateTime As Global.System.Nullable(Of Date), ByVal ModifiedDateTime As Global.System.Nullable(Of Date)) As Integer
            If (ClientSiteStatusID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ClientSiteStatusID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Description,String)
            End If
            If (IsActive.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(IsActive.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (CreatedDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(CreatedDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ModifiedDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ModifiedDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class ClientSiteTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "ClientSite"
            tableMapping.ColumnMappings.Add("UID", "ClientSiteUID")
            tableMapping.ColumnMappings.Add("ID", "ClientSiteID")
            tableMapping.ColumnMappings.Add("ClientSiteNumber", "ClientSiteNumber")
            tableMapping.ColumnMappings.Add("SiteName", "SiteName")
            tableMapping.ColumnMappings.Add("SiteAddress", "SiteAddress")
            tableMapping.ColumnMappings.Add("SiteContactEmail", "SiteContactEmail")
            tableMapping.ColumnMappings.Add("SiteNotes", "SiteNotes")
            tableMapping.ColumnMappings.Add("Contact", "Contact")
            tableMapping.ColumnMappings.Add("ContactPhone1", "ContactPhone1")
            tableMapping.ColumnMappings.Add("ContactPhone2", "ContactPhone2")
            tableMapping.ColumnMappings.Add("ClientSiteUID", "ClientSiteUID")
            tableMapping.ColumnMappings.Add("ClientSiteID", "ClientSiteID")
            tableMapping.ColumnMappings.Add("AccountOverdue", "Hold")
            tableMapping.ColumnMappings.Add("CreatedDateTime", "CreatedDateTime")
            tableMapping.ColumnMappings.Add("ModifiedDateTime", "ModifiedDateTime")
            tableMapping.ColumnMappings.Add("ClientSiteStatusID", "ClientSiteStatusID")
            tableMapping.ColumnMappings.Add("Hold", "Hold")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[ClientSite] WHERE (([ClientSiteUID] = @Original_ClientSiteUID)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientSiteUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteUID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[ClientSite] ([ClientSiteUID], [ClientSiteID], [ClientSiteNumbe"& _ 
                "r], [SiteName], [SiteAddress], [SiteContactEmail], [SiteNotes], [Contact], [Cont"& _ 
                "actPhone1], [ContactPhone2], [Hold], [ClientSiteStatusID], [CreatedDateTime], [M"& _ 
                "odifiedDateTime]) VALUES (@ClientSiteUID, @ClientSiteID, @ClientSiteNumber, @Sit"& _ 
                "eName, @SiteAddress, @SiteContactEmail, @SiteNotes, @Contact, @ContactPhone1, @C"& _ 
                "ontactPhone2, @Hold, @ClientSiteStatusID, @CreatedDateTime, @ModifiedDateTime);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ClientSiteUID, ClientSiteID, ClientSiteNumber, SiteName, SiteAddress, Si"& _ 
                "teContactEmail, SiteNotes, Contact, ContactPhone1, ContactPhone2, Hold, ClientSi"& _ 
                "teStatusID, CreatedDateTime, ModifiedDateTime FROM ClientSite WHERE (ClientSiteU"& _ 
                "ID = @ClientSiteUID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteNumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteAddress", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteAddress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteContactEmail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteContactEmail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteNotes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteNotes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contact", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContactPhone1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContactPhone1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContactPhone2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContactPhone2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hold", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hold", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteStatusID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[ClientSite] SET [ClientSiteUID] = @ClientSiteUID, [ClientSiteID] = "& _ 
                "@ClientSiteID, [ClientSiteNumber] = @ClientSiteNumber, [SiteName] = @SiteName, ["& _ 
                "SiteAddress] = @SiteAddress, [SiteContactEmail] = @SiteContactEmail, [SiteNotes]"& _ 
                " = @SiteNotes, [Contact] = @Contact, [ContactPhone1] = @ContactPhone1, [ContactP"& _ 
                "hone2] = @ContactPhone2, [Hold] = @Hold, [ClientSiteStatusID] = @ClientSiteStatu"& _ 
                "sID, [CreatedDateTime] = @CreatedDateTime, [ModifiedDateTime] = @ModifiedDateTim"& _ 
                "e WHERE (([ClientSiteUID] = @Original_ClientSiteUID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT ClientSiteUID, Cl"& _ 
                "ientSiteID, ClientSiteNumber, SiteName, SiteAddress, SiteContactEmail, SiteNotes"& _ 
                ", Contact, ContactPhone1, ContactPhone2, Hold, ClientSiteStatusID, CreatedDateTi"& _ 
                "me, ModifiedDateTime FROM ClientSite WHERE (ClientSiteUID = @ClientSiteUID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteNumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteAddress", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteAddress", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteContactEmail", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteContactEmail", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SiteNotes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SiteNotes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contact", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContactPhone1", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContactPhone1", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ContactPhone2", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ContactPhone2", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Hold", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Hold", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteStatusID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_ClientSiteUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteUID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.activiser.My.MySettings.Default.activiserConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(10) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     ClientSiteUID, ClientSiteID, ClientSiteNumber, SiteName, SiteAddress, "& _ 
                "SiteContactEmail, SiteNotes, Contact, ContactPhone1, ContactPhone2, Hold, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                  ClientSiteStatusID, CreatedDateTime, ModifiedDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "      dbo.ClientSite"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     ClientSite.ClientSiteUID, ClientSite.ClientSiteID, ClientSite.ClientSi"& _ 
                "teNumber, ClientSite.SiteName, ClientSite.SiteAddress, ClientSite.SiteContactEma"& _ 
                "il, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ClientSite.SiteNotes, ClientSite.Contact, ClientSite"& _ 
                ".ContactPhone1, ClientSite.ContactPhone2, ClientSite.Hold, ClientSite.ClientSite"& _ 
                "StatusID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ClientSite.CreatedDateTime, ClientSite.Modifie"& _ 
                "dDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         ClientSite INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      dbo.GetCons"& _ 
                "ultantActiveClientSites(@ConsultantUid, NULL) AS ConsultantActiveClientSites ON "& _ 
                ""&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ClientSite.ClientSiteUID = ConsultantActiveClientSites.C"& _ 
                "lientSiteUID"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUid", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     ClientSite.ClientSiteUID, ClientSite.ClientSiteID, ClientSite.ClientSi"& _ 
                "teNumber, ClientSite.SiteName, ClientSite.SiteAddress, ClientSite.SiteContactEma"& _ 
                "il, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ClientSite.SiteNotes, ClientSite.Contact, ClientSite"& _ 
                ".ContactPhone1, ClientSite.ContactPhone2, ClientSite.Hold, ClientSite.ClientSite"& _ 
                "StatusID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ClientSite.CreatedDateTime, ClientSite.Modifie"& _ 
                "dDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         ClientSite INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      dbo.GetCons"& _ 
                "ultantActiveClientSites(@ConsultantUid, @ModifiedSince) AS ConsultantActiveClien"& _ 
                "tSites ON "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ClientSite.ClientSiteUID = ConsultantActiveCli"& _ 
                "entSites.ClientSiteUID"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUid", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedSince", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT     ClientSiteUID, ClientSiteID, ClientSiteNumber, SiteName, SiteAddress, "& _ 
                "SiteContactEmail, SiteNotes, Contact, ContactPhone1, ContactPhone2, Hold, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                  ClientSiteStatusID, CreatedDateTime, ModifiedDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "      ClientSite"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ClientSiteUID = @ClientSiteUid)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteUid", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT     ClientSite.ClientSiteUID, ClientSite.ClientSiteID, ClientSite.ClientSi"& _ 
                "teNumber, ClientSite.SiteName, ClientSite.SiteAddress, ClientSite.SiteContactEma"& _ 
                "il, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ClientSite.SiteNotes, ClientSite.Contact, ClientSite"& _ 
                ".ContactPhone1, ClientSite.ContactPhone2, ClientSite.Hold, ClientSite.ClientSite"& _ 
                "StatusID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      ClientSite.CreatedDateTime, ClientSite.Modifie"& _ 
                "dDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         ClientSite INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Request ON "& _ 
                "ClientSite.ClientSiteUID = Request.ClientSiteUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Request.RequestUID "& _ 
                "= @RequestUid)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestUid", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT     ClientSiteUID, ClientSiteID, ClientSiteNumber, SiteName, SiteAddress, "& _ 
                "SiteContactEmail, SiteNotes, Contact, ContactPhone1, ContactPhone2, Hold, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                  ClientSiteStatusID, CreatedDateTime, ModifiedDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "      ClientSite"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ModifiedDateTime >= @ModifiedSince)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedSince", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT     ClientSiteUID, ClientSiteID, ClientSiteNumber, SiteName, SiteAddress, "& _ 
                "SiteContactEmail, SiteNotes, Contact, ContactPhone1, ContactPhone2, Hold, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                  ClientSiteStatusID, CreatedDateTime, ModifiedDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "      ClientSite"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ClientSiteUID IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          (SELECT"& _ 
                " DISTINCT ClientSiteUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            FROM          Request"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                        WHERE      (AssignedToUID = @ConsultantUID)))"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUID", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT     ClientSiteUID, ClientSiteID, ClientSiteNumber, SiteName, SiteAddress, "& _ 
                "SiteContactEmail, SiteNotes, Contact, ContactPhone1, ContactPhone2, Hold, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                  ClientSiteStatusID, CreatedDateTime, ModifiedDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM   "& _ 
                "      ClientSite"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ClientSiteUID IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                          (SELECT"& _ 
                " DISTINCT ClientSiteUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                            FROM          Request"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"    "& _ 
                "                        WHERE      (AssignedToUID = @ConsultantUID) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "                                           (RequestUID IN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                "                                  (SELECT     ItemUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                         "& _ 
                "                                FROM          ConsultantProfile"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"               "& _ 
                "                                          WHERE      (ItemType = 'R') AND (ItemD"& _ 
                "eleted = 0) AND (ConsultantUID = @ConsultantUID))))) AND "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                " (ModifiedDateTime >= @ModifiedSince)"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUID", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedSince", Global.System.Data.SqlDbType.[Variant], 1024, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT     ClientSiteUID, SiteName, Hold, ClientSiteStatusID, CreatedDateTime, Mo"& _ 
                "difiedDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         ClientSite"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT     ClientSiteUID, SiteName, Hold, ClientSiteStatusID, CreatedDateTime, Mo"& _ 
                "difiedDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         ClientSite"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ModifiedDateTime >= @Modifie"& _ 
                "dSince)"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedSince", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "SELECT     ClientSite.ClientSiteUID, ClientSite.SiteName, ClientSite.Hold, Client"& _ 
                "Site.ClientSiteStatusID, ClientSite.CreatedDateTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      Cli"& _ 
                "entSite.ModifiedDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         ClientSite INNER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "    ClientSiteStatus ON ClientSite.ClientSiteStatusID = ClientSiteStatus.ClientS"& _ 
                "iteStatusID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (ISNULL(ClientSite.Hold, 0) = 0) AND (ClientSiteStatus.Is"& _ 
                "Active <> 0)"
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ClientDataSet.ClientSiteDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ClientDataSet.ClientSiteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ClientDataSet.ClientSiteDataTable = New ClientDataSet.ClientSiteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByActiveForConsultant(ByVal dataTable As ClientDataSet.ClientSiteDataTable, ByVal ConsultantUid As System.Guid) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUid,System.Guid)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByActiveForConsultant(ByVal ConsultantUid As System.Guid) As ClientDataSet.ClientSiteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUid,System.Guid)
            Dim dataTable As ClientDataSet.ClientSiteDataTable = New ClientDataSet.ClientSiteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByActiveForConsultantModifiedSince(ByVal dataTable As ClientDataSet.ClientSiteDataTable, ByVal ConsultantUid As System.Guid, ByVal ModifiedSince As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUid,System.Guid)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ModifiedSince,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByActiveForConsultantModifiedSince(ByVal ConsultantUid As System.Guid, ByVal ModifiedSince As Date) As ClientDataSet.ClientSiteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUid,System.Guid)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ModifiedSince,Date)
            Dim dataTable As ClientDataSet.ClientSiteDataTable = New ClientDataSet.ClientSiteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByClientSiteUid(ByVal dataTable As ClientDataSet.ClientSiteDataTable, ByVal ClientSiteUid As System.Guid) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ClientSiteUid,System.Guid)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByClientSiteUid(ByVal ClientSiteUid As System.Guid) As ClientDataSet.ClientSiteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ClientSiteUid,System.Guid)
            Dim dataTable As ClientDataSet.ClientSiteDataTable = New ClientDataSet.ClientSiteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRequestUid(ByVal dataTable As ClientDataSet.ClientSiteDataTable, ByVal RequestUid As System.Guid) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(RequestUid,System.Guid)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRequestUid(ByVal RequestUid As System.Guid) As ClientDataSet.ClientSiteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(RequestUid,System.Guid)
            Dim dataTable As ClientDataSet.ClientSiteDataTable = New ClientDataSet.ClientSiteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillDetailByModifiedDateTime(ByVal dataTable As ClientDataSet.ClientSiteDataTable, ByVal ModifiedSince As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDetailByModifiedDateTime(ByVal ModifiedSince As Global.System.Nullable(Of Date)) As ClientDataSet.ClientSiteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.ClientSiteDataTable = New ClientDataSet.ClientSiteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillDetailForConsultant(ByVal dataTable As ClientDataSet.ClientSiteDataTable, ByVal ConsultantUID As Global.System.Nullable(Of Global.System.Guid)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (ConsultantUID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUID.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDetailForConsultant(ByVal ConsultantUID As Global.System.Nullable(Of Global.System.Guid)) As ClientDataSet.ClientSiteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (ConsultantUID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUID.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.ClientSiteDataTable = New ClientDataSet.ClientSiteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillDetailForConsultantByModifiedDateTime(ByVal dataTable As ClientDataSet.ClientSiteDataTable, ByVal ConsultantUID As Global.System.Nullable(Of Global.System.Guid), ByVal ModifiedSince As Object) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (ConsultantUID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUID.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ModifiedSince Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ModifiedSince")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ModifiedSince,Object)
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDetailForConsultantByModifiedDateTime(ByVal ConsultantUID As Global.System.Nullable(Of Global.System.Guid), ByVal ModifiedSince As Object) As ClientDataSet.ClientSiteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (ConsultantUID.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUID.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (ModifiedSince Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ModifiedSince")
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ModifiedSince,Object)
            End If
            Dim dataTable As ClientDataSet.ClientSiteDataTable = New ClientDataSet.ClientSiteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillEssentialData(ByVal dataTable As ClientDataSet.ClientSiteDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetEssentialData() As ClientDataSet.ClientSiteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Dim dataTable As ClientDataSet.ClientSiteDataTable = New ClientDataSet.ClientSiteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillEssentialDataByModifiedDateTime(ByVal dataTable As ClientDataSet.ClientSiteDataTable, ByVal ModifiedSince As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetEssentialDataByModifiedDateTime(ByVal ModifiedSince As Global.System.Nullable(Of Date)) As ClientDataSet.ClientSiteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.ClientSiteDataTable = New ClientDataSet.ClientSiteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillEssentialDataForActiveClients(ByVal dataTable As ClientDataSet.ClientSiteDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetEssentialDataForActiveClients() As ClientDataSet.ClientSiteDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            Dim dataTable As ClientDataSet.ClientSiteDataTable = New ClientDataSet.ClientSiteDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ClientDataSet.ClientSiteDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ClientDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "ClientSite")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_ClientSiteUID As System.Guid) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_ClientSiteUID,System.Guid)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal ClientSiteUID As System.Guid, ByVal ClientSiteID As Global.System.Nullable(Of Integer), ByVal ClientSiteNumber As String, ByVal SiteName As String, ByVal SiteAddress As String, ByVal SiteContactEmail As String, ByVal SiteNotes As String, ByVal Contact As String, ByVal ContactPhone1 As String, ByVal ContactPhone2 As String, ByVal Hold As Global.System.Nullable(Of Boolean), ByVal ClientSiteStatusID As Global.System.Nullable(Of Integer), ByVal CreatedDateTime As Global.System.Nullable(Of Date), ByVal ModifiedDateTime As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(ClientSiteUID,System.Guid)
            If (ClientSiteID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(ClientSiteID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ClientSiteNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(ClientSiteNumber,String)
            End If
            If (SiteName Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(SiteName,String)
            End If
            If (SiteAddress Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(SiteAddress,String)
            End If
            If (SiteContactEmail Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(SiteContactEmail,String)
            End If
            If (SiteNotes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(SiteNotes,String)
            End If
            If (Contact Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Contact,String)
            End If
            If (ContactPhone1 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ContactPhone1,String)
            End If
            If (ContactPhone2 Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(ContactPhone2,String)
            End If
            If (Hold.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(Hold.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ClientSiteStatusID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ClientSiteStatusID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CreatedDateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(CreatedDateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ModifiedDateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ModifiedDateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ClientSiteUID As System.Guid, ByVal ClientSiteID As Global.System.Nullable(Of Integer), ByVal ClientSiteNumber As String, ByVal SiteName As String, ByVal SiteAddress As String, ByVal SiteContactEmail As String, ByVal SiteNotes As String, ByVal Contact As String, ByVal ContactPhone1 As String, ByVal ContactPhone2 As String, ByVal Hold As Global.System.Nullable(Of Boolean), ByVal ClientSiteStatusID As Global.System.Nullable(Of Integer), ByVal CreatedDateTime As Global.System.Nullable(Of Date), ByVal ModifiedDateTime As Global.System.Nullable(Of Date), ByVal Original_ClientSiteUID As System.Guid) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(ClientSiteUID,System.Guid)
            If (ClientSiteID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(ClientSiteID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (ClientSiteNumber Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(ClientSiteNumber,String)
            End If
            If (SiteName Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(SiteName,String)
            End If
            If (SiteAddress Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(SiteAddress,String)
            End If
            If (SiteContactEmail Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(SiteContactEmail,String)
            End If
            If (SiteNotes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SiteNotes,String)
            End If
            If (Contact Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Contact,String)
            End If
            If (ContactPhone1 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ContactPhone1,String)
            End If
            If (ContactPhone2 Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(ContactPhone2,String)
            End If
            If (Hold.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(Hold.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (ClientSiteStatusID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ClientSiteStatusID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CreatedDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(CreatedDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ModifiedDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ModifiedDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_ClientSiteUID,System.Guid)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal ClientSiteID As Global.System.Nullable(Of Integer), ByVal ClientSiteNumber As String, ByVal SiteName As String, ByVal SiteAddress As String, ByVal SiteContactEmail As String, ByVal SiteNotes As String, ByVal Contact As String, ByVal ContactPhone1 As String, ByVal ContactPhone2 As String, ByVal Hold As Global.System.Nullable(Of Boolean), ByVal ClientSiteStatusID As Global.System.Nullable(Of Integer), ByVal CreatedDateTime As Global.System.Nullable(Of Date), ByVal ModifiedDateTime As Global.System.Nullable(Of Date), ByVal Original_ClientSiteUID As System.Guid) As Integer
            Return Me.Update(Original_ClientSiteUID, ClientSiteID, ClientSiteNumber, SiteName, SiteAddress, SiteContactEmail, SiteNotes, Contact, ContactPhone1, ContactPhone2, Hold, ClientSiteStatusID, CreatedDateTime, ModifiedDateTime, Original_ClientSiteUID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RequestStatusTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "RequestStatus"
            tableMapping.ColumnMappings.Add("ID", "RequestStatusID")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("DisplayOrder", "DisplayOrder")
            tableMapping.ColumnMappings.Add("IsClientMenuItem", "IsClientMenuItem")
            tableMapping.ColumnMappings.Add("IsReasonRequired", "IsReasonRequired")
            tableMapping.ColumnMappings.Add("IsNewStatus", "IsNewStatus")
            tableMapping.ColumnMappings.Add("IsInProgressStatus", "IsInProgressStatus")
            tableMapping.ColumnMappings.Add("IsCompleteStatus", "IsCompleteStatus")
            tableMapping.ColumnMappings.Add("IsCancelledStatus", "IsCancelledStatus")
            tableMapping.ColumnMappings.Add("RequestStatusID", "RequestStatusID")
            tableMapping.ColumnMappings.Add("CreatedDateTime", "CreatedDateTime")
            tableMapping.ColumnMappings.Add("ModifiedDateTime", "ModifiedDateTime")
            tableMapping.ColumnMappings.Add("Colour", "Colour")
            tableMapping.ColumnMappings.Add("BackColour", "BackColour")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "activiser.RequestStatus_Delete"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RequestStatusID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, "RequestStatusID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "activiser.RequestStatus_Insert"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestStatusID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, "RequestStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DisplayOrder", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, "DisplayOrder", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Colour", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, "Colour", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BackColour", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, "BackColour", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsClientMenuItem", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, "IsClientMenuItem", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsReasonRequired", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, "IsReasonRequired", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNewStatus", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, "IsNewStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsInProgressStatus", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, "IsInProgressStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsCompleteStatus", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, "IsCompleteStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsCancelledStatus", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, "IsCancelledStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "activiser.RequestStatus_Update"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestStatusID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, "RequestStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NVarChar, 50, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DisplayOrder", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, "DisplayOrder", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Colour", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, "Colour", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@BackColour", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, "BackColour", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsClientMenuItem", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, "IsClientMenuItem", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsReasonRequired", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, "IsReasonRequired", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsNewStatus", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, "IsNewStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsInProgressStatus", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, "IsInProgressStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsCompleteStatus", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, "IsCompleteStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsCancelledStatus", Global.System.Data.SqlDbType.Bit, 1, Global.System.Data.ParameterDirection.Input, 1, 0, "IsCancelledStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RequestStatusID", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.Input, 10, 0, "RequestStatusID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.activiser.My.MySettings.Default.activiserConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "activiser.RequestStatus_Select"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "activiser.RequestStatus_Select_ByModifiedDateTime"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedSince", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 23, 3, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ClientDataSet.RequestStatusDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ClientDataSet.RequestStatusDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ClientDataSet.RequestStatusDataTable = New ClientDataSet.RequestStatusDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByModifiedDateTime(ByVal dataTable As ClientDataSet.RequestStatusDataTable, ByVal ModifiedSince As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByModifiedDateTime(ByVal ModifiedSince As Global.System.Nullable(Of Date)) As ClientDataSet.RequestStatusDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.RequestStatusDataTable = New ClientDataSet.RequestStatusDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ClientDataSet.RequestStatusDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ClientDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "RequestStatus")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_RequestStatusID As Global.System.Nullable(Of Integer)) As Integer
            If (Original_RequestStatusID.HasValue = true) Then
                Me.Adapter.DeleteCommand.Parameters(1).Value = CType(Original_RequestStatusID.Value,Integer)
            Else
                Me.Adapter.DeleteCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal RequestStatusID As Global.System.Nullable(Of Integer), ByVal Description As String, ByVal DisplayOrder As Global.System.Nullable(Of Integer), ByVal Colour As Global.System.Nullable(Of Integer), ByVal BackColour As Global.System.Nullable(Of Integer), ByVal IsClientMenuItem As Global.System.Nullable(Of Boolean), ByVal IsReasonRequired As Global.System.Nullable(Of Boolean), ByVal IsNewStatus As Global.System.Nullable(Of Boolean), ByVal IsInProgressStatus As Global.System.Nullable(Of Boolean), ByVal IsCompleteStatus As Global.System.Nullable(Of Boolean), ByVal IsCancelledStatus As Global.System.Nullable(Of Boolean), ByVal CreatedDateTime As Global.System.Nullable(Of Date), ByVal ModifiedDateTime As Global.System.Nullable(Of Date)) As Integer
            If (RequestStatusID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(RequestStatusID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Description Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(Description,String)
            End If
            If (DisplayOrder.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(DisplayOrder.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Colour.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Colour.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (BackColour.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(BackColour.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (IsClientMenuItem.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(IsClientMenuItem.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (IsReasonRequired.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(IsReasonRequired.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (IsNewStatus.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(IsNewStatus.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (IsInProgressStatus.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(IsInProgressStatus.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (IsCompleteStatus.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(IsCompleteStatus.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (IsCancelledStatus.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(IsCancelledStatus.Value,Boolean)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CreatedDateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(CreatedDateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ModifiedDateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ModifiedDateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RequestStatusID As Global.System.Nullable(Of Integer), ByVal Description As String, ByVal DisplayOrder As Global.System.Nullable(Of Integer), ByVal Colour As Global.System.Nullable(Of Integer), ByVal BackColour As Global.System.Nullable(Of Integer), ByVal IsClientMenuItem As Global.System.Nullable(Of Boolean), ByVal IsReasonRequired As Global.System.Nullable(Of Boolean), ByVal IsNewStatus As Global.System.Nullable(Of Boolean), ByVal IsInProgressStatus As Global.System.Nullable(Of Boolean), ByVal IsCompleteStatus As Global.System.Nullable(Of Boolean), ByVal IsCancelledStatus As Global.System.Nullable(Of Boolean), ByVal CreatedDateTime As Global.System.Nullable(Of Date), ByVal ModifiedDateTime As Global.System.Nullable(Of Date), ByVal Original_RequestStatusID As Global.System.Nullable(Of Integer)) As Integer
            If (RequestStatusID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(RequestStatusID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Description Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(Description,String)
            End If
            If (DisplayOrder.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(DisplayOrder.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (Colour.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Colour.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (BackColour.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(BackColour.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (IsClientMenuItem.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(IsClientMenuItem.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (IsReasonRequired.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(IsReasonRequired.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (IsNewStatus.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(IsNewStatus.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (IsInProgressStatus.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(IsInProgressStatus.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (IsCompleteStatus.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(IsCompleteStatus.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (IsCancelledStatus.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(IsCancelledStatus.Value,Boolean)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CreatedDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(CreatedDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ModifiedDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ModifiedDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (Original_RequestStatusID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(Original_RequestStatusID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Description As String, ByVal DisplayOrder As Global.System.Nullable(Of Integer), ByVal Colour As Global.System.Nullable(Of Integer), ByVal BackColour As Global.System.Nullable(Of Integer), ByVal IsClientMenuItem As Global.System.Nullable(Of Boolean), ByVal IsReasonRequired As Global.System.Nullable(Of Boolean), ByVal IsNewStatus As Global.System.Nullable(Of Boolean), ByVal IsInProgressStatus As Global.System.Nullable(Of Boolean), ByVal IsCompleteStatus As Global.System.Nullable(Of Boolean), ByVal IsCancelledStatus As Global.System.Nullable(Of Boolean), ByVal CreatedDateTime As Global.System.Nullable(Of Date), ByVal ModifiedDateTime As Global.System.Nullable(Of Date), ByVal Original_RequestStatusID As Global.System.Nullable(Of Integer)) As Integer
            Return Me.Update(Original_RequestStatusID, Description, DisplayOrder, Colour, BackColour, IsClientMenuItem, IsReasonRequired, IsNewStatus, IsInProgressStatus, IsCompleteStatus, IsCancelledStatus, CreatedDateTime, ModifiedDateTime, Original_RequestStatusID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class RequestTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Request"
            tableMapping.ColumnMappings.Add("UID", "RequestUID")
            tableMapping.ColumnMappings.Add("ID", "RequestID")
            tableMapping.ColumnMappings.Add("RequestNumber", "RequestNumber")
            tableMapping.ColumnMappings.Add("ConsultantRID", "ConsultantRID")
            tableMapping.ColumnMappings.Add("ConsultantStatusID", "ConsultantStatusID")
            tableMapping.ColumnMappings.Add("ClientSiteUID", "ClientSiteUID")
            tableMapping.ColumnMappings.Add("AssignedToUID", "AssignedToUID")
            tableMapping.ColumnMappings.Add("RequestStatusID", "RequestStatusID")
            tableMapping.ColumnMappings.Add("NextActionDate", "NextActionDate")
            tableMapping.ColumnMappings.Add("CompletedDate", "CompletedDate")
            tableMapping.ColumnMappings.Add("RequestUID", "RequestUID")
            tableMapping.ColumnMappings.Add("RequestID", "RequestID")
            tableMapping.ColumnMappings.Add("ModifiedDateTime", "ModifiedDateTime")
            tableMapping.ColumnMappings.Add("CreatedDateTime", "CreatedDateTime")
            tableMapping.ColumnMappings.Add("Contact", "Contact")
            tableMapping.ColumnMappings.Add("ShortDescription", "ShortDescription")
            tableMapping.ColumnMappings.Add("LongDescription", "LongDescription")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[Request] WHERE (([RequestUID] = @Original_RequestUID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RequestUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestUID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[Request] ([RequestUID], [RequestID], [RequestNumber], [Consult"& _ 
                "antRID], [ConsultantStatusID], [ClientSiteUID], [AssignedToUID], [Contact], [Sho"& _ 
                "rtDescription], [LongDescription], [RequestStatusID], [NextActionDate], [Complet"& _ 
                "edDate], [ModifiedDateTime], [CreatedDateTime]) VALUES (@RequestUID, @RequestID,"& _ 
                " @RequestNumber, @ConsultantRID, @ConsultantStatusID, @ClientSiteUID, @AssignedT"& _ 
                "oUID, @Contact, @ShortDescription, @LongDescription, @RequestStatusID, @NextActi"& _ 
                "onDate, @CompletedDate, @ModifiedDateTime, @CreatedDateTime);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RequestUID"& _ 
                ", RequestID, RequestNumber, ConsultantRID, ConsultantStatusID, ClientSiteUID, As"& _ 
                "signedToUID, Contact, ShortDescription, LongDescription, RequestStatusID, NextAc"& _ 
                "tionDate, CompletedDate, ModifiedDateTime, CreatedDateTime FROM Request WHERE (R"& _ 
                "equestUID = @RequestUID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestNumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantRID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantRID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantStatusID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssignedToUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedToUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contact", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ShortDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ShortDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LongDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LongDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestStatusID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NextActionDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NextActionDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CompletedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CompletedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[Request] SET [RequestUID] = @RequestUID, [RequestID] = @RequestID, "& _ 
                "[RequestNumber] = @RequestNumber, [ConsultantRID] = @ConsultantRID, [ConsultantS"& _ 
                "tatusID] = @ConsultantStatusID, [ClientSiteUID] = @ClientSiteUID, [AssignedToUID"& _ 
                "] = @AssignedToUID, [Contact] = @Contact, [ShortDescription] = @ShortDescription"& _ 
                ", [LongDescription] = @LongDescription, [RequestStatusID] = @RequestStatusID, [N"& _ 
                "extActionDate] = @NextActionDate, [CompletedDate] = @CompletedDate, [ModifiedDat"& _ 
                "eTime] = @ModifiedDateTime, [CreatedDateTime] = @CreatedDateTime WHERE (([Reques"& _ 
                "tUID] = @Original_RequestUID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT RequestUID, RequestID, RequestNumber, Co"& _ 
                "nsultantRID, ConsultantStatusID, ClientSiteUID, AssignedToUID, Contact, ShortDes"& _ 
                "cription, LongDescription, RequestStatusID, NextActionDate, CompletedDate, Modif"& _ 
                "iedDateTime, CreatedDateTime FROM Request WHERE (RequestUID = @RequestUID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestNumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantRID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantRID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantStatusID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@AssignedToUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "AssignedToUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Contact", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Contact", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ShortDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ShortDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LongDescription", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LongDescription", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestStatusID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@NextActionDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "NextActionDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CompletedDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CompletedDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_RequestUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestUID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.activiser.My.MySettings.Default.activiserConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(10) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     RequestUID, RequestID, RequestNumber, ConsultantRID, ConsultantStatusI"& _ 
                "D, ClientSiteUID, AssignedToUID, Contact, ShortDescription, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "    LongDescription, RequestStatusID, NextActionDate, CompletedDate, ModifiedDat"& _ 
                "eTime, CreatedDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         dbo.Request"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT     Request.RequestUID, Request.RequestID, Request.RequestNumber, Request."& _ 
                "ConsultantRID, Request.ConsultantStatusID, Request.ClientSiteUID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "          Request.AssignedToUID, Request.Contact, Request.ShortDescription, Requ"& _ 
                "est.LongDescription, Request.RequestStatusID, Request.NextActionDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "              Request.CompletedDate, Request.ModifiedDateTime, Request.CreatedDa"& _ 
                "teTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Request LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      RequestStatu"& _ 
                "s ON Request.RequestStatusID = RequestStatus.RequestStatusID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (Request"& _ 
                "Status.IsNewStatus <> 0) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      (RequestStatus.IsInProgressSt"& _ 
                "atus <> 0) AND (Request.ClientSiteUID = @ClientSiteUid)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteUid", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT     Request.RequestUID, Request.RequestID, Request.RequestNumber, Request."& _ 
                "ConsultantRID, Request.ConsultantStatusID, Request.ClientSiteUID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "          Request.AssignedToUID, Request.Contact, Request.ShortDescription, Requ"& _ 
                "est.LongDescription, Request.RequestStatusID, Request.NextActionDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "              Request.CompletedDate, Request.ModifiedDateTime, Request.CreatedDa"& _ 
                "teTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Request LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      dbo.GetConsu"& _ 
                "ltantProfileItems(@ConsultantUid, 'R') AS ConsultantRequestItems ON "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"          "& _ 
                "            Request.RequestUID = ConsultantRequestItems.ItemUID LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      RequestStatus ON Request.RequestStatusID = RequestStatus."& _ 
                "RequestStatusID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (RequestStatus.IsNewStatus <> 0) AND (Request.ClientS"& _ 
                "iteUID = @ClientSiteUid) AND (ConsultantRequestItems.ItemUID IS NULL) OR"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"      "& _ 
                "                (RequestStatus.IsInProgressStatus <> 0) AND (Request.ClientSiteU"& _ 
                "ID = @ClientSiteUid) AND (ConsultantRequestItems.ItemUID IS NULL)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUid", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteUid", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT AssignedToUID, ClientSiteUID, CompletedDate, ConsultantRID, ConsultantStat"& _ 
                "usID, Contact, CreatedDateTime, LongDescription, ModifiedDateTime, NextActionDat"& _ 
                "e, RequestID, RequestNumber, RequestStatusID, RequestUID, ShortDescription FROM "& _ 
                "Request WHERE (RequestUID IN (SELECT DISTINCT RequestUID FROM EventLog WHERE (UT"& _ 
                "CEventTime >= @Since))) OR (ModifiedDateTime >= @Since)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Since", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT AssignedToUID, ClientSiteUID, CompletedDate, ConsultantRID, ConsultantStat"& _ 
                "usID, Contact, CreatedDateTime, LongDescription, ModifiedDateTime, NextActionDat"& _ 
                "e, RequestID, RequestNumber, RequestStatusID, RequestUID, ShortDescription FROM "& _ 
                "Request WHERE (ModifiedDateTime >= @ModifiedSince) OR (RequestUID IN (SELECT Req"& _ 
                "uestUID FROM Job WHERE (ModifiedDateTime >= @ModifiedSince)))"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedSince", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT AssignedToUID, ClientSiteUID, CompletedDate, ConsultantRID, ConsultantStat"& _ 
                "usID, Contact, CreatedDateTime, LongDescription, ModifiedDateTime, NextActionDat"& _ 
                "e, RequestID, RequestNumber, RequestStatusID, RequestUID, ShortDescription FROM "& _ 
                "Request WHERE (RequestUID = @RequestUid)"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestUid", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT     RequestUID, RequestID, RequestNumber, ConsultantRID, ConsultantStatusI"& _ 
                "D, ClientSiteUID, AssignedToUID, Contact, ShortDescription, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "    LongDescription, RequestStatusID, NextActionDate, CompletedDate, ModifiedDat"& _ 
                "eTime, CreatedDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         dbo.GetClientSiteRequestHistory(@ClientSite"& _ 
                "Uid, @ConsultantUid, @HistoryDays, @HistoryNumber) AS Request"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteUid", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUid", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HistoryDays", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HistoryNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT     Request.RequestUID, Request.RequestID, Request.RequestNumber, Request."& _ 
                "ConsultantRID, Request.ConsultantStatusID, Request.ClientSiteUID, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"            "& _ 
                "          Request.AssignedToUID, Request.Contact, Request.LongDescription, Reque"& _ 
                "st.ShortDescription, Request.RequestStatusID, Request.NextActionDate, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"        "& _ 
                "              Request.CompletedDate, Request.CreatedDateTime, Request.ModifiedDa"& _ 
                "teTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         Request LEFT OUTER JOIN"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                      viewActiveRe"& _ 
                "questList ON Request.RequestUID = viewActiveRequestList.RequestUID"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"WHERE     (N"& _ 
                "OT (viewActiveRequestList.RequestUID IS NULL))"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT AssignedToUID, ClientSiteUID, CompletedDate, ConsultantRID, ConsultantStat"& _ 
                "usID, Contact, CreatedDateTime, LongDescription, ModifiedDateTime, NextActionDat"& _ 
                "e, RequestID, RequestNumber, RequestStatusID, RequestUID, ShortDescription FROM "& _ 
                "Request WHERE (RequestUID IN (SELECT Requestuid FROM dbo.GetConsultantActiveRequ"& _ 
                "ests(@ConsultantUID, DEFAULT) AS ConsultantActiveRequests)) OR (RequestUID IN (S"& _ 
                "ELECT ItemUID FROM dbo.GetConsultantProfileItems(@ConsultantUID, 'R') AS Consult"& _ 
                "antProfileRequests))"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(9).Connection = Me.Connection
            Me._commandCollection(9).CommandText = "SELECT AssignedToUID, ClientSiteUID, CompletedDate, ConsultantRID, ConsultantStat"& _ 
                "usID, Contact, CreatedDateTime, LongDescription, ModifiedDateTime, NextActionDat"& _ 
                "e, RequestID, RequestNumber, RequestStatusID, RequestUID, ShortDescription FROM "& _ 
                "Request WHERE (RequestUID IN (SELECT Requestuid FROM dbo.GetConsultantActiveRequ"& _ 
                "ests(@ConsultantUID, DEFAULT) AS ConsultantActiveRequests)) AND (ModifiedDateTim"& _ 
                "e >= @ModifiedSince) OR (RequestUID IN (SELECT ItemUID FROM dbo.GetConsultantPro"& _ 
                "fileItems(@ConsultantUID, 'R') AS ConsultantProfileRequests)) AND (ModifiedDateT"& _ 
                "ime >= @ModifiedSince)"
            Me._commandCollection(9).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(9).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedSince", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(10) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(10).Connection = Me.Connection
            Me._commandCollection(10).CommandText = "SELECT Request.AssignedToUID, Request.ClientSiteUID, Request.CompletedDate, Reque"& _ 
                "st.ConsultantRID, Request.ConsultantStatusID, Request.Contact, Request.CreatedDa"& _ 
                "teTime, Request.LongDescription, Request.ModifiedDateTime, Request.NextActionDat"& _ 
                "e, Request.RequestID, Request.RequestNumber, Request.RequestStatusID, Request.Re"& _ 
                "questUID, Request.ShortDescription FROM Request INNER JOIN RequestStatus ON Requ"& _ 
                "est.RequestStatusID = RequestStatus.RequestStatusID WHERE (RequestStatus.IsNewSt"& _ 
                "atus <> 0) OR (RequestStatus.IsInProgressStatus <> 0)"
            Me._commandCollection(10).CommandType = Global.System.Data.CommandType.Text
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ClientDataSet.RequestDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ClientDataSet.RequestDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ClientDataSet.RequestDataTable = New ClientDataSet.RequestDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillActiveByClientSite(ByVal dataTable As ClientDataSet.RequestDataTable, ByVal ClientSiteUid As Global.System.Nullable(Of Global.System.Guid)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ClientSiteUid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ClientSiteUid.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetActiveDataByClientSite(ByVal ClientSiteUid As Global.System.Nullable(Of Global.System.Guid)) As ClientDataSet.RequestDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (ClientSiteUid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ClientSiteUid.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.RequestDataTable = New ClientDataSet.RequestDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillActiveByClientSiteForConsultant(ByVal dataTable As ClientDataSet.RequestDataTable, ByVal ConsultantUid As System.Guid, ByVal ClientSiteUid As Global.System.Nullable(Of Global.System.Guid)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUid,System.Guid)
            If (ClientSiteUid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ClientSiteUid.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetActiveByClientSiteForConsultant(ByVal ConsultantUid As System.Guid, ByVal ClientSiteUid As Global.System.Nullable(Of Global.System.Guid)) As ClientDataSet.RequestDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUid,System.Guid)
            If (ClientSiteUid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ClientSiteUid.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.RequestDataTable = New ClientDataSet.RequestDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByEventTime(ByVal dataTable As ClientDataSet.RequestDataTable, ByVal Since As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Since.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Since.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByEventTime(ByVal Since As Global.System.Nullable(Of Date)) As ClientDataSet.RequestDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (Since.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Since.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.RequestDataTable = New ClientDataSet.RequestDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByModifiedDateTime(ByVal dataTable As ClientDataSet.RequestDataTable, ByVal ModifiedSince As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByModifiedDateTime(ByVal ModifiedSince As Global.System.Nullable(Of Date)) As ClientDataSet.RequestDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.RequestDataTable = New ClientDataSet.RequestDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRequestUid(ByVal dataTable As ClientDataSet.RequestDataTable, ByVal RequestUid As System.Guid) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(RequestUid,System.Guid)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRequestUid(ByVal RequestUid As System.Guid) As ClientDataSet.RequestDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(RequestUid,System.Guid)
            Dim dataTable As ClientDataSet.RequestDataTable = New ClientDataSet.RequestDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillClientSiteHistoryForConsultant(ByVal dataTable As ClientDataSet.RequestDataTable, ByVal ClientSiteUid As System.Guid, ByVal ConsultantUid As System.Guid, ByVal HistoryDays As Integer, ByVal HistoryNumber As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ClientSiteUid,System.Guid)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ConsultantUid,System.Guid)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(HistoryDays,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(HistoryNumber,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetClientSiteHistoryForConsultant(ByVal ClientSiteUid As System.Guid, ByVal ConsultantUid As System.Guid, ByVal HistoryDays As Integer, ByVal HistoryNumber As Integer) As ClientDataSet.RequestDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ClientSiteUid,System.Guid)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ConsultantUid,System.Guid)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(HistoryDays,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(HistoryNumber,Integer)
            Dim dataTable As ClientDataSet.RequestDataTable = New ClientDataSet.RequestDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillForConsole(ByVal dataTable As ClientDataSet.RequestDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataForConsole() As ClientDataSet.RequestDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Dim dataTable As ClientDataSet.RequestDataTable = New ClientDataSet.RequestDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillForConsultant(ByVal dataTable As ClientDataSet.RequestDataTable, ByVal ConsultantUID As System.Guid) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUID,System.Guid)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataForConsultant(ByVal ConsultantUID As System.Guid) As ClientDataSet.RequestDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUID,System.Guid)
            Dim dataTable As ClientDataSet.RequestDataTable = New ClientDataSet.RequestDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillForConsultantByModifiedDateTime(ByVal dataTable As ClientDataSet.RequestDataTable, ByVal ConsultantUID As System.Guid, ByVal ModifiedSince As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUID,System.Guid)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataForConsultantByModifiedDateTime(ByVal ConsultantUID As System.Guid, ByVal ModifiedSince As Global.System.Nullable(Of Date)) As ClientDataSet.RequestDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(9)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUID,System.Guid)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.RequestDataTable = New ClientDataSet.RequestDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillShortRequestList(ByVal dataTable As ClientDataSet.RequestDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetShortRequestList() As ClientDataSet.RequestDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(10)
            Dim dataTable As ClientDataSet.RequestDataTable = New ClientDataSet.RequestDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ClientDataSet.RequestDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ClientDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Request")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_RequestUID As System.Guid) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_RequestUID,System.Guid)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal RequestUID As System.Guid, ByVal RequestID As Global.System.Nullable(Of Integer), ByVal RequestNumber As String, ByVal ConsultantRID As Global.System.Nullable(Of Integer), ByVal ConsultantStatusID As Global.System.Nullable(Of Integer), ByVal ClientSiteUID As Global.System.Nullable(Of Global.System.Guid), ByVal AssignedToUID As Global.System.Nullable(Of Global.System.Guid), ByVal Contact As String, ByVal ShortDescription As String, ByVal LongDescription As String, ByVal RequestStatusID As Global.System.Nullable(Of Integer), ByVal NextActionDate As Global.System.Nullable(Of Date), ByVal CompletedDate As Global.System.Nullable(Of Date), ByVal ModifiedDateTime As Global.System.Nullable(Of Date), ByVal CreatedDateTime As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(RequestUID,System.Guid)
            If (RequestID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(RequestID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (RequestNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(RequestNumber,String)
            End If
            If (ConsultantRID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ConsultantRID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ConsultantStatusID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ConsultantStatusID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ClientSiteUID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ClientSiteUID.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (AssignedToUID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(AssignedToUID.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Contact Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(Contact,String)
            End If
            If (ShortDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(ShortDescription,String)
            End If
            If (LongDescription Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(LongDescription,String)
            End If
            If (RequestStatusID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(RequestStatusID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (NextActionDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(NextActionDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CompletedDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(CompletedDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ModifiedDateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(ModifiedDateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CreatedDateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(CreatedDateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal RequestUID As System.Guid,  _
                    ByVal RequestID As Global.System.Nullable(Of Integer),  _
                    ByVal RequestNumber As String,  _
                    ByVal ConsultantRID As Global.System.Nullable(Of Integer),  _
                    ByVal ConsultantStatusID As Global.System.Nullable(Of Integer),  _
                    ByVal ClientSiteUID As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal AssignedToUID As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal Contact As String,  _
                    ByVal ShortDescription As String,  _
                    ByVal LongDescription As String,  _
                    ByVal RequestStatusID As Global.System.Nullable(Of Integer),  _
                    ByVal NextActionDate As Global.System.Nullable(Of Date),  _
                    ByVal CompletedDate As Global.System.Nullable(Of Date),  _
                    ByVal ModifiedDateTime As Global.System.Nullable(Of Date),  _
                    ByVal CreatedDateTime As Global.System.Nullable(Of Date),  _
                    ByVal Original_RequestUID As System.Guid) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(RequestUID,System.Guid)
            If (RequestID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(RequestID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (RequestNumber Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(RequestNumber,String)
            End If
            If (ConsultantRID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ConsultantRID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ConsultantStatusID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ConsultantStatusID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ClientSiteUID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ClientSiteUID.Value,System.Guid)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (AssignedToUID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(AssignedToUID.Value,System.Guid)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (Contact Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Contact,String)
            End If
            If (ShortDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ShortDescription,String)
            End If
            If (LongDescription Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(LongDescription,String)
            End If
            If (RequestStatusID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(RequestStatusID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            End If
            If (NextActionDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(NextActionDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            End If
            If (CompletedDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(CompletedDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            End If
            If (ModifiedDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(ModifiedDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (CreatedDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(CreatedDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_RequestUID,System.Guid)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal RequestID As Global.System.Nullable(Of Integer), ByVal RequestNumber As String, ByVal ConsultantRID As Global.System.Nullable(Of Integer), ByVal ConsultantStatusID As Global.System.Nullable(Of Integer), ByVal ClientSiteUID As Global.System.Nullable(Of Global.System.Guid), ByVal AssignedToUID As Global.System.Nullable(Of Global.System.Guid), ByVal Contact As String, ByVal ShortDescription As String, ByVal LongDescription As String, ByVal RequestStatusID As Global.System.Nullable(Of Integer), ByVal NextActionDate As Global.System.Nullable(Of Date), ByVal CompletedDate As Global.System.Nullable(Of Date), ByVal ModifiedDateTime As Global.System.Nullable(Of Date), ByVal CreatedDateTime As Global.System.Nullable(Of Date), ByVal Original_RequestUID As System.Guid) As Integer
            Return Me.Update(Original_RequestUID, RequestID, RequestNumber, ConsultantRID, ConsultantStatusID, ClientSiteUID, AssignedToUID, Contact, ShortDescription, LongDescription, RequestStatusID, NextActionDate, CompletedDate, ModifiedDateTime, CreatedDateTime, Original_RequestUID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class JobStatusTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "JobStatus"
            tableMapping.ColumnMappings.Add("JobStatusID", "JobStatusID")
            tableMapping.ColumnMappings.Add("Description", "Description")
            tableMapping.ColumnMappings.Add("CreatedDateTime", "CreatedDateTime")
            tableMapping.ColumnMappings.Add("ModifiedDateTime", "ModifiedDateTime")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[JobStatus] WHERE (([JobStatusID] = @Original_JobStatusID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_JobStatusID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobStatusID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[JobStatus] ([JobStatusID], [Description], [CreatedDateTime], ["& _ 
                "ModifiedDateTime]) VALUES (@JobStatusID, @Description, @CreatedDateTime, @Modifi"& _ 
                "edDateTime);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT JobStatusID, Description, CreatedDateTime, ModifiedDateTime"& _ 
                " FROM JobStatus WHERE (JobStatusID = @JobStatusID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobStatusID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[JobStatus] SET [JobStatusID] = @JobStatusID, [Description] = @Descr"& _ 
                "iption, [CreatedDateTime] = @CreatedDateTime, [ModifiedDateTime] = @ModifiedDate"& _ 
                "Time WHERE (([JobStatusID] = @Original_JobStatusID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT JobStatusID, Descr"& _ 
                "iption, CreatedDateTime, ModifiedDateTime FROM JobStatus WHERE (JobStatusID = @J"& _ 
                "obStatusID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobStatusID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Description", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Description", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_JobStatusID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobStatusID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.activiser.My.MySettings.Default.activiserConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     JobStatusID, Description, CreatedDateTime, ModifiedDateTime"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM     "& _ 
                "    dbo.JobStatus"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CreatedDateTime, Description, JobStatusID, ModifiedDateTime FROM JobStatus"& _ 
                " WHERE (ModifiedDateTime >= @ModifiedSince)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedSince", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ClientDataSet.JobStatusDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ClientDataSet.JobStatusDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ClientDataSet.JobStatusDataTable = New ClientDataSet.JobStatusDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByModifiedDateTime(ByVal dataTable As ClientDataSet.JobStatusDataTable, ByVal ModifiedSince As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByModifiedDateTime(ByVal ModifiedSince As Date) As ClientDataSet.JobStatusDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince,Date)
            Dim dataTable As ClientDataSet.JobStatusDataTable = New ClientDataSet.JobStatusDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ClientDataSet.JobStatusDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ClientDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "JobStatus")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_JobStatusID As Integer) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_JobStatusID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal JobStatusID As Integer, ByVal Description As String, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(JobStatusID,Integer)
            If (Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Description")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(Description,String)
            End If
            Me.Adapter.InsertCommand.Parameters(2).Value = CType(CreatedDateTime,Date)
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(ModifiedDateTime,Date)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal JobStatusID As Integer, ByVal Description As String, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date, ByVal Original_JobStatusID As Integer) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(JobStatusID,Integer)
            If (Description Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Description")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(Description,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(2).Value = CType(CreatedDateTime,Date)
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ModifiedDateTime,Date)
            Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Original_JobStatusID,Integer)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal Description As String, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date, ByVal Original_JobStatusID As Integer) As Integer
            Return Me.Update(Original_JobStatusID, Description, CreatedDateTime, ModifiedDateTime, Original_JobStatusID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class JobTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "Job"
            tableMapping.ColumnMappings.Add("JobUID", "JobUID")
            tableMapping.ColumnMappings.Add("JobID", "JobID")
            tableMapping.ColumnMappings.Add("JobNumber", "JobNumber")
            tableMapping.ColumnMappings.Add("ConsultantJobID", "ConsultantJobID")
            tableMapping.ColumnMappings.Add("ConsultantUID", "ConsultantUID")
            tableMapping.ColumnMappings.Add("ClientSiteUID", "ClientSiteUID")
            tableMapping.ColumnMappings.Add("RequestUID", "RequestUID")
            tableMapping.ColumnMappings.Add("JobDate", "JobDate")
            tableMapping.ColumnMappings.Add("StartTime", "StartTime")
            tableMapping.ColumnMappings.Add("FinishTime", "FinishTime")
            tableMapping.ColumnMappings.Add("JobDetails", "JobDetails")
            tableMapping.ColumnMappings.Add("JobNotes", "JobNotes")
            tableMapping.ColumnMappings.Add("Equipment", "Equipment")
            tableMapping.ColumnMappings.Add("JobStatusID", "JobStatusID")
            tableMapping.ColumnMappings.Add("ReturnDate", "ReturnDate")
            tableMapping.ColumnMappings.Add("Signatory", "Signatory")
            tableMapping.ColumnMappings.Add("Signature", "Signature")
            tableMapping.ColumnMappings.Add("Email", "Email")
            tableMapping.ColumnMappings.Add("EmailStatus", "EmailStatus")
            tableMapping.ColumnMappings.Add("CreatedDateTime", "CreatedDateTime")
            tableMapping.ColumnMappings.Add("ModifiedDateTime", "ModifiedDateTime")
            tableMapping.ColumnMappings.Add("MinutesTravelled", "MinutesTravelled")
            tableMapping.ColumnMappings.Add("Flag", "Flag")
            tableMapping.ColumnMappings.Add("TrackingInfo", "TrackingInfo")
            tableMapping.ColumnMappings.Add("TrackingTimestamp", "TrackingTimestamp")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [Job] WHERE (([JobUID] = @Original_JobUID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_JobUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobUID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [Job] ([JobUID], [JobID], [JobNumber], [ConsultantJobID], [Consultant"& _ 
                "UID], [ClientSiteUID], [RequestUID], [JobDate], [StartTime], [FinishTime], [JobD"& _ 
                "etails], [JobNotes], [Equipment], [JobStatusID], [ReturnDate], [Signatory], [Sig"& _ 
                "nature], [Email], [MinutesTravelled], [EmailStatus], [Flag], [CreatedDateTime], "& _ 
                "[ModifiedDateTime], [TrackingTimestamp], [TrackingInfo]) VALUES (@JobUID, @JobID"& _ 
                ", @JobNumber, @ConsultantJobID, @ConsultantUID, @ClientSiteUID, @RequestUID, @Jo"& _ 
                "bDate, @StartTime, @FinishTime, @JobDetails, @JobNotes, @Equipment, @JobStatusID"& _ 
                ", @ReturnDate, @Signatory, @Signature, @Email, @MinutesTravelled, @EmailStatus, "& _ 
                "@Flag, @CreatedDateTime, @ModifiedDateTime, @TrackingTimestamp, @TrackingInfo);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT JobUID, JobID, JobNumber, ConsultantJobID, ConsultantUID, ClientSiteUID,"& _ 
                " RequestUID, JobDate, StartTime, FinishTime, JobDetails, JobNotes, Equipment, Jo"& _ 
                "bStatusID, ReturnDate, Signatory, Signature, Email, MinutesTravelled, EmailStatu"& _ 
                "s, Flag, CreatedDateTime, ModifiedDateTime, TrackingTimestamp, TrackingInfo FROM"& _ 
                " Job WHERE (JobUID = @JobUID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobNumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantJobID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantJobID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinishTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinishTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobDetails", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobDetails", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobNotes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobNotes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Equipment", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Equipment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobStatusID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReturnDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReturnDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Signatory", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Signatory", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Signature", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Signature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Email", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinutesTravelled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinutesTravelled", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmailStatus", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flag", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flag", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TrackingTimestamp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TrackingTimestamp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TrackingInfo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TrackingInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [Job] SET [JobUID] = @JobUID, [JobID] = @JobID, [JobNumber] = @JobNumber, "& _ 
                "[ConsultantJobID] = @ConsultantJobID, [ConsultantUID] = @ConsultantUID, [ClientS"& _ 
                "iteUID] = @ClientSiteUID, [RequestUID] = @RequestUID, [JobDate] = @JobDate, [Sta"& _ 
                "rtTime] = @StartTime, [FinishTime] = @FinishTime, [JobDetails] = @JobDetails, [J"& _ 
                "obNotes] = @JobNotes, [Equipment] = @Equipment, [JobStatusID] = @JobStatusID, [R"& _ 
                "eturnDate] = @ReturnDate, [Signatory] = @Signatory, [Signature] = @Signature, [E"& _ 
                "mail] = @Email, [MinutesTravelled] = @MinutesTravelled, [EmailStatus] = @EmailSt"& _ 
                "atus, [Flag] = @Flag, [CreatedDateTime] = @CreatedDateTime, [ModifiedDateTime] ="& _ 
                " @ModifiedDateTime, [TrackingTimestamp] = @TrackingTimestamp, [TrackingInfo] = @"& _ 
                "TrackingInfo WHERE (([JobUID] = @Original_JobUID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT JobUID, JobID, JobNu"& _ 
                "mber, ConsultantJobID, ConsultantUID, ClientSiteUID, RequestUID, JobDate, StartT"& _ 
                "ime, FinishTime, JobDetails, JobNotes, Equipment, JobStatusID, ReturnDate, Signa"& _ 
                "tory, Signature, Email, MinutesTravelled, EmailStatus, Flag, CreatedDateTime, Mo"& _ 
                "difiedDateTime, TrackingTimestamp, TrackingInfo FROM Job WHERE (JobUID = @JobUID"& _ 
                ")"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobNumber", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobNumber", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantJobID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantJobID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ConsultantUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ClientSiteUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@StartTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "StartTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FinishTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FinishTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobDetails", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobDetails", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobNotes", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobNotes", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Equipment", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Equipment", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobStatusID", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobStatusID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ReturnDate", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ReturnDate", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Signatory", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Signatory", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Signature", Global.System.Data.SqlDbType.VarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Signature", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Email", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Email", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinutesTravelled", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinutesTravelled", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@EmailStatus", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "EmailStatus", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Flag", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Flag", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TrackingTimestamp", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TrackingTimestamp", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TrackingInfo", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TrackingInfo", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_JobUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "JobUID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.activiser.My.MySettings.Default.activiserConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(8) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT JobUID, JobID, JobNumber, ConsultantJobID, ConsultantUID, ClientSiteUID, R"& _ 
                "equestUID, JobDate, StartTime, FinishTime, JobDetails, JobNotes, Equipment, JobS"& _ 
                "tatusID, ReturnDate, Signatory, Signature, Email, MinutesTravelled, EmailStatus,"& _ 
                " Flag, CreatedDateTime, ModifiedDateTime, TrackingTimestamp, TrackingInfo FROM J"& _ 
                "ob"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT JobUID, JobID, JobNumber, ConsultantJobID, ConsultantUID, ClientSiteUID, R"& _ 
                "equestUID, JobDate, StartTime, FinishTime, JobDetails, JobNotes, Equipment, JobS"& _ 
                "tatusID, ReturnDate, Signatory, Signature, Email, MinutesTravelled, EmailStatus,"& _ 
                " Flag, CreatedDateTime, ModifiedDateTime, TrackingTimestamp, TrackingInfo FROM J"& _ 
                "ob WHERE (JobUID IN (SELECT DISTINCT JobUID FROM EventLog WHERE (UTCEventTime >="& _ 
                " @Since))) OR (ModifiedDateTime >= @Since)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Since", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(2) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(2).Connection = Me.Connection
            Me._commandCollection(2).CommandText = "SELECT JobUID, JobID, JobNumber, ConsultantJobID, ConsultantUID, ClientSiteUID, R"& _ 
                "equestUID, JobDate, StartTime, FinishTime, JobDetails, JobNotes, Equipment, JobS"& _ 
                "tatusID, ReturnDate, Signatory, Signature, Email, MinutesTravelled, EmailStatus,"& _ 
                " Flag, CreatedDateTime, ModifiedDateTime, TrackingTimestamp, TrackingInfo FROM J"& _ 
                "ob WHERE (JobUID = @JobUID)"
            Me._commandCollection(2).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(2).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@JobUID", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "JobUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(3) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(3).Connection = Me.Connection
            Me._commandCollection(3).CommandText = "SELECT JobUID, JobID, JobNumber, ConsultantJobID, ConsultantUID, ClientSiteUID, R"& _ 
                "equestUID, JobDate, StartTime, FinishTime, JobDetails, JobNotes, Equipment, JobS"& _ 
                "tatusID, ReturnDate, Signatory, Signature, Email, MinutesTravelled, EmailStatus,"& _ 
                " Flag, CreatedDateTime, ModifiedDateTime, TrackingInfo, TrackingTimestamp FROM J"& _ 
                "ob WHERE (ModifiedDateTime >= @ModifiedSince)"
            Me._commandCollection(3).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(3).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedSince", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(4) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(4).Connection = Me.Connection
            Me._commandCollection(4).CommandText = "SELECT JobUID, JobID, JobNumber, ConsultantJobID, ConsultantUID, ClientSiteUID, R"& _ 
                "equestUID, JobDate, StartTime, FinishTime, JobDetails, JobNotes, Equipment, JobS"& _ 
                "tatusID, ReturnDate, Signatory, Signature, Email, MinutesTravelled, EmailStatus,"& _ 
                " Flag, CreatedDateTime, ModifiedDateTime, TrackingTimestamp, TrackingInfo FROM J"& _ 
                "ob WHERE (RequestUID = @RequestUid)"
            Me._commandCollection(4).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(4).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RequestUid", Global.System.Data.SqlDbType.UniqueIdentifier, 16, Global.System.Data.ParameterDirection.Input, 0, 0, "RequestUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(5).Connection = Me.Connection
            Me._commandCollection(5).CommandText = "SELECT JobUID, JobID, JobNumber, ConsultantJobID, ConsultantUID, ClientSiteUID, R"& _ 
                "equestUID, JobDate, StartTime, FinishTime, JobDetails, JobNotes, Equipment, JobS"& _ 
                "tatusID, ReturnDate, Signatory, Signature, Email, MinutesTravelled, EmailStatus,"& _ 
                " Flag, CreatedDateTime, ModifiedDateTime FROM dbo.GetClientSiteJobHistory(@Clien"& _ 
                "tSiteUid, @ConsultantUid, @HistoryDays, @HistoryNumber) AS Job"
            Me._commandCollection(5).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ClientSiteUid", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUid", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HistoryDays", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(5).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@HistoryNumber", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(6) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(6).Connection = Me.Connection
            Me._commandCollection(6).CommandText = "SELECT Job.JobUID, Job.JobID, Job.JobNumber, Job.ConsultantJobID, Job.ConsultantU"& _ 
                "ID, Job.ClientSiteUID, Job.RequestUID, Job.JobDate, Job.StartTime, Job.FinishTim"& _ 
                "e, Job.JobDetails, Job.JobNotes, Job.Equipment, Job.JobStatusID, Job.ReturnDate,"& _ 
                " Job.Signatory, Job.Signature, Job.Email, Job.MinutesTravelled, Job.EmailStatus,"& _ 
                " Job.Flag, Job.CreatedDateTime, Job.ModifiedDateTime, Job.TrackingTimestamp, Job"& _ 
                ".TrackingInfo FROM Job LEFT OUTER JOIN viewActiveJobList ON Job.JobUID = viewAct"& _ 
                "iveJobList.JobUID WHERE (NOT (viewActiveJobList.JobUID IS NULL))"
            Me._commandCollection(6).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(7).Connection = Me.Connection
            Me._commandCollection(7).CommandText = "SELECT JobUID, JobID, JobNumber, ConsultantJobID, ConsultantUID, ClientSiteUID, R"& _ 
                "equestUID, JobDate, StartTime, FinishTime, JobDetails, JobNotes, Equipment, JobS"& _ 
                "tatusID, ReturnDate, Signatory, Signature, Email, MinutesTravelled, EmailStatus,"& _ 
                " Flag, CreatedDateTime, ModifiedDateTime, TrackingTimestamp, TrackingInfo FROM J"& _ 
                "ob WHERE (RequestUID IN (SELECT RequestUID FROM dbo.GetConsultantActiveRequests("& _ 
                "@ConsultantUID, DEFAULT) AS ConsultantActiveRequests)) OR (RequestUID IN (SELECT"& _ 
                " ItemUID FROM dbo.GetConsultantProfileItems(@ConsultantUID, 'R') AS ConsultantRe"& _ 
                "questItems)) OR (JobUID IN (SELECT ItemUID FROM dbo.GetConsultantProfileItems(@C"& _ 
                "onsultantUID, 'J') AS ConsultantJobItems))"
            Me._commandCollection(7).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(7).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(8).Connection = Me.Connection
            Me._commandCollection(8).CommandText = "SELECT JobUID, JobID, JobNumber, ConsultantJobID, ConsultantUID, ClientSiteUID, R"& _ 
                "equestUID, JobDate, StartTime, FinishTime, JobDetails, JobNotes, Equipment, JobS"& _ 
                "tatusID, ReturnDate, Signatory, Signature, Email, MinutesTravelled, EmailStatus,"& _ 
                " Flag, CreatedDateTime, ModifiedDateTime, TrackingTimestamp, TrackingInfo FROM J"& _ 
                "ob WHERE (RequestUID IN (SELECT RequestUID FROM dbo.GetConsultantActiveRequests("& _ 
                "@ConsultantUID, DEFAULT) AS ConsultantActiveRequests) OR RequestUID IN (SELECT I"& _ 
                "temUID FROM dbo.GetConsultantProfileItems(@ConsultantUID, 'R') AS ConsultantRequ"& _ 
                "estItems)) AND (ModifiedDateTime >= @ModifiedSince) OR (ModifiedDateTime >= @Mod"& _ 
                "ifiedSince) AND (JobUID IN (SELECT ItemUID FROM dbo.GetConsultantProfileItems(@C"& _ 
                "onsultantUID, 'J') AS ConsultantJobItems))"
            Me._commandCollection(8).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ConsultantUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._commandCollection(8).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedSince", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ClientDataSet.JobDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ClientDataSet.JobDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ClientDataSet.JobDataTable = New ClientDataSet.JobDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByEventTime(ByVal dataTable As ClientDataSet.JobDataTable, ByVal Since As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Since.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Since.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByEventTime(ByVal Since As Global.System.Nullable(Of Date)) As ClientDataSet.JobDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            If (Since.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(Since.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.JobDataTable = New ClientDataSet.JobDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByJobUid(ByVal dataTable As ClientDataSet.JobDataTable, ByVal JobUID As System.Guid) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(JobUID,System.Guid)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByJobUid(ByVal JobUID As System.Guid) As ClientDataSet.JobDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(2)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(JobUID,System.Guid)
            Dim dataTable As ClientDataSet.JobDataTable = New ClientDataSet.JobDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByModifiedDateTime(ByVal dataTable As ClientDataSet.JobDataTable, ByVal ModifiedSince As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByModifiedDateTime(ByVal ModifiedSince As Global.System.Nullable(Of Date)) As ClientDataSet.JobDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(3)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.JobDataTable = New ClientDataSet.JobDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByRequestUid(ByVal dataTable As ClientDataSet.JobDataTable, ByVal RequestUid As Global.System.Nullable(Of Global.System.Guid)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (RequestUid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(RequestUid.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByRequestUid(ByVal RequestUid As Global.System.Nullable(Of Global.System.Guid)) As ClientDataSet.JobDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(4)
            If (RequestUid.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(0).Value = CType(RequestUid.Value,System.Guid)
            Else
                Me.Adapter.SelectCommand.Parameters(0).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.JobDataTable = New ClientDataSet.JobDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillClientSiteHistoryForConsultant(ByVal dataTable As ClientDataSet.JobDataTable, ByVal ClientSiteUid As System.Guid, ByVal ConsultantUid As System.Guid, ByVal HistoryDays As Integer, ByVal HistoryNumber As Integer) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ClientSiteUid,System.Guid)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ConsultantUid,System.Guid)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(HistoryDays,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(HistoryNumber,Integer)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetClientSiteHistoryForConsultant(ByVal ClientSiteUid As System.Guid, ByVal ConsultantUid As System.Guid, ByVal HistoryDays As Integer, ByVal HistoryNumber As Integer) As ClientDataSet.JobDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(5)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ClientSiteUid,System.Guid)
            Me.Adapter.SelectCommand.Parameters(1).Value = CType(ConsultantUid,System.Guid)
            Me.Adapter.SelectCommand.Parameters(2).Value = CType(HistoryDays,Integer)
            Me.Adapter.SelectCommand.Parameters(3).Value = CType(HistoryNumber,Integer)
            Dim dataTable As ClientDataSet.JobDataTable = New ClientDataSet.JobDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillForConsole(ByVal dataTable As ClientDataSet.JobDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataForConsole() As ClientDataSet.JobDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(6)
            Dim dataTable As ClientDataSet.JobDataTable = New ClientDataSet.JobDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillForConsultant(ByVal dataTable As ClientDataSet.JobDataTable, ByVal ConsultantUID As System.Guid) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUID,System.Guid)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataForConsultant(ByVal ConsultantUID As System.Guid) As ClientDataSet.JobDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(7)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUID,System.Guid)
            Dim dataTable As ClientDataSet.JobDataTable = New ClientDataSet.JobDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillForConsultantByModifiedTime(ByVal dataTable As ClientDataSet.JobDataTable, ByVal ConsultantUID As System.Guid, ByVal ModifiedSince As Global.System.Nullable(Of Date)) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUID,System.Guid)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataForConsultantByModifiedTime(ByVal ConsultantUID As System.Guid, ByVal ModifiedSince As Global.System.Nullable(Of Date)) As ClientDataSet.JobDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(8)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ConsultantUID,System.Guid)
            If (ModifiedSince.HasValue = true) Then
                Me.Adapter.SelectCommand.Parameters(1).Value = CType(ModifiedSince.Value,Date)
            Else
                Me.Adapter.SelectCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            Dim dataTable As ClientDataSet.JobDataTable = New ClientDataSet.JobDataTable(true)
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ClientDataSet.JobDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ClientDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "Job")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_JobUID As System.Guid) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_JobUID,System.Guid)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal JobUID As System.Guid,  _
                    ByVal JobID As Global.System.Nullable(Of Integer),  _
                    ByVal JobNumber As String,  _
                    ByVal ConsultantJobID As Global.System.Nullable(Of Integer),  _
                    ByVal ConsultantUID As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal ClientSiteUID As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal RequestUID As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal JobDate As Global.System.Nullable(Of Date),  _
                    ByVal StartTime As Global.System.Nullable(Of Date),  _
                    ByVal FinishTime As Global.System.Nullable(Of Date),  _
                    ByVal JobDetails As String,  _
                    ByVal JobNotes As String,  _
                    ByVal Equipment As String,  _
                    ByVal JobStatusID As Global.System.Nullable(Of Integer),  _
                    ByVal ReturnDate As Global.System.Nullable(Of Date),  _
                    ByVal Signatory As String,  _
                    ByVal Signature As String,  _
                    ByVal Email As String,  _
                    ByVal MinutesTravelled As Global.System.Nullable(Of Integer),  _
                    ByVal EmailStatus As Global.System.Nullable(Of Byte),  _
                    ByVal Flag As Global.System.Nullable(Of Integer),  _
                    ByVal CreatedDateTime As Global.System.Nullable(Of Date),  _
                    ByVal ModifiedDateTime As Global.System.Nullable(Of Date),  _
                    ByVal TrackingTimestamp As Global.System.Nullable(Of Date),  _
                    ByVal TrackingInfo As String) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(JobUID,System.Guid)
            If (JobID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(JobID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (JobNumber Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(JobNumber,String)
            End If
            If (ConsultantJobID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(ConsultantJobID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ConsultantUID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ConsultantUID.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ClientSiteUID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(ClientSiteUID.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (RequestUID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(RequestUID.Value,System.Guid)
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (JobDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(7).Value = CType(JobDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (StartTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(8).Value = CType(StartTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (FinishTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(9).Value = CType(FinishTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (JobDetails Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(JobDetails,String)
            End If
            If (JobNotes Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(JobNotes,String)
            End If
            If (Equipment Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Equipment,String)
            End If
            If (JobStatusID.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(13).Value = CType(JobStatusID.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (ReturnDate.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(ReturnDate.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Signatory Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(Signatory,String)
            End If
            If (Signature Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(Signature,String)
            End If
            If (Email Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(Email,String)
            End If
            If (MinutesTravelled.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(18).Value = CType(MinutesTravelled.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (EmailStatus.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(19).Value = CType(EmailStatus.Value,Byte)
            Else
                Me.Adapter.InsertCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Flag.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(Flag.Value,Integer)
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (CreatedDateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(21).Value = CType(CreatedDateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (ModifiedDateTime.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(22).Value = CType(ModifiedDateTime.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (TrackingTimestamp.HasValue = true) Then
                Me.Adapter.InsertCommand.Parameters(23).Value = CType(TrackingTimestamp.Value,Date)
            Else
                Me.Adapter.InsertCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (TrackingInfo Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(24).Value = CType(TrackingInfo,String)
            End If
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal JobUID As System.Guid,  _
                    ByVal JobID As Global.System.Nullable(Of Integer),  _
                    ByVal JobNumber As String,  _
                    ByVal ConsultantJobID As Global.System.Nullable(Of Integer),  _
                    ByVal ConsultantUID As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal ClientSiteUID As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal RequestUID As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal JobDate As Global.System.Nullable(Of Date),  _
                    ByVal StartTime As Global.System.Nullable(Of Date),  _
                    ByVal FinishTime As Global.System.Nullable(Of Date),  _
                    ByVal JobDetails As String,  _
                    ByVal JobNotes As String,  _
                    ByVal Equipment As String,  _
                    ByVal JobStatusID As Global.System.Nullable(Of Integer),  _
                    ByVal ReturnDate As Global.System.Nullable(Of Date),  _
                    ByVal Signatory As String,  _
                    ByVal Signature As String,  _
                    ByVal Email As String,  _
                    ByVal MinutesTravelled As Global.System.Nullable(Of Integer),  _
                    ByVal EmailStatus As Global.System.Nullable(Of Byte),  _
                    ByVal Flag As Global.System.Nullable(Of Integer),  _
                    ByVal CreatedDateTime As Global.System.Nullable(Of Date),  _
                    ByVal ModifiedDateTime As Global.System.Nullable(Of Date),  _
                    ByVal TrackingTimestamp As Global.System.Nullable(Of Date),  _
                    ByVal TrackingInfo As String,  _
                    ByVal Original_JobUID As System.Guid) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(JobUID,System.Guid)
            If (JobID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(JobID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = Global.System.DBNull.Value
            End If
            If (JobNumber Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(2).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(JobNumber,String)
            End If
            If (ConsultantJobID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(ConsultantJobID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = Global.System.DBNull.Value
            End If
            If (ConsultantUID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ConsultantUID.Value,System.Guid)
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            End If
            If (ClientSiteUID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(ClientSiteUID.Value,System.Guid)
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = Global.System.DBNull.Value
            End If
            If (RequestUID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(RequestUID.Value,System.Guid)
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            End If
            If (JobDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(7).Value = CType(JobDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(7).Value = Global.System.DBNull.Value
            End If
            If (StartTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(8).Value = CType(StartTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(8).Value = Global.System.DBNull.Value
            End If
            If (FinishTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(9).Value = CType(FinishTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(9).Value = Global.System.DBNull.Value
            End If
            If (JobDetails Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(10).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(JobDetails,String)
            End If
            If (JobNotes Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(11).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(JobNotes,String)
            End If
            If (Equipment Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(12).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Equipment,String)
            End If
            If (JobStatusID.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(13).Value = CType(JobStatusID.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(13).Value = Global.System.DBNull.Value
            End If
            If (ReturnDate.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(ReturnDate.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = Global.System.DBNull.Value
            End If
            If (Signatory Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Signatory,String)
            End If
            If (Signature Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(Signature,String)
            End If
            If (Email Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(Email,String)
            End If
            If (MinutesTravelled.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(18).Value = CType(MinutesTravelled.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(18).Value = Global.System.DBNull.Value
            End If
            If (EmailStatus.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(19).Value = CType(EmailStatus.Value,Byte)
            Else
                Me.Adapter.UpdateCommand.Parameters(19).Value = Global.System.DBNull.Value
            End If
            If (Flag.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(Flag.Value,Integer)
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            End If
            If (CreatedDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(21).Value = CType(CreatedDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(21).Value = Global.System.DBNull.Value
            End If
            If (ModifiedDateTime.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(22).Value = CType(ModifiedDateTime.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(22).Value = Global.System.DBNull.Value
            End If
            If (TrackingTimestamp.HasValue = true) Then
                Me.Adapter.UpdateCommand.Parameters(23).Value = CType(TrackingTimestamp.Value,Date)
            Else
                Me.Adapter.UpdateCommand.Parameters(23).Value = Global.System.DBNull.Value
            End If
            If (TrackingInfo Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(24).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(24).Value = CType(TrackingInfo,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(25).Value = CType(Original_JobUID,System.Guid)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal JobID As Global.System.Nullable(Of Integer),  _
                    ByVal JobNumber As String,  _
                    ByVal ConsultantJobID As Global.System.Nullable(Of Integer),  _
                    ByVal ConsultantUID As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal ClientSiteUID As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal RequestUID As Global.System.Nullable(Of Global.System.Guid),  _
                    ByVal JobDate As Global.System.Nullable(Of Date),  _
                    ByVal StartTime As Global.System.Nullable(Of Date),  _
                    ByVal FinishTime As Global.System.Nullable(Of Date),  _
                    ByVal JobDetails As String,  _
                    ByVal JobNotes As String,  _
                    ByVal Equipment As String,  _
                    ByVal JobStatusID As Global.System.Nullable(Of Integer),  _
                    ByVal ReturnDate As Global.System.Nullable(Of Date),  _
                    ByVal Signatory As String,  _
                    ByVal Signature As String,  _
                    ByVal Email As String,  _
                    ByVal MinutesTravelled As Global.System.Nullable(Of Integer),  _
                    ByVal EmailStatus As Global.System.Nullable(Of Byte),  _
                    ByVal Flag As Global.System.Nullable(Of Integer),  _
                    ByVal CreatedDateTime As Global.System.Nullable(Of Date),  _
                    ByVal ModifiedDateTime As Global.System.Nullable(Of Date),  _
                    ByVal TrackingTimestamp As Global.System.Nullable(Of Date),  _
                    ByVal TrackingInfo As String,  _
                    ByVal Original_JobUID As System.Guid) As Integer
            Return Me.Update(Original_JobUID, JobID, JobNumber, ConsultantJobID, ConsultantUID, ClientSiteUID, RequestUID, JobDate, StartTime, FinishTime, JobDetails, JobNotes, Equipment, JobStatusID, ReturnDate, Signatory, Signature, Email, MinutesTravelled, EmailStatus, Flag, CreatedDateTime, ModifiedDateTime, TrackingTimestamp, TrackingInfo, Original_JobUID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CustomFormTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CustomForm"
            tableMapping.ColumnMappings.Add("CustomFormUID", "CustomFormUID")
            tableMapping.ColumnMappings.Add("FormType", "FormType")
            tableMapping.ColumnMappings.Add("TableName", "TableName")
            tableMapping.ColumnMappings.Add("PrimaryKeyColumnName", "PrimaryKeyColumnName")
            tableMapping.ColumnMappings.Add("ForeignKeyColumnName", "ForeignKeyColumnName")
            tableMapping.ColumnMappings.Add("CustomFormName", "CustomFormName")
            tableMapping.ColumnMappings.Add("ParentFilter", "ParentFilter")
            tableMapping.ColumnMappings.Add("CreatedDateTime", "CreatedDateTime")
            tableMapping.ColumnMappings.Add("ModifiedDateTime", "ModifiedDateTime")
            tableMapping.ColumnMappings.Add("Priority", "Priority")
            tableMapping.ColumnMappings.Add("ParentTableName", "ParentTableName")
            tableMapping.ColumnMappings.Add("ParentPrimaryKeyColumnName", "ParentPrimaryKeyColumnName")
            tableMapping.ColumnMappings.Add("OneToMany", "OneToMany")
            tableMapping.ColumnMappings.Add("LockWithParent", "LockWithParent")
            tableMapping.ColumnMappings.Add("IsReadOnly", "IsReadOnly")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CustomForm] WHERE (([CustomFormUID] = @Original_CustomFormUID)"& _ 
                ")"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomFormUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomFormUID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CustomForm] ([CustomFormUID], [FormType], [TableName], [Primar"& _ 
                "yKeyColumnName], [ForeignKeyColumnName], [CustomFormName], [ParentFilter], [Crea"& _ 
                "tedDateTime], [ModifiedDateTime], [Priority], [ParentTableName], [ParentPrimaryK"& _ 
                "eyColumnName], [OneToMany], [LockWithParent], [IsReadOnly]) VALUES (@CustomFormU"& _ 
                "ID, @FormType, @TableName, @PrimaryKeyColumnName, @ForeignKeyColumnName, @Custom"& _ 
                "FormName, @ParentFilter, @CreatedDateTime, @ModifiedDateTime, @Priority, @Parent"& _ 
                "TableName, @ParentPrimaryKeyColumnName, @OneToMany, @LockWithParent, @IsReadOnly"& _ 
                ");"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CustomFormUID, FormType, TableName, PrimaryKeyColumnName, ForeignKeyC"& _ 
                "olumnName, CustomFormName, ParentFilter, CreatedDateTime, ModifiedDateTime, Prio"& _ 
                "rity, ParentTableName, ParentPrimaryKeyColumnName, OneToMany, LockWithParent, Is"& _ 
                "ReadOnly FROM dbo.CustomForm WHERE (CustomFormUID = @CustomFormUID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomFormUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomFormUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormType", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TableName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TableName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrimaryKeyColumnName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrimaryKeyColumnName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ForeignKeyColumnName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ForeignKeyColumnName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomFormName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomFormName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParentFilter", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParentFilter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Priority", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Priority", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParentTableName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParentTableName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParentPrimaryKeyColumnName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParentPrimaryKeyColumnName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OneToMany", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OneToMany", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LockWithParent", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LockWithParent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsReadOnly", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsReadOnly", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CustomForm] SET [CustomFormUID] = @CustomFormUID, [FormType] = @For"& _ 
                "mType, [TableName] = @TableName, [PrimaryKeyColumnName] = @PrimaryKeyColumnName,"& _ 
                " [ForeignKeyColumnName] = @ForeignKeyColumnName, [CustomFormName] = @CustomFormN"& _ 
                "ame, [ParentFilter] = @ParentFilter, [CreatedDateTime] = @CreatedDateTime, [Modi"& _ 
                "fiedDateTime] = @ModifiedDateTime, [Priority] = @Priority, [ParentTableName] = @"& _ 
                "ParentTableName, [ParentPrimaryKeyColumnName] = @ParentPrimaryKeyColumnName, [On"& _ 
                "eToMany] = @OneToMany, [LockWithParent] = @LockWithParent, [IsReadOnly] = @IsRea"& _ 
                "dOnly WHERE (([CustomFormUID] = @Original_CustomFormUID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CustomFormUID"& _ 
                ", FormType, TableName, PrimaryKeyColumnName, ForeignKeyColumnName, CustomFormNam"& _ 
                "e, ParentFilter, CreatedDateTime, ModifiedDateTime, Priority, ParentTableName, P"& _ 
                "arentPrimaryKeyColumnName, OneToMany, LockWithParent, IsReadOnly FROM dbo.Custom"& _ 
                "Form WHERE (CustomFormUID = @CustomFormUID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomFormUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomFormUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FormType", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FormType", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@TableName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "TableName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@PrimaryKeyColumnName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "PrimaryKeyColumnName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ForeignKeyColumnName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ForeignKeyColumnName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomFormName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomFormName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParentFilter", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParentFilter", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Priority", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Priority", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParentTableName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParentTableName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ParentPrimaryKeyColumnName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ParentPrimaryKeyColumnName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@OneToMany", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "OneToMany", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LockWithParent", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LockWithParent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsReadOnly", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsReadOnly", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomFormUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomFormUID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.activiser.My.MySettings.Default.activiserConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     CustomFormUID, FormType, TableName, PrimaryKeyColumnName, ForeignKeyCo"& _ 
                "lumnName, CustomFormName, ParentFilter, CreatedDateTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                     "& _ 
                " ModifiedDateTime, Priority, ParentTableName, ParentPrimaryKeyColumnName, OneToM"& _ 
                "any, LockWithParent, IsReadOnly"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         dbo.CustomForm"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CreatedDateTime, CustomFormName, CustomFormUID, ForeignKeyColumnName, Form"& _ 
                "Type, IsReadOnly, LockWithParent, ModifiedDateTime, OneToMany, ParentFilter, Par"& _ 
                "entPrimaryKeyColumnName, ParentTableName, PrimaryKeyColumnName, Priority, TableN"& _ 
                "ame FROM dbo.CustomForm WHERE (ModifiedDateTime >= @ModifiedSince)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedSince", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ClientDataSet.CustomFormDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ClientDataSet.CustomFormDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ClientDataSet.CustomFormDataTable = New ClientDataSet.CustomFormDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByModifiedDateTime(ByVal dataTable As ClientDataSet.CustomFormDataTable, ByVal ModifiedSince As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByModifiedDateTime(ByVal ModifiedSince As Date) As ClientDataSet.CustomFormDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince,Date)
            Dim dataTable As ClientDataSet.CustomFormDataTable = New ClientDataSet.CustomFormDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ClientDataSet.CustomFormDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ClientDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CustomForm")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CustomFormUID As System.Guid) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CustomFormUID,System.Guid)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert(ByVal CustomFormUID As System.Guid, ByVal FormType As String, ByVal TableName As String, ByVal PrimaryKeyColumnName As String, ByVal ForeignKeyColumnName As String, ByVal CustomFormName As String, ByVal ParentFilter As String, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date, ByVal Priority As Byte, ByVal ParentTableName As String, ByVal ParentPrimaryKeyColumnName As String, ByVal OneToMany As Byte, ByVal LockWithParent As Boolean, ByVal IsReadOnly As Boolean) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CustomFormUID,System.Guid)
            If (FormType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FormType")
            Else
                Me.Adapter.InsertCommand.Parameters(1).Value = CType(FormType,String)
            End If
            If (TableName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TableName")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(TableName,String)
            End If
            If (PrimaryKeyColumnName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PrimaryKeyColumnName")
            Else
                Me.Adapter.InsertCommand.Parameters(3).Value = CType(PrimaryKeyColumnName,String)
            End If
            If (ForeignKeyColumnName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ForeignKeyColumnName")
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(ForeignKeyColumnName,String)
            End If
            If (CustomFormName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CustomFormName")
            Else
                Me.Adapter.InsertCommand.Parameters(5).Value = CType(CustomFormName,String)
            End If
            If (ParentFilter Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(6).Value = CType(ParentFilter,String)
            End If
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(CreatedDateTime,Date)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(ModifiedDateTime,Date)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(Priority,Byte)
            If (ParentTableName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ParentTableName")
            Else
                Me.Adapter.InsertCommand.Parameters(10).Value = CType(ParentTableName,String)
            End If
            If (ParentPrimaryKeyColumnName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ParentPrimaryKeyColumnName")
            Else
                Me.Adapter.InsertCommand.Parameters(11).Value = CType(ParentPrimaryKeyColumnName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(12).Value = CType(OneToMany,Byte)
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(LockWithParent,Boolean)
            Me.Adapter.InsertCommand.Parameters(14).Value = CType(IsReadOnly,Boolean)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CustomFormUID As System.Guid,  _
                    ByVal FormType As String,  _
                    ByVal TableName As String,  _
                    ByVal PrimaryKeyColumnName As String,  _
                    ByVal ForeignKeyColumnName As String,  _
                    ByVal CustomFormName As String,  _
                    ByVal ParentFilter As String,  _
                    ByVal CreatedDateTime As Date,  _
                    ByVal ModifiedDateTime As Date,  _
                    ByVal Priority As Byte,  _
                    ByVal ParentTableName As String,  _
                    ByVal ParentPrimaryKeyColumnName As String,  _
                    ByVal OneToMany As Byte,  _
                    ByVal LockWithParent As Boolean,  _
                    ByVal IsReadOnly As Boolean,  _
                    ByVal Original_CustomFormUID As System.Guid) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CustomFormUID,System.Guid)
            If (FormType Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FormType")
            Else
                Me.Adapter.UpdateCommand.Parameters(1).Value = CType(FormType,String)
            End If
            If (TableName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("TableName")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(TableName,String)
            End If
            If (PrimaryKeyColumnName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("PrimaryKeyColumnName")
            Else
                Me.Adapter.UpdateCommand.Parameters(3).Value = CType(PrimaryKeyColumnName,String)
            End If
            If (ForeignKeyColumnName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ForeignKeyColumnName")
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(ForeignKeyColumnName,String)
            End If
            If (CustomFormName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("CustomFormName")
            Else
                Me.Adapter.UpdateCommand.Parameters(5).Value = CType(CustomFormName,String)
            End If
            If (ParentFilter Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(6).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(6).Value = CType(ParentFilter,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(CreatedDateTime,Date)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(ModifiedDateTime,Date)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(Priority,Byte)
            If (ParentTableName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ParentTableName")
            Else
                Me.Adapter.UpdateCommand.Parameters(10).Value = CType(ParentTableName,String)
            End If
            If (ParentPrimaryKeyColumnName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("ParentPrimaryKeyColumnName")
            Else
                Me.Adapter.UpdateCommand.Parameters(11).Value = CType(ParentPrimaryKeyColumnName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(12).Value = CType(OneToMany,Byte)
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(LockWithParent,Boolean)
            Me.Adapter.UpdateCommand.Parameters(14).Value = CType(IsReadOnly,Boolean)
            Me.Adapter.UpdateCommand.Parameters(15).Value = CType(Original_CustomFormUID,System.Guid)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update(ByVal FormType As String, ByVal TableName As String, ByVal PrimaryKeyColumnName As String, ByVal ForeignKeyColumnName As String, ByVal CustomFormName As String, ByVal ParentFilter As String, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date, ByVal Priority As Byte, ByVal ParentTableName As String, ByVal ParentPrimaryKeyColumnName As String, ByVal OneToMany As Byte, ByVal LockWithParent As Boolean, ByVal IsReadOnly As Boolean, ByVal Original_CustomFormUID As System.Guid) As Integer
            Return Me.Update(Original_CustomFormUID, FormType, TableName, PrimaryKeyColumnName, ForeignKeyColumnName, CustomFormName, ParentFilter, CreatedDateTime, ModifiedDateTime, Priority, ParentTableName, ParentPrimaryKeyColumnName, OneToMany, LockWithParent, IsReadOnly, Original_CustomFormUID)
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CustomControlTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _transaction As Global.System.Data.SqlClient.SqlTransaction
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Friend ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Transaction() As Global.System.Data.SqlClient.SqlTransaction
            Get
                Return Me._transaction
            End Get
            Set
                Me._transaction = value
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    Me.CommandCollection(i).Transaction = Me._transaction
                    i = (i + 1)
                Loop
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.DeleteCommand) Is Nothing)) Then
                    Me.Adapter.DeleteCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.InsertCommand) Is Nothing)) Then
                    Me.Adapter.InsertCommand.Transaction = Me._transaction
                End If
                If ((Not (Me.Adapter) Is Nothing)  _
                            AndAlso (Not (Me.Adapter.UpdateCommand) Is Nothing)) Then
                    Me.Adapter.UpdateCommand.Transaction = Me._transaction
                End If
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CustomControl"
            tableMapping.ColumnMappings.Add("CustomControlUID", "CustomControlUID")
            tableMapping.ColumnMappings.Add("CustomFormUID", "CustomFormUID")
            tableMapping.ColumnMappings.Add("FieldName", "FieldName")
            tableMapping.ColumnMappings.Add("CustomControlTypeID", "CustomControlTypeID")
            tableMapping.ColumnMappings.Add("Label", "Label")
            tableMapping.ColumnMappings.Add("Sequence", "Sequence")
            tableMapping.ColumnMappings.Add("SortPriority", "SortPriority")
            tableMapping.ColumnMappings.Add("Lines", "Lines")
            tableMapping.ColumnMappings.Add("MinimumValue", "MinimumValue")
            tableMapping.ColumnMappings.Add("MaximumValue", "MaximumValue")
            tableMapping.ColumnMappings.Add("DecimalPlaces", "DecimalPlaces")
            tableMapping.ColumnMappings.Add("IsReadOnly", "IsReadOnly")
            tableMapping.ColumnMappings.Add("Position", "Position")
            tableMapping.ColumnMappings.Add("WidthPercent", "WidthPercent")
            tableMapping.ColumnMappings.Add("LabelPosition", "LabelPosition")
            tableMapping.ColumnMappings.Add("ListDataSource", "ListDataSource")
            tableMapping.ColumnMappings.Add("ListValueColumn", "ListValueColumn")
            tableMapping.ColumnMappings.Add("ListDisplayColumn", "ListDisplayColumn")
            tableMapping.ColumnMappings.Add("CreatedDateTime", "CreatedDateTime")
            tableMapping.ColumnMappings.Add("ModifiedDateTime", "ModifiedDateTime")
            tableMapping.ColumnMappings.Add("ListData", "ListData")
            tableMapping.ColumnMappings.Add("LockWithParent", "LockWithParent")
            tableMapping.ColumnMappings.Add("LabelWidthPercent", "LabelWidthPercent")
            Me._adapter.TableMappings.Add(tableMapping)
            Me._adapter.DeleteCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.DeleteCommand.Connection = Me.Connection
            Me._adapter.DeleteCommand.CommandText = "DELETE FROM [dbo].[CustomControl] WHERE (([CustomControlUID] = @Original_CustomCo"& _ 
                "ntrolUID))"
            Me._adapter.DeleteCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.DeleteCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomControlUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomControlUID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.InsertCommand.Connection = Me.Connection
            Me._adapter.InsertCommand.CommandText = "INSERT INTO [dbo].[CustomControl] ([CustomControlUID], [CustomFormUID], [FieldNam"& _ 
                "e], [CustomControlTypeID], [Label], [Sequence], [SortPriority], [Lines], [Minimu"& _ 
                "mValue], [MaximumValue], [DecimalPlaces], [IsReadOnly], [Position], [WidthPercen"& _ 
                "t], [LabelPosition], [ListDataSource], [ListValueColumn], [ListDisplayColumn], ["& _ 
                "CreatedDateTime], [ModifiedDateTime], [ListData], [LockWithParent], [LabelWidthP"& _ 
                "ercent]) VALUES (@CustomControlUID, @CustomFormUID, @FieldName, @CustomControlTy"& _ 
                "peID, @Label, @Sequence, @SortPriority, @Lines, @MinimumValue, @MaximumValue, @D"& _ 
                "ecimalPlaces, @IsReadOnly, @Position, @WidthPercent, @LabelPosition, @ListDataSo"& _ 
                "urce, @ListValueColumn, @ListDisplayColumn, @CreatedDateTime, @ModifiedDateTime,"& _ 
                " @ListData, @LockWithParent, @LabelWidthPercent);"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CustomControlUID, Cust"& _ 
                "omFormUID, FieldName, CustomControlTypeID, Label, Sequence, SortPriority, Lines,"& _ 
                " MinimumValue, MaximumValue, DecimalPlaces, IsReadOnly, Position, WidthPercent, "& _ 
                "LabelPosition, ListDataSource, ListValueColumn, ListDisplayColumn, CreatedDateTi"& _ 
                "me, ModifiedDateTime, ListData, LockWithParent, LabelWidthPercent FROM dbo.Custo"& _ 
                "mControl WHERE (CustomControlUID = @CustomControlUID)"
            Me._adapter.InsertCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomControlUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomControlUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomFormUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomFormUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomControlTypeID", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomControlTypeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Label", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Label", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sequence", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sequence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SortPriority", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SortPriority", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lines", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Lines", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinimumValue", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinimumValue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaximumValue", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaximumValue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DecimalPlaces", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecimalPlaces", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsReadOnly", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsReadOnly", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Position", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Position", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WidthPercent", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WidthPercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabelPosition", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabelPosition", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ListDataSource", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ListDataSource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ListValueColumn", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ListValueColumn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ListDisplayColumn", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ListDisplayColumn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ListData", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ListData", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LockWithParent", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LockWithParent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.InsertCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabelWidthPercent", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabelWidthPercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand = New Global.System.Data.SqlClient.SqlCommand
            Me._adapter.UpdateCommand.Connection = Me.Connection
            Me._adapter.UpdateCommand.CommandText = "UPDATE [dbo].[CustomControl] SET [CustomControlUID] = @CustomControlUID, [CustomF"& _ 
                "ormUID] = @CustomFormUID, [FieldName] = @FieldName, [CustomControlTypeID] = @Cus"& _ 
                "tomControlTypeID, [Label] = @Label, [Sequence] = @Sequence, [SortPriority] = @So"& _ 
                "rtPriority, [Lines] = @Lines, [MinimumValue] = @MinimumValue, [MaximumValue] = @"& _ 
                "MaximumValue, [DecimalPlaces] = @DecimalPlaces, [IsReadOnly] = @IsReadOnly, [Pos"& _ 
                "ition] = @Position, [WidthPercent] = @WidthPercent, [LabelPosition] = @LabelPosi"& _ 
                "tion, [ListDataSource] = @ListDataSource, [ListValueColumn] = @ListValueColumn, "& _ 
                "[ListDisplayColumn] = @ListDisplayColumn, [CreatedDateTime] = @CreatedDateTime, "& _ 
                "[ModifiedDateTime] = @ModifiedDateTime, [ListData] = @ListData, [LockWithParent]"& _ 
                " = @LockWithParent, [LabelWidthPercent] = @LabelWidthPercent WHERE (([CustomCont"& _ 
                "rolUID] = @Original_CustomControlUID));"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"SELECT CustomControlUID, CustomFormUID,"& _ 
                " FieldName, CustomControlTypeID, Label, Sequence, SortPriority, Lines, MinimumVa"& _ 
                "lue, MaximumValue, DecimalPlaces, IsReadOnly, Position, WidthPercent, LabelPosit"& _ 
                "ion, ListDataSource, ListValueColumn, ListDisplayColumn, CreatedDateTime, Modifi"& _ 
                "edDateTime, ListData, LockWithParent, LabelWidthPercent FROM dbo.CustomControl W"& _ 
                "HERE (CustomControlUID = @CustomControlUID)"
            Me._adapter.UpdateCommand.CommandType = Global.System.Data.CommandType.Text
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomControlUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomControlUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomFormUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomFormUID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@FieldName", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "FieldName", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CustomControlTypeID", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomControlTypeID", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Label", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Label", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Sequence", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Sequence", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@SortPriority", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "SortPriority", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Lines", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Lines", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MinimumValue", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MinimumValue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@MaximumValue", Global.System.Data.SqlDbType.Int, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "MaximumValue", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@DecimalPlaces", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "DecimalPlaces", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@IsReadOnly", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "IsReadOnly", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Position", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "Position", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@WidthPercent", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "WidthPercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabelPosition", Global.System.Data.SqlDbType.[Char], 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabelPosition", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ListDataSource", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ListDataSource", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ListValueColumn", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ListValueColumn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ListDisplayColumn", Global.System.Data.SqlDbType.NVarChar, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ListDisplayColumn", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@CreatedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CreatedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedDateTime", Global.System.Data.SqlDbType.DateTime, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ListData", Global.System.Data.SqlDbType.NText, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "ListData", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LockWithParent", Global.System.Data.SqlDbType.Bit, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LockWithParent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@LabelWidthPercent", Global.System.Data.SqlDbType.TinyInt, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "LabelWidthPercent", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
            Me._adapter.UpdateCommand.Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@Original_CustomControlUID", Global.System.Data.SqlDbType.UniqueIdentifier, 0, Global.System.Data.ParameterDirection.Input, 0, 0, "CustomControlUID", Global.System.Data.DataRowVersion.Original, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.activiser.My.MySettings.Default.activiserConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(1) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "SELECT     CustomControlUID, CustomFormUID, FieldName, CustomControlTypeID, Label"& _ 
                ", Sequence, SortPriority, Lines, MinimumValue, MaximumValue, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                 "& _ 
                "     DecimalPlaces, IsReadOnly, Position, WidthPercent, LabelPosition, ListDataS"& _ 
                "ource, ListValueColumn, ListDisplayColumn, CreatedDateTime, "&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"                  "& _ 
                "    ModifiedDateTime, ListData, LockWithParent, LabelWidthPercent"&Global.Microsoft.VisualBasic.ChrW(13)&Global.Microsoft.VisualBasic.ChrW(10)&"FROM         "& _ 
                "dbo.CustomControl"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(1).Connection = Me.Connection
            Me._commandCollection(1).CommandText = "SELECT CreatedDateTime, CustomControlTypeID, CustomControlUID, CustomFormUID, Dec"& _ 
                "imalPlaces, FieldName, IsReadOnly, Label, LabelPosition, LabelWidthPercent, Line"& _ 
                "s, ListData, ListDataSource, ListDisplayColumn, ListValueColumn, LockWithParent,"& _ 
                " MaximumValue, MinimumValue, ModifiedDateTime, Position, Sequence, SortPriority,"& _ 
                " WidthPercent FROM dbo.CustomControl WHERE (ModifiedDateTime >= @ModifiedSince)"
            Me._commandCollection(1).CommandType = Global.System.Data.CommandType.Text
            Me._commandCollection(1).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@ModifiedSince", Global.System.Data.SqlDbType.DateTime, 8, Global.System.Data.ParameterDirection.Input, 0, 0, "ModifiedDateTime", Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As ClientDataSet.CustomControlDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As ClientDataSet.CustomControlDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As ClientDataSet.CustomControlDataTable = New ClientDataSet.CustomControlDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, false)>  _
        Public Overloads Overridable Function FillByModifiedDateTime(ByVal dataTable As ClientDataSet.CustomControlDataTable, ByVal ModifiedSince As Date) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince,Date)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], false)>  _
        Public Overloads Overridable Function GetDataByModifiedDateTime(ByVal ModifiedSince As Date) As ClientDataSet.CustomControlDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(1)
            Me.Adapter.SelectCommand.Parameters(0).Value = CType(ModifiedSince,Date)
            Dim dataTable As ClientDataSet.CustomControlDataTable = New ClientDataSet.CustomControlDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataTable As ClientDataSet.CustomControlDataTable) As Integer
            Return Me.Adapter.Update(dataTable)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataSet As ClientDataSet) As Integer
            Return Me.Adapter.Update(dataSet, "CustomControl")
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRow As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(New Global.System.Data.DataRow() {dataRow})
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
        Public Overloads Overridable Function Update(ByVal dataRows() As Global.System.Data.DataRow) As Integer
            Return Me.Adapter.Update(dataRows)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Delete, true)>  _
        Public Overloads Overridable Function Delete(ByVal Original_CustomControlUID As System.Guid) As Integer
            Me.Adapter.DeleteCommand.Parameters(0).Value = CType(Original_CustomControlUID,System.Guid)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.DeleteCommand.Connection.State
            If ((Me.Adapter.DeleteCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.DeleteCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.DeleteCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.DeleteCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Insert, true)>  _
        Public Overloads Overridable Function Insert( _
                    ByVal CustomControlUID As System.Guid,  _
                    ByVal CustomFormUID As System.Guid,  _
                    ByVal FieldName As String,  _
                    ByVal CustomControlTypeID As Byte,  _
                    ByVal Label As String,  _
                    ByVal Sequence As Byte,  _
                    ByVal SortPriority As Byte,  _
                    ByVal Lines As Byte,  _
                    ByVal MinimumValue As Integer,  _
                    ByVal MaximumValue As Integer,  _
                    ByVal DecimalPlaces As Byte,  _
                    ByVal IsReadOnly As Boolean,  _
                    ByVal Position As String,  _
                    ByVal WidthPercent As Byte,  _
                    ByVal LabelPosition As String,  _
                    ByVal ListDataSource As String,  _
                    ByVal ListValueColumn As String,  _
                    ByVal ListDisplayColumn As String,  _
                    ByVal CreatedDateTime As Date,  _
                    ByVal ModifiedDateTime As Date,  _
                    ByVal ListData As String,  _
                    ByVal LockWithParent As Boolean,  _
                    ByVal LabelWidthPercent As Byte) As Integer
            Me.Adapter.InsertCommand.Parameters(0).Value = CType(CustomControlUID,System.Guid)
            Me.Adapter.InsertCommand.Parameters(1).Value = CType(CustomFormUID,System.Guid)
            If (FieldName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FieldName")
            Else
                Me.Adapter.InsertCommand.Parameters(2).Value = CType(FieldName,String)
            End If
            Me.Adapter.InsertCommand.Parameters(3).Value = CType(CustomControlTypeID,Byte)
            If (Label Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(4).Value = CType(Label,String)
            End If
            Me.Adapter.InsertCommand.Parameters(5).Value = CType(Sequence,Byte)
            Me.Adapter.InsertCommand.Parameters(6).Value = CType(SortPriority,Byte)
            Me.Adapter.InsertCommand.Parameters(7).Value = CType(Lines,Byte)
            Me.Adapter.InsertCommand.Parameters(8).Value = CType(MinimumValue,Integer)
            Me.Adapter.InsertCommand.Parameters(9).Value = CType(MaximumValue,Integer)
            Me.Adapter.InsertCommand.Parameters(10).Value = CType(DecimalPlaces,Byte)
            Me.Adapter.InsertCommand.Parameters(11).Value = CType(IsReadOnly,Boolean)
            If (Position Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Position")
            Else
                Me.Adapter.InsertCommand.Parameters(12).Value = CType(Position,String)
            End If
            Me.Adapter.InsertCommand.Parameters(13).Value = CType(WidthPercent,Byte)
            If (LabelPosition Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LabelPosition")
            Else
                Me.Adapter.InsertCommand.Parameters(14).Value = CType(LabelPosition,String)
            End If
            If (ListDataSource Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(15).Value = CType(ListDataSource,String)
            End If
            If (ListValueColumn Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(16).Value = CType(ListValueColumn,String)
            End If
            If (ListDisplayColumn Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(17).Value = CType(ListDisplayColumn,String)
            End If
            Me.Adapter.InsertCommand.Parameters(18).Value = CType(CreatedDateTime,Date)
            Me.Adapter.InsertCommand.Parameters(19).Value = CType(ModifiedDateTime,Date)
            If (ListData Is Nothing) Then
                Me.Adapter.InsertCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.InsertCommand.Parameters(20).Value = CType(ListData,String)
            End If
            Me.Adapter.InsertCommand.Parameters(21).Value = CType(LockWithParent,Boolean)
            Me.Adapter.InsertCommand.Parameters(22).Value = CType(LabelWidthPercent,Byte)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.InsertCommand.Connection.State
            If ((Me.Adapter.InsertCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.InsertCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.InsertCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.InsertCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CustomControlUID As System.Guid,  _
                    ByVal CustomFormUID As System.Guid,  _
                    ByVal FieldName As String,  _
                    ByVal CustomControlTypeID As Byte,  _
                    ByVal Label As String,  _
                    ByVal Sequence As Byte,  _
                    ByVal SortPriority As Byte,  _
                    ByVal Lines As Byte,  _
                    ByVal MinimumValue As Integer,  _
                    ByVal MaximumValue As Integer,  _
                    ByVal DecimalPlaces As Byte,  _
                    ByVal IsReadOnly As Boolean,  _
                    ByVal Position As String,  _
                    ByVal WidthPercent As Byte,  _
                    ByVal LabelPosition As String,  _
                    ByVal ListDataSource As String,  _
                    ByVal ListValueColumn As String,  _
                    ByVal ListDisplayColumn As String,  _
                    ByVal CreatedDateTime As Date,  _
                    ByVal ModifiedDateTime As Date,  _
                    ByVal ListData As String,  _
                    ByVal LockWithParent As Boolean,  _
                    ByVal LabelWidthPercent As Byte,  _
                    ByVal Original_CustomControlUID As System.Guid) As Integer
            Me.Adapter.UpdateCommand.Parameters(0).Value = CType(CustomControlUID,System.Guid)
            Me.Adapter.UpdateCommand.Parameters(1).Value = CType(CustomFormUID,System.Guid)
            If (FieldName Is Nothing) Then
                Throw New Global.System.ArgumentNullException("FieldName")
            Else
                Me.Adapter.UpdateCommand.Parameters(2).Value = CType(FieldName,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(3).Value = CType(CustomControlTypeID,Byte)
            If (Label Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(4).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(4).Value = CType(Label,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(5).Value = CType(Sequence,Byte)
            Me.Adapter.UpdateCommand.Parameters(6).Value = CType(SortPriority,Byte)
            Me.Adapter.UpdateCommand.Parameters(7).Value = CType(Lines,Byte)
            Me.Adapter.UpdateCommand.Parameters(8).Value = CType(MinimumValue,Integer)
            Me.Adapter.UpdateCommand.Parameters(9).Value = CType(MaximumValue,Integer)
            Me.Adapter.UpdateCommand.Parameters(10).Value = CType(DecimalPlaces,Byte)
            Me.Adapter.UpdateCommand.Parameters(11).Value = CType(IsReadOnly,Boolean)
            If (Position Is Nothing) Then
                Throw New Global.System.ArgumentNullException("Position")
            Else
                Me.Adapter.UpdateCommand.Parameters(12).Value = CType(Position,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(13).Value = CType(WidthPercent,Byte)
            If (LabelPosition Is Nothing) Then
                Throw New Global.System.ArgumentNullException("LabelPosition")
            Else
                Me.Adapter.UpdateCommand.Parameters(14).Value = CType(LabelPosition,String)
            End If
            If (ListDataSource Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(15).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(15).Value = CType(ListDataSource,String)
            End If
            If (ListValueColumn Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(16).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(16).Value = CType(ListValueColumn,String)
            End If
            If (ListDisplayColumn Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(17).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(17).Value = CType(ListDisplayColumn,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(18).Value = CType(CreatedDateTime,Date)
            Me.Adapter.UpdateCommand.Parameters(19).Value = CType(ModifiedDateTime,Date)
            If (ListData Is Nothing) Then
                Me.Adapter.UpdateCommand.Parameters(20).Value = Global.System.DBNull.Value
            Else
                Me.Adapter.UpdateCommand.Parameters(20).Value = CType(ListData,String)
            End If
            Me.Adapter.UpdateCommand.Parameters(21).Value = CType(LockWithParent,Boolean)
            Me.Adapter.UpdateCommand.Parameters(22).Value = CType(LabelWidthPercent,Byte)
            Me.Adapter.UpdateCommand.Parameters(23).Value = CType(Original_CustomControlUID,System.Guid)
            Dim previousConnectionState As Global.System.Data.ConnectionState = Me.Adapter.UpdateCommand.Connection.State
            If ((Me.Adapter.UpdateCommand.Connection.State And Global.System.Data.ConnectionState.Open)  _
                        <> Global.System.Data.ConnectionState.Open) Then
                Me.Adapter.UpdateCommand.Connection.Open
            End If
            Try 
                Dim returnValue As Integer = Me.Adapter.UpdateCommand.ExecuteNonQuery
                Return returnValue
            Finally
                If (previousConnectionState = Global.System.Data.ConnectionState.Closed) Then
                    Me.Adapter.UpdateCommand.Connection.Close
                End If
            End Try
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Update, true)>  _
        Public Overloads Overridable Function Update( _
                    ByVal CustomFormUID As System.Guid,  _
                    ByVal FieldName As String,  _
                    ByVal CustomControlTypeID As Byte,  _
                    ByVal Label As String,  _
                    ByVal Sequence As Byte,  _
                    ByVal SortPriority As Byte,  _
                    ByVal Lines As Byte,  _
                    ByVal MinimumValue As Integer,  _
                    ByVal MaximumValue As Integer,  _
                    ByVal DecimalPlaces As Byte,  _
                    ByVal IsReadOnly As Boolean,  _
                    ByVal Position As String,  _
                    ByVal WidthPercent As Byte,  _
                    ByVal LabelPosition As String,  _
                    ByVal ListDataSource As String,  _
                    ByVal ListValueColumn As String,  _
                    ByVal ListDisplayColumn As String,  _
                    ByVal CreatedDateTime As Date,  _
                    ByVal ModifiedDateTime As Date,  _
                    ByVal ListData As String,  _
                    ByVal LockWithParent As Boolean,  _
                    ByVal LabelWidthPercent As Byte,  _
                    ByVal Original_CustomControlUID As System.Guid) As Integer
            Return Me.Update(Original_CustomControlUID, CustomFormUID, FieldName, CustomControlTypeID, Label, Sequence, SortPriority, Lines, MinimumValue, MaximumValue, DecimalPlaces, IsReadOnly, Position, WidthPercent, LabelPosition, ListDataSource, ListValueColumn, ListDisplayColumn, CreatedDateTime, ModifiedDateTime, ListData, LockWithParent, LabelWidthPercent, Original_CustomControlUID)
        End Function
    End Class
    
    '''<summary>
    '''TableAdapterManager is used to coordinate TableAdapters in the dataset to enable Hierarchical Update scenarios
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerDesigner, Microsoft.VSD"& _ 
        "esigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapterManager")>  _
    Partial Public Class TableAdapterManager
        Inherits Global.System.ComponentModel.Component
        
        Private _updateOrder As UpdateOrderOption
        
        Private _consultantTableAdapter As ConsultantTableAdapter
        
        Private _clientSiteStatusTableAdapter As ClientSiteStatusTableAdapter
        
        Private _clientSiteTableAdapter As ClientSiteTableAdapter
        
        Private _requestStatusTableAdapter As RequestStatusTableAdapter
        
        Private _requestTableAdapter As RequestTableAdapter
        
        Private _jobStatusTableAdapter As JobStatusTableAdapter
        
        Private _jobTableAdapter As JobTableAdapter
        
        Private _customFormTableAdapter As CustomFormTableAdapter
        
        Private _customControlTableAdapter As CustomControlTableAdapter
        
        Private _backupDataSetBeforeUpdate As Boolean
        
        Private _connection As Global.System.Data.IDbConnection
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property UpdateOrder() As UpdateOrderOption
            Get
                Return Me._updateOrder
            End Get
            Set
                Me._updateOrder = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ConsultantTableAdapter() As ConsultantTableAdapter
            Get
                Return Me._consultantTableAdapter
            End Get
            Set
                If ((Not (Me._consultantTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._consultantTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._consultantTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ClientSiteStatusTableAdapter() As ClientSiteStatusTableAdapter
            Get
                Return Me._clientSiteStatusTableAdapter
            End Get
            Set
                If ((Not (Me._clientSiteStatusTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._clientSiteStatusTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._clientSiteStatusTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property ClientSiteTableAdapter() As ClientSiteTableAdapter
            Get
                Return Me._clientSiteTableAdapter
            End Get
            Set
                If ((Not (Me._clientSiteTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._clientSiteTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._clientSiteTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RequestStatusTableAdapter() As RequestStatusTableAdapter
            Get
                Return Me._requestStatusTableAdapter
            End Get
            Set
                If ((Not (Me._requestStatusTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._requestStatusTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._requestStatusTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property RequestTableAdapter() As RequestTableAdapter
            Get
                Return Me._requestTableAdapter
            End Get
            Set
                If ((Not (Me._requestTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._requestTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._requestTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property JobStatusTableAdapter() As JobStatusTableAdapter
            Get
                Return Me._jobStatusTableAdapter
            End Get
            Set
                If ((Not (Me._jobStatusTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._jobStatusTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._jobStatusTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property JobTableAdapter() As JobTableAdapter
            Get
                Return Me._jobTableAdapter
            End Get
            Set
                If ((Not (Me._jobTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._jobTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._jobTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CustomFormTableAdapter() As CustomFormTableAdapter
            Get
                Return Me._customFormTableAdapter
            End Get
            Set
                If ((Not (Me._customFormTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._customFormTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._customFormTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.EditorAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterManagerPropertyEditor, Microso"& _ 
            "ft.VSDesigner, Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"& _ 
            "", "System.Drawing.Design.UITypeEditor")>  _
        Public Property CustomControlTableAdapter() As CustomControlTableAdapter
            Get
                Return Me._customControlTableAdapter
            End Get
            Set
                If ((Not (Me._customControlTableAdapter) Is Nothing)  _
                            AndAlso (Me.TableAdapterInstanceCount = 1)) Then
                    Me._customControlTableAdapter = value
                    Return
                End If
                If ((Not (value) Is Nothing)  _
                            AndAlso (Me.MatchTableAdapterConnection(value.Connection) = false)) Then
                    Throw New Global.System.ArgumentException("All TableAdapters managed by a TableAdapterManager must use the same connection s"& _ 
                            "tring.")
                End If
                Me._customControlTableAdapter = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property BackupDataSetBeforeUpdate() As Boolean
            Get
                Return Me._backupDataSetBeforeUpdate
            End Get
            Set
                Me._backupDataSetBeforeUpdate = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public Property Connection() As Global.System.Data.IDbConnection
            Get
                If (Not (Me._connection) Is Nothing) Then
                    Return Me._connection
                End If
                If ((Not (Me._consultantTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._consultantTableAdapter.Connection) Is Nothing)) Then
                    Return Me._consultantTableAdapter.Connection
                End If
                If ((Not (Me._clientSiteStatusTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._clientSiteStatusTableAdapter.Connection) Is Nothing)) Then
                    Return Me._clientSiteStatusTableAdapter.Connection
                End If
                If ((Not (Me._clientSiteTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._clientSiteTableAdapter.Connection) Is Nothing)) Then
                    Return Me._clientSiteTableAdapter.Connection
                End If
                If ((Not (Me._requestStatusTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._requestStatusTableAdapter.Connection) Is Nothing)) Then
                    Return Me._requestStatusTableAdapter.Connection
                End If
                If ((Not (Me._requestTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._requestTableAdapter.Connection) Is Nothing)) Then
                    Return Me._requestTableAdapter.Connection
                End If
                If ((Not (Me._jobStatusTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._jobStatusTableAdapter.Connection) Is Nothing)) Then
                    Return Me._jobStatusTableAdapter.Connection
                End If
                If ((Not (Me._jobTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._jobTableAdapter.Connection) Is Nothing)) Then
                    Return Me._jobTableAdapter.Connection
                End If
                If ((Not (Me._customFormTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._customFormTableAdapter.Connection) Is Nothing)) Then
                    Return Me._customFormTableAdapter.Connection
                End If
                If ((Not (Me._customControlTableAdapter) Is Nothing)  _
                            AndAlso (Not (Me._customControlTableAdapter.Connection) Is Nothing)) Then
                    Return Me._customControlTableAdapter.Connection
                End If
                Return Nothing
            End Get
            Set
                Me._connection = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property TableAdapterInstanceCount() As Integer
            Get
                Dim count As Integer = 0
                If (Not (Me._consultantTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._clientSiteStatusTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._clientSiteTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._requestStatusTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._requestTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._jobStatusTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._jobTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._customFormTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                If (Not (Me._customControlTableAdapter) Is Nothing) Then
                    count = (count + 1)
                End If
                Return count
            End Get
        End Property
        
        '''<summary>
        '''Update rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateUpdatedRows(ByVal dataSet As ClientDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow), ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._clientSiteStatusTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ClientSiteStatus.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._clientSiteStatusTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._requestStatusTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.RequestStatus.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._requestStatusTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._clientSiteTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.ClientSite.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._clientSiteTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._consultantTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Consultant.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._consultantTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._customFormTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CustomForm.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._customFormTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._jobStatusTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.JobStatus.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._jobStatusTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._requestTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Request.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._requestTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._jobTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.Job.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._jobTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            If (Not (Me._customControlTableAdapter) Is Nothing) Then
                Dim updatedRows() As Global.System.Data.DataRow = dataSet.CustomControl.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.ModifiedCurrent)
                updatedRows = Me.GetRealUpdatedRows(updatedRows, allAddedRows)
                If ((Not (updatedRows) Is Nothing)  _
                            AndAlso (0 < updatedRows.Length)) Then
                    result = (result + Me._customControlTableAdapter.Update(updatedRows))
                    allChangedRows.AddRange(updatedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Insert rows in top-down order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateInsertedRows(ByVal dataSet As ClientDataSet, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._clientSiteStatusTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ClientSiteStatus.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._clientSiteStatusTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._requestStatusTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.RequestStatus.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._requestStatusTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._clientSiteTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.ClientSite.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._clientSiteTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._consultantTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Consultant.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._consultantTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._customFormTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CustomForm.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._customFormTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._jobStatusTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.JobStatus.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._jobStatusTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._requestTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Request.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._requestTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._jobTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.Job.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._jobTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            If (Not (Me._customControlTableAdapter) Is Nothing) Then
                Dim addedRows() As Global.System.Data.DataRow = dataSet.CustomControl.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Added)
                If ((Not (addedRows) Is Nothing)  _
                            AndAlso (0 < addedRows.Length)) Then
                    result = (result + Me._customControlTableAdapter.Update(addedRows))
                    allAddedRows.AddRange(addedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Delete rows in bottom-up order.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function UpdateDeletedRows(ByVal dataSet As ClientDataSet, ByVal allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Integer
            Dim result As Integer = 0
            If (Not (Me._customControlTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CustomControl.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._customControlTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._jobTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Job.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._jobTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._requestTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Request.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._requestTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._jobStatusTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.JobStatus.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._jobStatusTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._customFormTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.CustomForm.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._customFormTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._consultantTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.Consultant.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._consultantTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._clientSiteTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ClientSite.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._clientSiteTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._requestStatusTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.RequestStatus.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._requestStatusTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            If (Not (Me._clientSiteStatusTableAdapter) Is Nothing) Then
                Dim deletedRows() As Global.System.Data.DataRow = dataSet.ClientSiteStatus.Select(Nothing, Nothing, Global.System.Data.DataViewRowState.Deleted)
                If ((Not (deletedRows) Is Nothing)  _
                            AndAlso (0 < deletedRows.Length)) Then
                    result = (result + Me._clientSiteStatusTableAdapter.Update(deletedRows))
                    allChangedRows.AddRange(deletedRows)
                End If
            End If
            Return result
        End Function
        
        '''<summary>
        '''Remove inserted rows that become updated rows after calling TableAdapter.Update(inserted rows) first
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function GetRealUpdatedRows(ByVal updatedRows() As Global.System.Data.DataRow, ByVal allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)) As Global.System.Data.DataRow()
            If ((updatedRows Is Nothing)  _
                        OrElse (updatedRows.Length < 1)) Then
                Return updatedRows
            End If
            If ((allAddedRows Is Nothing)  _
                        OrElse (allAddedRows.Count < 1)) Then
                Return updatedRows
            End If
            Dim realUpdatedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim i As Integer = 0
            Do While (i < updatedRows.Length)
                Dim row As Global.System.Data.DataRow = updatedRows(i)
                If (allAddedRows.Contains(row) = false) Then
                    realUpdatedRows.Add(row)
                End If
                i = (i + 1)
            Loop
            Return realUpdatedRows.ToArray
        End Function
        
        '''<summary>
        '''Update all changes to the dataset.
        '''</summary>
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overridable Function UpdateAll(ByVal dataSet As ClientDataSet) As Integer
            If (dataSet Is Nothing) Then
                Throw New Global.System.ArgumentNullException("dataSet")
            End If
            If (dataSet.HasChanges = false) Then
                Return 0
            End If
            Dim workConnection As Global.System.Data.IDbConnection = Me.Connection
            If (workConnection Is Nothing) Then
                Throw New Global.System.ApplicationException("TableAdapterManager contains no connection information. Set each TableAdapterMana"& _ 
                        "ger TableAdapter property to a valid TableAdapter instance.")
            End If
            Dim workConnOpened As Boolean = false
            If ((workConnection.State And Global.System.Data.ConnectionState.Closed)  _
                        = Global.System.Data.ConnectionState.Closed) Then
                workConnection.Open
                workConnOpened = true
            End If
            Dim workTransaction As Global.System.Data.IDbTransaction = workConnection.BeginTransaction
            If (workTransaction Is Nothing) Then
                Throw New Global.System.ApplicationException("The transaction cannot begin. The current data connection does not support transa"& _ 
                        "ctions or the current state is not allowing the transaction to begin.")
            End If
            Dim allChangedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim allAddedRows As Global.System.Collections.Generic.List(Of Global.System.Data.DataRow) = New Global.System.Collections.Generic.List(Of Global.System.Data.DataRow)
            Dim adaptersWithAcceptChangesDuringUpdate As Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter) = New Global.System.Collections.Generic.List(Of Global.System.Data.Common.DataAdapter)
            Dim revertConnections As Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection) = New Global.System.Collections.Generic.Dictionary(Of Object, Global.System.Data.IDbConnection)
            Dim result As Integer = 0
            Dim backupDataSet As Global.System.Data.DataSet = Nothing
            If Me.BackupDataSetBeforeUpdate Then
                backupDataSet = New Global.System.Data.DataSet
                backupDataSet.Merge(dataSet)
            End If
            Try 
                '---- Prepare for update -----------
                '
                If (Not (Me._consultantTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._consultantTableAdapter, Me._consultantTableAdapter.Connection)
                    Me._consultantTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._consultantTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._consultantTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._consultantTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._consultantTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._clientSiteStatusTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._clientSiteStatusTableAdapter, Me._clientSiteStatusTableAdapter.Connection)
                    Me._clientSiteStatusTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._clientSiteStatusTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._clientSiteStatusTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._clientSiteStatusTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._clientSiteStatusTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._clientSiteTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._clientSiteTableAdapter, Me._clientSiteTableAdapter.Connection)
                    Me._clientSiteTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._clientSiteTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._clientSiteTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._clientSiteTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._clientSiteTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._requestStatusTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._requestStatusTableAdapter, Me._requestStatusTableAdapter.Connection)
                    Me._requestStatusTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._requestStatusTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._requestStatusTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._requestStatusTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._requestStatusTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._requestTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._requestTableAdapter, Me._requestTableAdapter.Connection)
                    Me._requestTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._requestTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._requestTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._requestTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._requestTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._jobStatusTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._jobStatusTableAdapter, Me._jobStatusTableAdapter.Connection)
                    Me._jobStatusTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._jobStatusTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._jobStatusTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._jobStatusTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._jobStatusTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._jobTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._jobTableAdapter, Me._jobTableAdapter.Connection)
                    Me._jobTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._jobTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._jobTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._jobTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._jobTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._customFormTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._customFormTableAdapter, Me._customFormTableAdapter.Connection)
                    Me._customFormTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._customFormTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._customFormTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._customFormTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._customFormTableAdapter.Adapter)
                    End If
                End If
                If (Not (Me._customControlTableAdapter) Is Nothing) Then
                    revertConnections.Add(Me._customControlTableAdapter, Me._customControlTableAdapter.Connection)
                    Me._customControlTableAdapter.Connection = CType(workConnection,Global.System.Data.SqlClient.SqlConnection)
                    Me._customControlTableAdapter.Transaction = CType(workTransaction,Global.System.Data.SqlClient.SqlTransaction)
                    If Me._customControlTableAdapter.Adapter.AcceptChangesDuringUpdate Then
                        Me._customControlTableAdapter.Adapter.AcceptChangesDuringUpdate = false
                        adaptersWithAcceptChangesDuringUpdate.Add(Me._customControlTableAdapter.Adapter)
                    End If
                End If
                '
                '---- Perform updates -----------
                '
                If (Me.UpdateOrder = UpdateOrderOption.UpdateInsertDelete) Then
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                Else
                    result = (result + Me.UpdateInsertedRows(dataSet, allAddedRows))
                    result = (result + Me.UpdateUpdatedRows(dataSet, allChangedRows, allAddedRows))
                End If
                result = (result + Me.UpdateDeletedRows(dataSet, allChangedRows))
                '
                '---- Commit updates -----------
                '
                workTransaction.Commit
                If (0 < allAddedRows.Count) Then
                    Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                    allAddedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
                If (0 < allChangedRows.Count) Then
                    Dim rows((allChangedRows.Count) - 1) As Global.System.Data.DataRow
                    allChangedRows.CopyTo(rows)
                    Dim i As Integer = 0
                    Do While (i < rows.Length)
                        Dim row As Global.System.Data.DataRow = rows(i)
                        row.AcceptChanges
                        i = (i + 1)
                    Loop
                End If
            Catch ex As Global.System.Exception
                workTransaction.Rollback
                '---- Restore the dataset -----------
                If Me.BackupDataSetBeforeUpdate Then
                    Global.System.Diagnostics.Debug.Assert((Not (backupDataSet) Is Nothing))
                    dataSet.Clear
                    dataSet.Merge(backupDataSet)
                Else
                    If (0 < allAddedRows.Count) Then
                        Dim rows((allAddedRows.Count) - 1) As Global.System.Data.DataRow
                        allAddedRows.CopyTo(rows)
                        Dim i As Integer = 0
                        Do While (i < rows.Length)
                            Dim row As Global.System.Data.DataRow = rows(i)
                            row.AcceptChanges
                            row.SetAdded
                            i = (i + 1)
                        Loop
                    End If
                End If
                Throw ex
            Finally
                If workConnOpened Then
                    workConnection.Close
                End If
                If (Not (Me._consultantTableAdapter) Is Nothing) Then
                    Me._consultantTableAdapter.Connection = CType(revertConnections(Me._consultantTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._consultantTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._clientSiteStatusTableAdapter) Is Nothing) Then
                    Me._clientSiteStatusTableAdapter.Connection = CType(revertConnections(Me._clientSiteStatusTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._clientSiteStatusTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._clientSiteTableAdapter) Is Nothing) Then
                    Me._clientSiteTableAdapter.Connection = CType(revertConnections(Me._clientSiteTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._clientSiteTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._requestStatusTableAdapter) Is Nothing) Then
                    Me._requestStatusTableAdapter.Connection = CType(revertConnections(Me._requestStatusTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._requestStatusTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._requestTableAdapter) Is Nothing) Then
                    Me._requestTableAdapter.Connection = CType(revertConnections(Me._requestTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._requestTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._jobStatusTableAdapter) Is Nothing) Then
                    Me._jobStatusTableAdapter.Connection = CType(revertConnections(Me._jobStatusTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._jobStatusTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._jobTableAdapter) Is Nothing) Then
                    Me._jobTableAdapter.Connection = CType(revertConnections(Me._jobTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._jobTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._customFormTableAdapter) Is Nothing) Then
                    Me._customFormTableAdapter.Connection = CType(revertConnections(Me._customFormTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._customFormTableAdapter.Transaction = Nothing
                End If
                If (Not (Me._customControlTableAdapter) Is Nothing) Then
                    Me._customControlTableAdapter.Connection = CType(revertConnections(Me._customControlTableAdapter),Global.System.Data.SqlClient.SqlConnection)
                    Me._customControlTableAdapter.Transaction = Nothing
                End If
                If (0 < adaptersWithAcceptChangesDuringUpdate.Count) Then
                    Dim adapters((adaptersWithAcceptChangesDuringUpdate.Count) - 1) As Global.System.Data.Common.DataAdapter
                    adaptersWithAcceptChangesDuringUpdate.CopyTo(adapters)
                    Dim i As Integer = 0
                    Do While (i < adapters.Length)
                        Dim adapter As Global.System.Data.Common.DataAdapter = adapters(i)
                        adapter.AcceptChangesDuringUpdate = true
                        i = (i + 1)
                    Loop
                End If
            End Try
            Return result
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Sub SortSelfReferenceRows(ByVal rows() As Global.System.Data.DataRow, ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
            Global.System.Array.Sort(Of Global.System.Data.DataRow)(rows, New SelfReferenceComparer(relation, childFirst))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overridable Function MatchTableAdapterConnection(ByVal inputConnection As Global.System.Data.IDbConnection) As Boolean
            If (Not (Me._connection) Is Nothing) Then
                Return true
            End If
            If ((Me.Connection Is Nothing)  _
                        OrElse (inputConnection Is Nothing)) Then
                Return true
            End If
            If String.Equals(Me.Connection.ConnectionString, inputConnection.ConnectionString, Global.System.StringComparison.Ordinal) Then
                Return true
            End If
            Return false
        End Function
        
        '''<summary>
        '''Update Order Option
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Public Enum UpdateOrderOption
            
            InsertUpdateDelete = 0
            
            UpdateInsertDelete = 1
        End Enum
        
        '''<summary>
        '''Used to sort self-referenced table's rows
        '''</summary>
        <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
        Private Class SelfReferenceComparer
            Inherits Object
            Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow)
            
            Private _relation As Global.System.Data.DataRelation
            
            Private _childFirst As Integer
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal relation As Global.System.Data.DataRelation, ByVal childFirst As Boolean)
                MyBase.New
                Me._relation = relation
                If childFirst Then
                    Me._childFirst = -1
                Else
                    Me._childFirst = 1
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Function IsChildAndParent(ByVal child As Global.System.Data.DataRow, ByVal parent As Global.System.Data.DataRow) As Boolean
                Global.System.Diagnostics.Debug.Assert((Not (child) Is Nothing))
                Global.System.Diagnostics.Debug.Assert((Not (parent) Is Nothing))
                Dim newParent As Global.System.Data.DataRow = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Do While ((Not (newParent) Is Nothing)  _
                            AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                            AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                    newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.[Default])

                Loop
                If (newParent Is Nothing) Then
                    newParent = child.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)
                    Do While ((Not (newParent) Is Nothing)  _
                                AndAlso ((Object.ReferenceEquals(newParent, child) = false)  _
                                AndAlso (Object.ReferenceEquals(newParent, parent) = false)))
                        newParent = newParent.GetParentRow(Me._relation, Global.System.Data.DataRowVersion.Original)

                    Loop
                End If
                If Object.ReferenceEquals(newParent, parent) Then
                    Return true
                End If
                Return false
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function Compare(ByVal row1 As Global.System.Data.DataRow, ByVal row2 As Global.System.Data.DataRow) As Integer Implements Global.System.Collections.Generic.IComparer(Of Global.System.Data.DataRow).Compare
                If Object.ReferenceEquals(row1, row2) Then
                    Return 0
                End If
                If (row1 Is Nothing) Then
                    Return -1
                End If
                If (row2 Is Nothing) Then
                    Return 1
                End If

                'Is row1 the child or grandchild of row2
                If Me.IsChildAndParent(row1, row2) Then
                    Return Me._childFirst
                End If

                'Is row2 the child or grandchild of row1
                If Me.IsChildAndParent(row2, row1) Then
                    Return (-1 * Me._childFirst)
                End If
                Return 0
            End Function
        End Class
    End Class
End Namespace
