'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On



'''<summary>
'''Represents a strongly typed in-memory cache of data.
'''</summary>
<Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
 Global.System.Serializable(),  _
 Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
 Global.System.ComponentModel.ToolboxItem(true),  _
 Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
 Global.System.Xml.Serialization.XmlRootAttribute("CandidateEntityDataSet"),  _
 Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")>  _
Partial Public Class CandidateEntityDataSet
    Inherits Global.System.Data.DataSet
    
    Private tableCandidateEntity As CandidateEntityDataTable
    
    Private tableCandidateEntityAttribute As CandidateEntityAttributeDataTable
    
    Private relationCandidateEntity_Select_CandidateEntityAttribute_Select As Global.System.Data.DataRelation
    
    Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Sub New()
        MyBase.New
        Me.BeginInit
        Me.InitClass
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
        MyBase.New(info, context, false)
        If (Me.IsBinarySerialized(info, context) = true) Then
            Me.InitVars(false)
            Dim schemaChangedHandler1 As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler Me.Tables.CollectionChanged, schemaChangedHandler1
            AddHandler Me.Relations.CollectionChanged, schemaChangedHandler1
            Return
        End If
        Dim strSchema As String = CType(info.GetValue("XmlSchema", GetType(String)),String)
        If (Me.DetermineSchemaSerializationMode(info, context) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
            If (Not (ds.Tables("CandidateEntity")) Is Nothing) Then
                MyBase.Tables.Add(New CandidateEntityDataTable(ds.Tables("CandidateEntity")))
            End If
            If (Not (ds.Tables("CandidateEntityAttribute")) Is Nothing) Then
                MyBase.Tables.Add(New CandidateEntityAttributeDataTable(ds.Tables("CandidateEntityAttribute")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXmlSchema(New Global.System.Xml.XmlTextReader(New Global.System.IO.StringReader(strSchema)))
        End If
        Me.GetSerializationData(info, context)
        Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
        AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
        AddHandler Me.Relations.CollectionChanged, schemaChangedHandler
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CandidateEntity() As CandidateEntityDataTable
        Get
            Return Me.tableCandidateEntity
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.Browsable(false),  _
     Global.System.ComponentModel.DesignerSerializationVisibility(Global.System.ComponentModel.DesignerSerializationVisibility.Content)>  _
    Public ReadOnly Property CandidateEntityAttribute() As CandidateEntityAttributeDataTable
        Get
            Return Me.tableCandidateEntityAttribute
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.BrowsableAttribute(true),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Visible)>  _
    Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
        Get
            Return Me._schemaSerializationMode
        End Get
        Set
            Me._schemaSerializationMode = value
        End Set
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
        Get
            Return MyBase.Tables
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
     Global.System.ComponentModel.DesignerSerializationVisibilityAttribute(Global.System.ComponentModel.DesignerSerializationVisibility.Hidden)>  _
    Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
        Get
            Return MyBase.Relations
        End Get
    End Property
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub InitializeDerivedDataSet()
        Me.BeginInit
        Me.InitClass
        Me.EndInit
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Overrides Function Clone() As Global.System.Data.DataSet
        Dim cln As CandidateEntityDataSet = CType(MyBase.Clone,CandidateEntityDataSet)
        cln.InitVars
        cln.SchemaSerializationMode = Me.SchemaSerializationMode
        Return cln
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeTables() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function ShouldSerializeRelations() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
        If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
            Me.Reset
            Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
            ds.ReadXml(reader)
            If (Not (ds.Tables("CandidateEntity")) Is Nothing) Then
                MyBase.Tables.Add(New CandidateEntityDataTable(ds.Tables("CandidateEntity")))
            End If
            If (Not (ds.Tables("CandidateEntityAttribute")) Is Nothing) Then
                MyBase.Tables.Add(New CandidateEntityAttributeDataTable(ds.Tables("CandidateEntityAttribute")))
            End If
            Me.DataSetName = ds.DataSetName
            Me.Prefix = ds.Prefix
            Me.Namespace = ds.Namespace
            Me.Locale = ds.Locale
            Me.CaseSensitive = ds.CaseSensitive
            Me.EnforceConstraints = ds.EnforceConstraints
            Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
            Me.InitVars
        Else
            Me.ReadXml(reader)
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
        Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
        Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
        stream.Position = 0
        Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars()
        Me.InitVars(true)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Friend Overloads Sub InitVars(ByVal initTable As Boolean)
        Me.tableCandidateEntity = CType(MyBase.Tables("CandidateEntity"),CandidateEntityDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCandidateEntity) Is Nothing) Then
                Me.tableCandidateEntity.InitVars
            End If
        End If
        Me.tableCandidateEntityAttribute = CType(MyBase.Tables("CandidateEntityAttribute"),CandidateEntityAttributeDataTable)
        If (initTable = true) Then
            If (Not (Me.tableCandidateEntityAttribute) Is Nothing) Then
                Me.tableCandidateEntityAttribute.InitVars
            End If
        End If
        Me.relationCandidateEntity_Select_CandidateEntityAttribute_Select = Me.Relations("CandidateEntity_Select_CandidateEntityAttribute_Select")
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub InitClass()
        Me.DataSetName = "CandidateEntityDataSet"
        Me.Prefix = ""
        Me.Namespace = "http://www.activiser.com/SchemaEditor/CandidateEntity.xsd"
        Me.EnforceConstraints = true
        Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        Me.tableCandidateEntity = New CandidateEntityDataTable
        MyBase.Tables.Add(Me.tableCandidateEntity)
        Me.tableCandidateEntityAttribute = New CandidateEntityAttributeDataTable
        MyBase.Tables.Add(Me.tableCandidateEntityAttribute)
        Dim fkc As Global.System.Data.ForeignKeyConstraint
        fkc = New Global.System.Data.ForeignKeyConstraint("CandidateEntity_Select_CandidateEntityAttribute_Select", New Global.System.Data.DataColumn() {Me.tableCandidateEntity.SchemaNameColumn, Me.tableCandidateEntity.EntityNameColumn}, New Global.System.Data.DataColumn() {Me.tableCandidateEntityAttribute.SchemaNameColumn, Me.tableCandidateEntityAttribute.EntityNameColumn})
        Me.tableCandidateEntityAttribute.Constraints.Add(fkc)
        fkc.AcceptRejectRule = Global.System.Data.AcceptRejectRule.None
        fkc.DeleteRule = Global.System.Data.Rule.Cascade
        fkc.UpdateRule = Global.System.Data.Rule.None
        Me.relationCandidateEntity_Select_CandidateEntityAttribute_Select = New Global.System.Data.DataRelation("CandidateEntity_Select_CandidateEntityAttribute_Select", New Global.System.Data.DataColumn() {Me.tableCandidateEntity.SchemaNameColumn, Me.tableCandidateEntity.EntityNameColumn}, New Global.System.Data.DataColumn() {Me.tableCandidateEntityAttribute.SchemaNameColumn, Me.tableCandidateEntityAttribute.EntityNameColumn}, false)
        Me.Relations.Add(Me.relationCandidateEntity_Select_CandidateEntityAttribute_Select)
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCandidateEntity() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Function ShouldSerializeCandidateEntityAttribute() As Boolean
        Return false
    End Function
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
        If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
            Me.InitVars
        End If
    End Sub
    
    <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
    Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
        Dim ds As CandidateEntityDataSet = New CandidateEntityDataSet
        Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
        Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
        Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
        any.Namespace = ds.Namespace
        sequence.Items.Add(any)
        type.Particle = sequence
        Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
        If xs.Contains(dsSchema.TargetNamespace) Then
            Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Try 
                Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                dsSchema.Write(s1)
                Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                Do While schemas.MoveNext
                    schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                    s2.SetLength(0)
                    schema.Write(s2)
                    If (s1.Length = s2.Length) Then
                        s1.Position = 0
                        s2.Position = 0
                        
                        Do While ((s1.Position <> s1.Length)  _
                                    AndAlso (s1.ReadByte = s2.ReadByte))
                            
                            
                        Loop
                        If (s1.Position = s1.Length) Then
                            Return type
                        End If
                    End If
                    
                Loop
            Finally
                If (Not (s1) Is Nothing) Then
                    s1.Close
                End If
                If (Not (s2) Is Nothing) Then
                    s2.Close
                End If
            End Try
        End If
        xs.Add(dsSchema)
        Return type
    End Function
    
    Public Delegate Sub CandidateEntityRowChangeEventHandler(ByVal sender As Object, ByVal e As CandidateEntityRowChangeEvent)
    
    Public Delegate Sub CandidateEntityAttributeRowChangeEventHandler(ByVal sender As Object, ByVal e As CandidateEntityAttributeRowChangeEvent)
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CandidateEntityDataTable
        Inherits Global.System.Data.TypedTableBase(Of CandidateEntityRow)
        
        Private columnSchemaName As Global.System.Data.DataColumn
        
        Private columnEntityName As Global.System.Data.DataColumn
        
        Private columnSqlObjectType As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CandidateEntity"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchemaNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchemaName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntityNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntityName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SqlObjectTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSqlObjectType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CandidateEntityRow
            Get
                Return CType(Me.Rows(index),CandidateEntityRow)
            End Get
        End Property
        
        Public Event CandidateEntityRowChanging As CandidateEntityRowChangeEventHandler
        
        Public Event CandidateEntityRowChanged As CandidateEntityRowChangeEventHandler
        
        Public Event CandidateEntityRowDeleting As CandidateEntityRowChangeEventHandler
        
        Public Event CandidateEntityRowDeleted As CandidateEntityRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCandidateEntityRow(ByVal row As CandidateEntityRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCandidateEntityRow(ByVal SchemaName As String, ByVal EntityName As String, ByVal SqlObjectType As String) As CandidateEntityRow
            Dim rowCandidateEntityRow As CandidateEntityRow = CType(Me.NewRow,CandidateEntityRow)
            Dim columnValuesArray() As Object = New Object() {SchemaName, EntityName, SqlObjectType}
            rowCandidateEntityRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCandidateEntityRow)
            Return rowCandidateEntityRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySchemaNameEntityName(ByVal SchemaName As String, ByVal EntityName As String) As CandidateEntityRow
            Return CType(Me.Rows.Find(New Object() {SchemaName, EntityName}),CandidateEntityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CandidateEntityDataTable = CType(MyBase.Clone,CandidateEntityDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CandidateEntityDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSchemaName = MyBase.Columns("SchemaName")
            Me.columnEntityName = MyBase.Columns("EntityName")
            Me.columnSqlObjectType = MyBase.Columns("SqlObjectType")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSchemaName = New Global.System.Data.DataColumn("SchemaName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchemaName)
            Me.columnEntityName = New Global.System.Data.DataColumn("EntityName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntityName)
            Me.columnSqlObjectType = New Global.System.Data.DataColumn("SqlObjectType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSqlObjectType)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSchemaName, Me.columnEntityName}, true))
            Me.columnSchemaName.AllowDBNull = false
            Me.columnSchemaName.MaxLength = 128
            Me.columnEntityName.AllowDBNull = false
            Me.columnEntityName.MaxLength = 128
            Me.columnSqlObjectType.AllowDBNull = false
            Me.columnSqlObjectType.MaxLength = 2
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCandidateEntityRow() As CandidateEntityRow
            Return CType(Me.NewRow,CandidateEntityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CandidateEntityRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CandidateEntityRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CandidateEntityRowChangedEvent) Is Nothing) Then
                RaiseEvent CandidateEntityRowChanged(Me, New CandidateEntityRowChangeEvent(CType(e.Row,CandidateEntityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CandidateEntityRowChangingEvent) Is Nothing) Then
                RaiseEvent CandidateEntityRowChanging(Me, New CandidateEntityRowChangeEvent(CType(e.Row,CandidateEntityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CandidateEntityRowDeletedEvent) Is Nothing) Then
                RaiseEvent CandidateEntityRowDeleted(Me, New CandidateEntityRowChangeEvent(CType(e.Row,CandidateEntityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CandidateEntityRowDeletingEvent) Is Nothing) Then
                RaiseEvent CandidateEntityRowDeleting(Me, New CandidateEntityRowChangeEvent(CType(e.Row,CandidateEntityRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCandidateEntityRow(ByVal row As CandidateEntityRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CandidateEntityDataSet = New CandidateEntityDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CandidateEntityDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents the strongly named DataTable class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.Serializable(),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
    Partial Public Class CandidateEntityAttributeDataTable
        Inherits Global.System.Data.TypedTableBase(Of CandidateEntityAttributeRow)
        
        Private columnSchemaName As Global.System.Data.DataColumn
        
        Private columnEntityName As Global.System.Data.DataColumn
        
        Private columnAttributeName As Global.System.Data.DataColumn
        
        Private columnAttributeType As Global.System.Data.DataColumn
        
        Private columnAttributeFullType As Global.System.Data.DataColumn
        
        Private columnAttributeIsPK As Global.System.Data.DataColumn
        
        Private columnAttributeOrderInPK As Global.System.Data.DataColumn
        
        Private columnAttributeHoldsComputedValue As Global.System.Data.DataColumn
        
        Private columnAttributeIsNullable As Global.System.Data.DataColumn
        
        Private columnMaxLength As Global.System.Data.DataColumn
        
        Private columnPrecision As Global.System.Data.DataColumn
        
        Private columnScale As Global.System.Data.DataColumn
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.TableName = "CandidateEntityAttribute"
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal table As Global.System.Data.DataTable)
            MyBase.New
            Me.TableName = table.TableName
            If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                Me.CaseSensitive = table.CaseSensitive
            End If
            If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                Me.Locale = table.Locale
            End If
            If (table.Namespace <> table.DataSet.Namespace) Then
                Me.Namespace = table.Namespace
            End If
            Me.Prefix = table.Prefix
            Me.MinimumCapacity = table.MinimumCapacity
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Sub New(ByVal info As Global.System.Runtime.Serialization.SerializationInfo, ByVal context As Global.System.Runtime.Serialization.StreamingContext)
            MyBase.New(info, context)
            Me.InitVars
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SchemaNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnSchemaName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EntityNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnEntityName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AttributeNameColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAttributeName
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AttributeTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAttributeType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AttributeFullTypeColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAttributeFullType
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AttributeIsPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAttributeIsPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AttributeOrderInPKColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAttributeOrderInPK
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AttributeHoldsComputedValueColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAttributeHoldsComputedValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property AttributeIsNullableColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnAttributeIsNullable
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property MaxLengthColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnMaxLength
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property PrecisionColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnPrecision
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ScaleColumn() As Global.System.Data.DataColumn
            Get
                Return Me.columnScale
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Browsable(false)>  _
        Public ReadOnly Property Count() As Integer
            Get
                Return Me.Rows.Count
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Default ReadOnly Property Item(ByVal index As Integer) As CandidateEntityAttributeRow
            Get
                Return CType(Me.Rows(index),CandidateEntityAttributeRow)
            End Get
        End Property
        
        Public Event CandidateEntityAttributeRowChanging As CandidateEntityAttributeRowChangeEventHandler
        
        Public Event CandidateEntityAttributeRowChanged As CandidateEntityAttributeRowChangeEventHandler
        
        Public Event CandidateEntityAttributeRowDeleting As CandidateEntityAttributeRowChangeEventHandler
        
        Public Event CandidateEntityAttributeRowDeleted As CandidateEntityAttributeRowChangeEventHandler
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Sub AddCandidateEntityAttributeRow(ByVal row As CandidateEntityAttributeRow)
            Me.Rows.Add(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overloads Function AddCandidateEntityAttributeRow(ByVal SchemaName As String, ByVal EntityName As String, ByVal AttributeName As String, ByVal AttributeType As String, ByVal AttributeFullType As String, ByVal AttributeIsPK As Integer, ByVal AttributeOrderInPK As Integer, ByVal AttributeHoldsComputedValue As Boolean, ByVal AttributeIsNullable As Boolean, ByVal MaxLength As Short, ByVal Precision As Byte, ByVal Scale As Byte) As CandidateEntityAttributeRow
            Dim rowCandidateEntityAttributeRow As CandidateEntityAttributeRow = CType(Me.NewRow,CandidateEntityAttributeRow)
            Dim columnValuesArray() As Object = New Object() {SchemaName, EntityName, AttributeName, AttributeType, AttributeFullType, AttributeIsPK, AttributeOrderInPK, AttributeHoldsComputedValue, AttributeIsNullable, MaxLength, Precision, Scale}
            rowCandidateEntityAttributeRow.ItemArray = columnValuesArray
            Me.Rows.Add(rowCandidateEntityAttributeRow)
            Return rowCandidateEntityAttributeRow
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function FindBySchemaNameEntityNameAttributeName(ByVal SchemaName As String, ByVal EntityName As String, ByVal AttributeName As String) As CandidateEntityAttributeRow
            Return CType(Me.Rows.Find(New Object() {SchemaName, EntityName, AttributeName}),CandidateEntityAttributeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataTable
            Dim cln As CandidateEntityAttributeDataTable = CType(MyBase.Clone,CandidateEntityAttributeDataTable)
            cln.InitVars
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
            Return New CandidateEntityAttributeDataTable
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub InitVars()
            Me.columnSchemaName = MyBase.Columns("SchemaName")
            Me.columnEntityName = MyBase.Columns("EntityName")
            Me.columnAttributeName = MyBase.Columns("AttributeName")
            Me.columnAttributeType = MyBase.Columns("AttributeType")
            Me.columnAttributeFullType = MyBase.Columns("AttributeFullType")
            Me.columnAttributeIsPK = MyBase.Columns("AttributeIsPK")
            Me.columnAttributeOrderInPK = MyBase.Columns("AttributeOrderInPK")
            Me.columnAttributeHoldsComputedValue = MyBase.Columns("AttributeHoldsComputedValue")
            Me.columnAttributeIsNullable = MyBase.Columns("AttributeIsNullable")
            Me.columnMaxLength = MyBase.Columns("MaxLength")
            Me.columnPrecision = MyBase.Columns("Precision")
            Me.columnScale = MyBase.Columns("Scale")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.columnSchemaName = New Global.System.Data.DataColumn("SchemaName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnSchemaName)
            Me.columnEntityName = New Global.System.Data.DataColumn("EntityName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnEntityName)
            Me.columnAttributeName = New Global.System.Data.DataColumn("AttributeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAttributeName)
            Me.columnAttributeType = New Global.System.Data.DataColumn("AttributeType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAttributeType)
            Me.columnAttributeFullType = New Global.System.Data.DataColumn("AttributeFullType", GetType(String), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAttributeFullType)
            Me.columnAttributeIsPK = New Global.System.Data.DataColumn("AttributeIsPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAttributeIsPK)
            Me.columnAttributeOrderInPK = New Global.System.Data.DataColumn("AttributeOrderInPK", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAttributeOrderInPK)
            Me.columnAttributeHoldsComputedValue = New Global.System.Data.DataColumn("AttributeHoldsComputedValue", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAttributeHoldsComputedValue)
            Me.columnAttributeIsNullable = New Global.System.Data.DataColumn("AttributeIsNullable", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnAttributeIsNullable)
            Me.columnMaxLength = New Global.System.Data.DataColumn("MaxLength", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnMaxLength)
            Me.columnPrecision = New Global.System.Data.DataColumn("Precision", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnPrecision)
            Me.columnScale = New Global.System.Data.DataColumn("Scale", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
            MyBase.Columns.Add(Me.columnScale)
            Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSchemaName, Me.columnEntityName, Me.columnAttributeName}, true))
            Me.columnSchemaName.AllowDBNull = false
            Me.columnSchemaName.MaxLength = 128
            Me.columnEntityName.AllowDBNull = false
            Me.columnEntityName.MaxLength = 128
            Me.columnAttributeName.AllowDBNull = false
            Me.columnAttributeName.MaxLength = 128
            Me.columnAttributeType.AllowDBNull = false
            Me.columnAttributeType.MaxLength = 128
            Me.columnAttributeFullType.ReadOnly = true
            Me.columnAttributeFullType.MaxLength = 256
            Me.columnAttributeIsPK.ReadOnly = true
            Me.columnAttributeOrderInPK.ReadOnly = true
            Me.columnAttributeHoldsComputedValue.ReadOnly = true
            Me.columnAttributeIsNullable.ReadOnly = true
            Me.columnMaxLength.AllowDBNull = false
            Me.columnPrecision.AllowDBNull = false
            Me.columnScale.AllowDBNull = false
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function NewCandidateEntityAttributeRow() As CandidateEntityAttributeRow
            Return CType(Me.NewRow,CandidateEntityAttributeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
            Return New CandidateEntityAttributeRow(builder)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetRowType() As Global.System.Type
            Return GetType(CandidateEntityAttributeRow)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanged(e)
            If (Not (Me.CandidateEntityAttributeRowChangedEvent) Is Nothing) Then
                RaiseEvent CandidateEntityAttributeRowChanged(Me, New CandidateEntityAttributeRowChangeEvent(CType(e.Row,CandidateEntityAttributeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowChanging(e)
            If (Not (Me.CandidateEntityAttributeRowChangingEvent) Is Nothing) Then
                RaiseEvent CandidateEntityAttributeRowChanging(Me, New CandidateEntityAttributeRowChangeEvent(CType(e.Row,CandidateEntityAttributeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleted(e)
            If (Not (Me.CandidateEntityAttributeRowDeletedEvent) Is Nothing) Then
                RaiseEvent CandidateEntityAttributeRowDeleted(Me, New CandidateEntityAttributeRowChangeEvent(CType(e.Row,CandidateEntityAttributeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
            MyBase.OnRowDeleting(e)
            If (Not (Me.CandidateEntityAttributeRowDeletingEvent) Is Nothing) Then
                RaiseEvent CandidateEntityAttributeRowDeleting(Me, New CandidateEntityAttributeRowChangeEvent(CType(e.Row,CandidateEntityAttributeRow), e.Action))
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub RemoveCandidateEntityAttributeRow(ByVal row As CandidateEntityAttributeRow)
            Me.Rows.Remove(row)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim ds As CandidateEntityDataSet = New CandidateEntityDataSet
            Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any1.Namespace = "http://www.w3.org/2001/XMLSchema"
            any1.MinOccurs = New Decimal(0)
            any1.MaxOccurs = Decimal.MaxValue
            any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any1)
            Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
            any2.MinOccurs = New Decimal(1)
            any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
            sequence.Items.Add(any2)
            Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute1.Name = "namespace"
            attribute1.FixedValue = ds.Namespace
            type.Attributes.Add(attribute1)
            Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
            attribute2.Name = "tableTypeName"
            attribute2.FixedValue = "CandidateEntityAttributeDataTable"
            type.Attributes.Add(attribute2)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CandidateEntityRow
        Inherits Global.System.Data.DataRow
        
        Private tableCandidateEntity As CandidateEntityDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCandidateEntity = CType(Me.Table,CandidateEntityDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchemaName() As String
            Get
                Return CType(Me(Me.tableCandidateEntity.SchemaNameColumn),String)
            End Get
            Set
                Me(Me.tableCandidateEntity.SchemaNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntityName() As String
            Get
                Return CType(Me(Me.tableCandidateEntity.EntityNameColumn),String)
            End Get
            Set
                Me(Me.tableCandidateEntity.EntityNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SqlObjectType() As String
            Get
                Return CType(Me(Me.tableCandidateEntity.SqlObjectTypeColumn),String)
            End Get
            Set
                Me(Me.tableCandidateEntity.SqlObjectTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function GetCandidateEntityAttributeRows() As CandidateEntityAttributeRow()
            If (Me.Table.ChildRelations("CandidateEntity_Select_CandidateEntityAttribute_Select") Is Nothing) Then
                Return New CandidateEntityAttributeRow(-1) {}
            Else
                Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("CandidateEntity_Select_CandidateEntityAttribute_Select")),CandidateEntityAttributeRow())
            End If
        End Function
    End Class
    
    '''<summary>
    '''Represents strongly named DataRow class.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Partial Public Class CandidateEntityAttributeRow
        Inherits Global.System.Data.DataRow
        
        Private tableCandidateEntityAttribute As CandidateEntityAttributeDataTable
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
            MyBase.New(rb)
            Me.tableCandidateEntityAttribute = CType(Me.Table,CandidateEntityAttributeDataTable)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property SchemaName() As String
            Get
                Return CType(Me(Me.tableCandidateEntityAttribute.SchemaNameColumn),String)
            End Get
            Set
                Me(Me.tableCandidateEntityAttribute.SchemaNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property EntityName() As String
            Get
                Return CType(Me(Me.tableCandidateEntityAttribute.EntityNameColumn),String)
            End Get
            Set
                Me(Me.tableCandidateEntityAttribute.EntityNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AttributeName() As String
            Get
                Return CType(Me(Me.tableCandidateEntityAttribute.AttributeNameColumn),String)
            End Get
            Set
                Me(Me.tableCandidateEntityAttribute.AttributeNameColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AttributeType() As String
            Get
                Return CType(Me(Me.tableCandidateEntityAttribute.AttributeTypeColumn),String)
            End Get
            Set
                Me(Me.tableCandidateEntityAttribute.AttributeTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AttributeFullType() As String
            Get
                Try 
                    Return CType(Me(Me.tableCandidateEntityAttribute.AttributeFullTypeColumn),String)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AttributeFullType' in table 'CandidateEntityAttribute' is D"& _ 
                            "BNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCandidateEntityAttribute.AttributeFullTypeColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AttributeIsPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCandidateEntityAttribute.AttributeIsPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AttributeIsPK' in table 'CandidateEntityAttribute' is DBNul"& _ 
                            "l.", e)
                End Try
            End Get
            Set
                Me(Me.tableCandidateEntityAttribute.AttributeIsPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AttributeOrderInPK() As Integer
            Get
                Try 
                    Return CType(Me(Me.tableCandidateEntityAttribute.AttributeOrderInPKColumn),Integer)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AttributeOrderInPK' in table 'CandidateEntityAttribute' is "& _ 
                            "DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCandidateEntityAttribute.AttributeOrderInPKColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AttributeHoldsComputedValue() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCandidateEntityAttribute.AttributeHoldsComputedValueColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AttributeHoldsComputedValue' in table 'CandidateEntityAttri"& _ 
                            "bute' is DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCandidateEntityAttribute.AttributeHoldsComputedValueColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property AttributeIsNullable() As Boolean
            Get
                Try 
                    Return CType(Me(Me.tableCandidateEntityAttribute.AttributeIsNullableColumn),Boolean)
                Catch e As Global.System.InvalidCastException
                    Throw New Global.System.Data.StrongTypingException("The value for column 'AttributeIsNullable' in table 'CandidateEntityAttribute' is"& _ 
                            " DBNull.", e)
                End Try
            End Get
            Set
                Me(Me.tableCandidateEntityAttribute.AttributeIsNullableColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property MaxLength() As Short
            Get
                Return CType(Me(Me.tableCandidateEntityAttribute.MaxLengthColumn),Short)
            End Get
            Set
                Me(Me.tableCandidateEntityAttribute.MaxLengthColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Precision() As Byte
            Get
                Return CType(Me(Me.tableCandidateEntityAttribute.PrecisionColumn),Byte)
            End Get
            Set
                Me(Me.tableCandidateEntityAttribute.PrecisionColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property Scale() As Byte
            Get
                Return CType(Me(Me.tableCandidateEntityAttribute.ScaleColumn),Byte)
            End Get
            Set
                Me(Me.tableCandidateEntityAttribute.ScaleColumn) = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property CandidateEntityRowParent() As CandidateEntityRow
            Get
                Return CType(Me.GetParentRow(Me.Table.ParentRelations("CandidateEntity_Select_CandidateEntityAttribute_Select")),CandidateEntityRow)
            End Get
            Set
                Me.SetParentRow(value, Me.Table.ParentRelations("CandidateEntity_Select_CandidateEntityAttribute_Select"))
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAttributeFullTypeNull() As Boolean
            Return Me.IsNull(Me.tableCandidateEntityAttribute.AttributeFullTypeColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAttributeFullTypeNull()
            Me(Me.tableCandidateEntityAttribute.AttributeFullTypeColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAttributeIsPKNull() As Boolean
            Return Me.IsNull(Me.tableCandidateEntityAttribute.AttributeIsPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAttributeIsPKNull()
            Me(Me.tableCandidateEntityAttribute.AttributeIsPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAttributeOrderInPKNull() As Boolean
            Return Me.IsNull(Me.tableCandidateEntityAttribute.AttributeOrderInPKColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAttributeOrderInPKNull()
            Me(Me.tableCandidateEntityAttribute.AttributeOrderInPKColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAttributeHoldsComputedValueNull() As Boolean
            Return Me.IsNull(Me.tableCandidateEntityAttribute.AttributeHoldsComputedValueColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAttributeHoldsComputedValueNull()
            Me(Me.tableCandidateEntityAttribute.AttributeHoldsComputedValueColumn) = Global.System.Convert.DBNull
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Function IsAttributeIsNullableNull() As Boolean
            Return Me.IsNull(Me.tableCandidateEntityAttribute.AttributeIsNullableColumn)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub SetAttributeIsNullableNull()
            Me(Me.tableCandidateEntityAttribute.AttributeIsNullableColumn) = Global.System.Convert.DBNull
        End Sub
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CandidateEntityRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CandidateEntityRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CandidateEntityRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CandidateEntityRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
    
    '''<summary>
    '''Row event argument class
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")>  _
    Public Class CandidateEntityAttributeRowChangeEvent
        Inherits Global.System.EventArgs
        
        Private eventRow As CandidateEntityAttributeRow
        
        Private eventAction As Global.System.Data.DataRowAction
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New(ByVal row As CandidateEntityAttributeRow, ByVal action As Global.System.Data.DataRowAction)
            MyBase.New
            Me.eventRow = row
            Me.eventAction = action
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Row() As CandidateEntityAttributeRow
            Get
                Return Me.eventRow
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Action() As Global.System.Data.DataRowAction
            Get
                Return Me.eventAction
            End Get
        End Property
    End Class
End Class

Namespace CandidateEntityDataSetTableAdapters
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CandidateEntityTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CandidateEntity"
            tableMapping.ColumnMappings.Add("SchemaName", "SchemaName")
            tableMapping.ColumnMappings.Add("EntityName", "EntityName")
            tableMapping.ColumnMappings.Add("SqlObjectType", "SqlObjectType")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.activiser.SchemaEditor.My.MySettings.Default.designerConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "metadata.CandidateEntity_Select"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CandidateEntityDataSet.CandidateEntityDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CandidateEntityDataSet.CandidateEntityDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CandidateEntityDataSet.CandidateEntityDataTable = New CandidateEntityDataSet.CandidateEntityDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
    
    '''<summary>
    '''Represents the connection and commands used to retrieve and save data.
    '''</summary>
    <Global.System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0"),  _
     Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.ComponentModel.ToolboxItem(true),  _
     Global.System.ComponentModel.DataObjectAttribute(true),  _
     Global.System.ComponentModel.DesignerAttribute("Microsoft.VSDesigner.DataSource.Design.TableAdapterDesigner, Microsoft.VSDesigner"& _ 
        ", Version=8.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a"),  _
     Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter")>  _
    Partial Public Class CandidateEntityAttributeTableAdapter
        Inherits Global.System.ComponentModel.Component
        
        Private WithEvents _adapter As Global.System.Data.SqlClient.SqlDataAdapter
        
        Private _connection As Global.System.Data.SqlClient.SqlConnection
        
        Private _commandCollection() As Global.System.Data.SqlClient.SqlCommand
        
        Private _clearBeforeFill As Boolean
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.ClearBeforeFill = true
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private ReadOnly Property Adapter() As Global.System.Data.SqlClient.SqlDataAdapter
            Get
                If (Me._adapter Is Nothing) Then
                    Me.InitAdapter
                End If
                Return Me._adapter
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Property Connection() As Global.System.Data.SqlClient.SqlConnection
            Get
                If (Me._connection Is Nothing) Then
                    Me.InitConnection
                End If
                Return Me._connection
            End Get
            Set
                Me._connection = value
                If (Not (Me.Adapter.InsertCommand) Is Nothing) Then
                    Me.Adapter.InsertCommand.Connection = value
                End If
                If (Not (Me.Adapter.DeleteCommand) Is Nothing) Then
                    Me.Adapter.DeleteCommand.Connection = value
                End If
                If (Not (Me.Adapter.UpdateCommand) Is Nothing) Then
                    Me.Adapter.UpdateCommand.Connection = value
                End If
                Dim i As Integer = 0
                Do While (i < Me.CommandCollection.Length)
                    If (Not (Me.CommandCollection(i)) Is Nothing) Then
                        CType(Me.CommandCollection(i),Global.System.Data.SqlClient.SqlCommand).Connection = value
                    End If
                    i = (i + 1)
                Loop
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected ReadOnly Property CommandCollection() As Global.System.Data.SqlClient.SqlCommand()
            Get
                If (Me._commandCollection Is Nothing) Then
                    Me.InitCommandCollection
                End If
                Return Me._commandCollection
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Property ClearBeforeFill() As Boolean
            Get
                Return Me._clearBeforeFill
            End Get
            Set
                Me._clearBeforeFill = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitAdapter()
            Me._adapter = New Global.System.Data.SqlClient.SqlDataAdapter
            Dim tableMapping As Global.System.Data.Common.DataTableMapping = New Global.System.Data.Common.DataTableMapping
            tableMapping.SourceTable = "Table"
            tableMapping.DataSetTable = "CandidateEntityAttribute"
            tableMapping.ColumnMappings.Add("SchemaName", "SchemaName")
            tableMapping.ColumnMappings.Add("EntityName", "EntityName")
            tableMapping.ColumnMappings.Add("AttributeName", "AttributeName")
            tableMapping.ColumnMappings.Add("AttributeType", "AttributeType")
            tableMapping.ColumnMappings.Add("AttributeFullType", "AttributeFullType")
            tableMapping.ColumnMappings.Add("AttributeIsPK", "AttributeIsPK")
            tableMapping.ColumnMappings.Add("AttributeOrderInPK", "AttributeOrderInPK")
            tableMapping.ColumnMappings.Add("AttributeHoldsComputedValue", "AttributeHoldsComputedValue")
            tableMapping.ColumnMappings.Add("AttributeIsNullable", "AttributeIsNullable")
            tableMapping.ColumnMappings.Add("MaxLength", "MaxLength")
            tableMapping.ColumnMappings.Add("Precision", "Precision")
            tableMapping.ColumnMappings.Add("Scale", "Scale")
            Me._adapter.TableMappings.Add(tableMapping)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitConnection()
            Me._connection = New Global.System.Data.SqlClient.SqlConnection
            Me._connection.ConnectionString = Global.activiser.SchemaEditor.My.MySettings.Default.designerConnectionString
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitCommandCollection()
            Me._commandCollection = New Global.System.Data.SqlClient.SqlCommand(0) {}
            Me._commandCollection(0) = New Global.System.Data.SqlClient.SqlCommand
            Me._commandCollection(0).Connection = Me.Connection
            Me._commandCollection(0).CommandText = "metadata.CandidateEntityAttribute_Select"
            Me._commandCollection(0).CommandType = Global.System.Data.CommandType.StoredProcedure
            Me._commandCollection(0).Parameters.Add(New Global.System.Data.SqlClient.SqlParameter("@RETURN_VALUE", Global.System.Data.SqlDbType.Int, 4, Global.System.Data.ParameterDirection.ReturnValue, 10, 0, Nothing, Global.System.Data.DataRowVersion.Current, false, Nothing, "", "", ""))
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.Fill, true)>  _
        Public Overloads Overridable Function Fill(ByVal dataTable As CandidateEntityDataSet.CandidateEntityAttributeDataTable) As Integer
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            If (Me.ClearBeforeFill = true) Then
                dataTable.Clear
            End If
            Dim returnValue As Integer = Me.Adapter.Fill(dataTable)
            Return returnValue
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute(),  _
         Global.System.ComponentModel.Design.HelpKeywordAttribute("vs.data.TableAdapter"),  _
         Global.System.ComponentModel.DataObjectMethodAttribute(Global.System.ComponentModel.DataObjectMethodType.[Select], true)>  _
        Public Overloads Overridable Function GetData() As CandidateEntityDataSet.CandidateEntityAttributeDataTable
            Me.Adapter.SelectCommand = Me.CommandCollection(0)
            Dim dataTable As CandidateEntityDataSet.CandidateEntityAttributeDataTable = New CandidateEntityDataSet.CandidateEntityAttributeDataTable
            Me.Adapter.Fill(dataTable)
            Return dataTable
        End Function
    End Class
End Namespace
