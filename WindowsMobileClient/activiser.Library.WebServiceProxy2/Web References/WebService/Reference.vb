'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:2.0.50727.3053
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Data
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.3053.
'
Namespace WebService
    
    '''<remarks/>
    <System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="activiserSoap", [Namespace]:="http://www.activiser.com/activiser")>  _
    Partial Public Class activiser
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = "http://localhost:4200/activiser/activiser.asmx"
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/TestGateway", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TestGateway() As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("TestGateway", New Object(-1) {})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginTestGateway(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TestGateway", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndTestGateway(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/UploadEventLog", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadEventLog(ByVal deviceId As String, ByVal dsEvent As EventLogDataSet) As Boolean
            Dim results() As Object = Me.Invoke("UploadEventLog", New Object() {deviceId, dsEvent})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadEventLog(ByVal deviceId As String, ByVal dsEvent As EventLogDataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadEventLog", New Object() {deviceId, dsEvent}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadEventLog(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/UploadDeviceTrackingInfo", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadDeviceTrackingInfo(ByVal deviceId As String, ByVal trackingData As DeviceTrackingDataSet) As Boolean
            Dim results() As Object = Me.Invoke("UploadDeviceTrackingInfo", New Object() {deviceId, trackingData})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadDeviceTrackingInfo(ByVal deviceId As String, ByVal trackingData As DeviceTrackingDataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadDeviceTrackingInfo", New Object() {deviceId, trackingData}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadDeviceTrackingInfo(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetCurrentConsultantList", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrentConsultantList(ByVal deviceId As String) As Utility.ActiveConsultantsDataTable
            Dim results() As Object = Me.Invoke("GetCurrentConsultantList", New Object() {deviceId})
            Return CType(results(0),Utility.ActiveConsultantsDataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCurrentConsultantList(ByVal deviceId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCurrentConsultantList", New Object() {deviceId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCurrentConsultantList(ByVal asyncResult As System.IAsyncResult) As Utility.ActiveConsultantsDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Utility.ActiveConsultantsDataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetActiviserConsultantList", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetActiviserConsultantList(ByVal deviceId As String) As activiserDataSet.ConsultantDataTable
            Dim results() As Object = Me.Invoke("GetActiviserConsultantList", New Object() {deviceId})
            Return CType(results(0),activiserDataSet.ConsultantDataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginGetActiviserConsultantList(ByVal deviceId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetActiviserConsultantList", New Object() {deviceId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetActiviserConsultantList(ByVal asyncResult As System.IAsyncResult) As activiserDataSet.ConsultantDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet.ConsultantDataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetConsultantDetails", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConsultantDetails(ByVal deviceId As String, ByVal UserUid As System.Guid, ByVal ConsultantUid As System.Guid) As activiserDataSet
            Dim results() As Object = Me.Invoke("GetConsultantDetails", New Object() {deviceId, UserUid, ConsultantUid})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetConsultantDetails(ByVal deviceId As String, ByVal UserUid As System.Guid, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetConsultantDetails", New Object() {deviceId, UserUid, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetConsultantDetails(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/TestEmail", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function TestEmail(ByVal deviceid As String, ByVal host As String, ByVal port As Integer, ByVal sender As String, ByVal recipients As String, ByVal subject As String, ByVal message As String) As String
            Dim results() As Object = Me.Invoke("TestEmail", New Object() {deviceid, host, port, sender, recipients, subject, message})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginTestEmail(ByVal deviceid As String, ByVal host As String, ByVal port As Integer, ByVal sender As String, ByVal recipients As String, ByVal subject As String, ByVal message As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("TestEmail", New Object() {deviceid, host, port, sender, recipients, subject, message}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndTestEmail(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/CheckDeviceId", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckDeviceId(ByVal DeviceIdString As String) As Boolean
            Dim results() As Object = Me.Invoke("CheckDeviceId", New Object() {DeviceIdString})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginCheckDeviceId(ByVal DeviceIdString As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CheckDeviceId", New Object() {DeviceIdString}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCheckDeviceId(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetServerTime", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetServerTime(ByVal deviceId As String) As Date
            Dim results() As Object = Me.Invoke("GetServerTime", New Object() {deviceId})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Function BeginGetServerTime(ByVal deviceId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetServerTime", New Object() {deviceId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetServerTime(ByVal asyncResult As System.IAsyncResult) As Date
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetServerVersion", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetServerVersion(ByVal deviceId As String) As String
            Dim results() As Object = Me.Invoke("GetServerVersion", New Object() {deviceId})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginGetServerVersion(ByVal deviceId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetServerVersion", New Object() {deviceId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetServerVersion(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/CheckConnection", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CheckConnection() As String
            Dim results() As Object = Me.Invoke("CheckConnection", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginCheckConnection(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("CheckConnection", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndCheckConnection(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetTerminology", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetTerminology(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal ClientKey As Integer, ByVal LanguageId As Integer, ByVal ModifiedSince As Date) As LanguageDataSet
            Dim results() As Object = Me.Invoke("GetTerminology", New Object() {deviceId, ConsultantUid, ClientKey, LanguageId, ModifiedSince})
            Return CType(results(0),LanguageDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetTerminology(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal ClientKey As Integer, ByVal LanguageId As Integer, ByVal ModifiedSince As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetTerminology", New Object() {deviceId, ConsultantUid, ClientKey, LanguageId, ModifiedSince}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetTerminology(ByVal asyncResult As System.IAsyncResult) As LanguageDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),LanguageDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/WhoAmI", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function WhoAmI() As String
            Dim results() As Object = Me.Invoke("WhoAmI", New Object(-1) {})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginWhoAmI(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("WhoAmI", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndWhoAmI(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ClientGetUserDetails", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ClientGetUserDetails(ByVal deviceId As String, ByVal userName As String, ByVal passPhrase As String) As activiserDataSet.ConsultantDataTable
            Dim results() As Object = Me.Invoke("ClientGetUserDetails", New Object() {deviceId, userName, passPhrase})
            Return CType(results(0),activiserDataSet.ConsultantDataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginClientGetUserDetails(ByVal deviceId As String, ByVal userName As String, ByVal passPhrase As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ClientGetUserDetails", New Object() {deviceId, userName, passPhrase}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndClientGetUserDetails(ByVal asyncResult As System.IAsyncResult) As activiserDataSet.ConsultantDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet.ConsultantDataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/SyncStart", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncStart(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As Date
            Dim results() As Object = Me.Invoke("SyncStart", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Function BeginSyncStart(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SyncStart", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSyncStart(ByVal asyncResult As System.IAsyncResult) As Date
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/SyncComplete", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SyncComplete(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As Date
            Dim results() As Object = Me.Invoke("SyncComplete", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Function BeginSyncComplete(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SyncComplete", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSyncComplete(ByVal asyncResult As System.IAsyncResult) As Date
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetLastSyncTime", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetLastSyncTime(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As Date
            Dim results() As Object = Me.Invoke("GetLastSyncTime", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Function BeginGetLastSyncTime(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetLastSyncTime", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetLastSyncTime(ByVal asyncResult As System.IAsyncResult) As Date
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetSyncTime", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetSyncTime(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As Date
            Dim results() As Object = Me.Invoke("GetSyncTime", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Function BeginGetSyncTime(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetSyncTime", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetSyncTime(ByVal asyncResult As System.IAsyncResult) As Date
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientSiteDetails", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientSiteDetails(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal clientSiteUid As System.Guid) As activiserDataSet
            Dim results() As Object = Me.Invoke("GetClientSiteDetails", New Object() {deviceId, ConsultantUid, clientSiteUid})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetClientSiteDetails(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal clientSiteUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetClientSiteDetails", New Object() {deviceId, ConsultantUid, clientSiteUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetClientSiteDetails(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientSiteOpenRequests", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientSiteOpenRequests(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal clientSiteUid As System.Guid) As activiserDataSet
            Dim results() As Object = Me.Invoke("GetClientSiteOpenRequests", New Object() {deviceId, ConsultantUid, clientSiteUid})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetClientSiteOpenRequests(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal clientSiteUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetClientSiteOpenRequests", New Object() {deviceId, ConsultantUid, clientSiteUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetClientSiteOpenRequests(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetCurrentClientSiteList", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetCurrentClientSiteList(ByVal deviceId As String) As activiserDataSet.ClientSiteDataTable
            Dim results() As Object = Me.Invoke("GetCurrentClientSiteList", New Object() {deviceId})
            Return CType(results(0),activiserDataSet.ClientSiteDataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginGetCurrentClientSiteList(ByVal deviceId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetCurrentClientSiteList", New Object() {deviceId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetCurrentClientSiteList(ByVal asyncResult As System.IAsyncResult) As activiserDataSet.ClientSiteDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet.ClientSiteDataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSet", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientDataSet(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As activiserDataSet
            Dim results() As Object = Me.Invoke("GetClientDataSet", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetClientDataSet(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetClientDataSet", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetClientDataSet(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSeXml", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientDataSeXml(ByVal deviceId As String, ByVal ConsultantUid As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetClientDataSeXml", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetClientDataSeXml(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetClientDataSeXml", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetClientDataSeXml(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSetAsXml", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientDataSetAsXml(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetClientDataSetAsXml", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetClientDataSetAsXml(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetClientDataSetAsXml", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetClientDataSetAsXml(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSetCompressed", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientDataSetCompressed(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetClientDataSetCompressed", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Function BeginGetClientDataSetCompressed(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetClientDataSetCompressed", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetClientDataSetCompressed(ByVal asyncResult As System.IAsyncResult) As Byte()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSetUpdates", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientDataSetUpdates(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal Since As Date) As activiserDataSet
            Dim results() As Object = Me.Invoke("GetClientDataSetUpdates", New Object() {deviceId, ConsultantUid, Since})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetClientDataSetUpdates(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal Since As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetClientDataSetUpdates", New Object() {deviceId, ConsultantUid, Since}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetClientDataSetUpdates(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSetUpdatesAsXml", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientDataSetUpdatesAsXml(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal Since As Date) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("GetClientDataSetUpdatesAsXml", New Object() {deviceId, ConsultantUid, Since})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginGetClientDataSetUpdatesAsXml(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal Since As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetClientDataSetUpdatesAsXml", New Object() {deviceId, ConsultantUid, Since}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetClientDataSetUpdatesAsXml(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSetUpdatesCompressed", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientDataSetUpdatesCompressed(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal Since As Date) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("GetClientDataSetUpdatesCompressed", New Object() {deviceId, ConsultantUid, Since})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Function BeginGetClientDataSetUpdatesCompressed(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal Since As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetClientDataSetUpdatesCompressed", New Object() {deviceId, ConsultantUid, Since}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetClientDataSetUpdatesCompressed(ByVal asyncResult As System.IAsyncResult) As Byte()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/UploadClientDataSetUpdates", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadClientDataSetUpdates(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal clientDataSet As activiserDataSet) As UploadResults
            Dim results() As Object = Me.Invoke("UploadClientDataSetUpdates", New Object() {deviceId, consultantUid, clientDataSet})
            Return CType(results(0),UploadResults)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadClientDataSetUpdates(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal clientDataSet As activiserDataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadClientDataSetUpdates", New Object() {deviceId, consultantUid, clientDataSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadClientDataSetUpdates(ByVal asyncResult As System.IAsyncResult) As UploadResults
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),UploadResults)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/UploadClientDataSetUpdatesAsXml", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadClientDataSetUpdatesAsXml(ByVal deviceId As String, ByVal consultantUid As String, ByVal clientData As System.Xml.XmlNode) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("UploadClientDataSetUpdatesAsXml", New Object() {deviceId, consultantUid, clientData})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadClientDataSetUpdatesAsXml(ByVal deviceId As String, ByVal consultantUid As String, ByVal clientData As System.Xml.XmlNode, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadClientDataSetUpdatesAsXml", New Object() {deviceId, consultantUid, clientData}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadClientDataSetUpdatesAsXml(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/UploadClientDataSetUpdatesCompressed", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadClientDataSetUpdatesCompressed(ByVal deviceId As String, ByVal consultantUid As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal clientData() As Byte) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("UploadClientDataSetUpdatesCompressed", New Object() {deviceId, consultantUid, clientData})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Function BeginUploadClientDataSetUpdatesCompressed(ByVal deviceId As String, ByVal consultantUid As String, ByVal clientData() As Byte, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadClientDataSetUpdatesCompressed", New Object() {deviceId, consultantUid, clientData}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadClientDataSetUpdatesCompressed(ByVal asyncResult As System.IAsyncResult) As Byte()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientSettings", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientSettings(ByVal deviceId As String, ByVal consultantUid As String, ByVal clientMask As Integer, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal since As System.Nullable(Of Date)) As ClientSettingDataSet.ClientSettingDataTable
            Dim results() As Object = Me.Invoke("GetClientSettings", New Object() {deviceId, consultantUid, clientMask, since})
            Return CType(results(0),ClientSettingDataSet.ClientSettingDataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginGetClientSettings(ByVal deviceId As String, ByVal consultantUid As String, ByVal clientMask As Integer, ByVal since As System.Nullable(Of Date), ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetClientSettings", New Object() {deviceId, consultantUid, clientMask, since}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetClientSettings(ByVal asyncResult As System.IAsyncResult) As ClientSettingDataSet.ClientSettingDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ClientSettingDataSet.ClientSettingDataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetShortRequestList", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetShortRequestList(ByVal deviceId As String, ByVal ConsultantUid As String) As activiserDataSet
            Dim results() As Object = Me.Invoke("GetShortRequestList", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetShortRequestList(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetShortRequestList", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetShortRequestList(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetRequestDetails", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetRequestDetails(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal RequestUid As System.Guid) As activiserDataSet
            Dim results() As Object = Me.Invoke("GetRequestDetails", New Object() {deviceId, ConsultantUid, RequestUid})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetRequestDetails(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal RequestUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetRequestDetails", New Object() {deviceId, ConsultantUid, RequestUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetRequestDetails(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetNewRequestData", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetNewRequestData(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As activiserDataSet
            Dim results() As Object = Me.Invoke("GetNewRequestData", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetNewRequestData(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetNewRequestData", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetNewRequestData(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetJobHistory", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobHistory(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal ClientSiteUid As System.Guid, ByVal jobLimit As Integer, ByVal ageLimitDays As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("GetJobHistory", New Object() {deviceId, ConsultantUid, ClientSiteUid, jobLimit, ageLimitDays})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetJobHistory(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal ClientSiteUid As System.Guid, ByVal jobLimit As Integer, ByVal ageLimitDays As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetJobHistory", New Object() {deviceId, ConsultantUid, ClientSiteUid, jobLimit, ageLimitDays}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetJobHistory(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetJobDetails", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetJobDetails(ByVal deviceId As String, ByVal UserUid As System.Guid, ByVal JobUid As System.Guid) As activiserDataSet
            Dim results() As Object = Me.Invoke("GetJobDetails", New Object() {deviceId, UserUid, JobUid})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetJobDetails(ByVal deviceId As String, ByVal UserUid As System.Guid, ByVal JobUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetJobDetails", New Object() {deviceId, UserUid, JobUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetJobDetails(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/UploadUserItems", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadUserItems(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal items As ConsultantItemDataSet) As Boolean
            Dim results() As Object = Me.Invoke("UploadUserItems", New Object() {deviceId, ConsultantUid, items})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadUserItems(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal items As ConsultantItemDataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadUserItems", New Object() {deviceId, ConsultantUid, items}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadUserItems(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/UploadUserSettings", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function UploadUserSettings(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal settings As ConsultantSettingDataSet) As Boolean
            Dim results() As Object = Me.Invoke("UploadUserSettings", New Object() {deviceId, ConsultantUid, settings})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginUploadUserSettings(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal settings As ConsultantSettingDataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("UploadUserSettings", New Object() {deviceId, ConsultantUid, settings}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndUploadUserSettings(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetUserProfile", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserProfile(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As ConsultantSettingDataSet
            Dim results() As Object = Me.Invoke("GetUserProfile", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),ConsultantSettingDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUserProfile(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUserProfile", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUserProfile(ByVal asyncResult As System.IAsyncResult) As ConsultantSettingDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ConsultantSettingDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetUserItems", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetUserItems(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As ConsultantItemDataSet
            Dim results() As Object = Me.Invoke("GetUserItems", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),ConsultantItemDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetUserItems(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetUserItems", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetUserItems(ByVal asyncResult As System.IAsyncResult) As ConsultantItemDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ConsultantItemDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetAutoSyncInterval", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetAutoSyncInterval(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As Integer
            Dim results() As Object = Me.Invoke("GetAutoSyncInterval", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetAutoSyncInterval(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetAutoSyncInterval", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetAutoSyncInterval(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetConsultantSyncInterval", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetConsultantSyncInterval(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As Integer
            Dim results() As Object = Me.Invoke("GetConsultantSyncInterval", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginGetConsultantSyncInterval(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetConsultantSyncInterval", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetConsultantSyncInterval(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleChangeUserPassPhrase", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleChangeUserPassPhrase(ByVal deviceid As String, ByVal user As Utility.UserDataTable, ByVal oldPassPhrase As String, ByVal passPhrase As String) As Boolean
            Dim results() As Object = Me.Invoke("ConsoleChangeUserPassPhrase", New Object() {deviceid, user, oldPassPhrase, passPhrase})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleChangeUserPassPhrase(ByVal deviceid As String, ByVal user As Utility.UserDataTable, ByVal oldPassPhrase As String, ByVal passPhrase As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleChangeUserPassPhrase", New Object() {deviceid, user, oldPassPhrase, passPhrase}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleChangeUserPassPhrase(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleLinkNetworkUser", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleLinkNetworkUser(ByVal deviceid As String, ByVal user As Utility.UserDataTable, ByVal passPhrase As String) As Boolean
            Dim results() As Object = Me.Invoke("ConsoleLinkNetworkUser", New Object() {deviceid, user, passPhrase})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleLinkNetworkUser(ByVal deviceid As String, ByVal user As Utility.UserDataTable, ByVal passPhrase As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleLinkNetworkUser", New Object() {deviceid, user, passPhrase}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleLinkNetworkUser(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDataSet", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetDataSet(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As activiserDataSet
            Dim results() As Object = Me.Invoke("ConsoleGetDataSet", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetDataSet(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetDataSet", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetDataSet(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDataSetXml", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetDataSetXml(ByVal deviceId As String, ByVal ConsultantUid As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ConsoleGetDataSetXml", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetDataSetXml(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetDataSetXml", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetDataSetXml(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDataSetAsXml", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetDataSetAsXml(ByVal deviceId As String, ByVal ConsultantUid As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ConsoleGetDataSetAsXml", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetDataSetAsXml(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetDataSetAsXml", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetDataSetAsXml(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDataSetCompressed", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetDataSetCompressed(ByVal deviceId As String, ByVal ConsultantUid As String) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("ConsoleGetDataSetCompressed", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetDataSetCompressed(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetDataSetCompressed", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetDataSetCompressed(ByVal asyncResult As System.IAsyncResult) As Byte()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDataSetUpdates", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetDataSetUpdates(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal ModifiedSince As Date) As activiserDataSet
            Dim results() As Object = Me.Invoke("ConsoleGetDataSetUpdates", New Object() {deviceId, ConsultantUid, ModifiedSince})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetDataSetUpdates(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal ModifiedSince As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetDataSetUpdates", New Object() {deviceId, ConsultantUid, ModifiedSince}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetDataSetUpdates(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDataSetUpdatesAsXml", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetDataSetUpdatesAsXml(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal ModifiedSince As Date) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("ConsoleGetDataSetUpdatesAsXml", New Object() {deviceId, ConsultantUid, ModifiedSince})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetDataSetUpdatesAsXml(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal ModifiedSince As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetDataSetUpdatesAsXml", New Object() {deviceId, ConsultantUid, ModifiedSince}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetDataSetUpdatesAsXml(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDataSetUpdatesCompressed", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetDataSetUpdatesCompressed(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal ModifiedSince As Date) As <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> Byte()
            Dim results() As Object = Me.Invoke("ConsoleGetDataSetUpdatesCompressed", New Object() {deviceId, ConsultantUid, ModifiedSince})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetDataSetUpdatesCompressed(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal ModifiedSince As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetDataSetUpdatesCompressed", New Object() {deviceId, ConsultantUid, ModifiedSince}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetDataSetUpdatesCompressed(ByVal asyncResult As System.IAsyncResult) As Byte()
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDeviceTrackingData", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetDeviceTrackingData(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal since As Date, ByVal [until] As Date) As DeviceTrackingDataSet.DeviceTrackingDataTable
            Dim results() As Object = Me.Invoke("ConsoleGetDeviceTrackingData", New Object() {deviceId, ConsultantUid, since, [until]})
            Return CType(results(0),DeviceTrackingDataSet.DeviceTrackingDataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetDeviceTrackingData(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal since As Date, ByVal [until] As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetDeviceTrackingData", New Object() {deviceId, ConsultantUid, since, [until]}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetDeviceTrackingData(ByVal asyncResult As System.IAsyncResult) As DeviceTrackingDataSet.DeviceTrackingDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),DeviceTrackingDataSet.DeviceTrackingDataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDeviceTrackingDataAsAt", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetDeviceTrackingDataAsAt(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal asAt As Date) As DeviceTrackingDataSet.DeviceTrackingDataTable
            Dim results() As Object = Me.Invoke("ConsoleGetDeviceTrackingDataAsAt", New Object() {deviceId, consultantUid, asAt})
            Return CType(results(0),DeviceTrackingDataSet.DeviceTrackingDataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetDeviceTrackingDataAsAt(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal asAt As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetDeviceTrackingDataAsAt", New Object() {deviceId, consultantUid, asAt}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetDeviceTrackingDataAsAt(ByVal asyncResult As System.IAsyncResult) As DeviceTrackingDataSet.DeviceTrackingDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),DeviceTrackingDataSet.DeviceTrackingDataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetSyncLog", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetSyncLog(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal Since As Date) As SyncLogDataSet
            Dim results() As Object = Me.Invoke("ConsoleGetSyncLog", New Object() {deviceId, ConsultantUid, Since})
            Return CType(results(0),SyncLogDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetSyncLog(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal Since As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetSyncLog", New Object() {deviceId, ConsultantUid, Since}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetSyncLog(ByVal asyncResult As System.IAsyncResult) As SyncLogDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),SyncLogDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetEventLog", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetEventLog(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal Since As Date) As EventLogDataSet
            Dim results() As Object = Me.Invoke("ConsoleGetEventLog", New Object() {deviceId, ConsultantUid, Since})
            Return CType(results(0),EventLogDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetEventLog(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal Since As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetEventLog", New Object() {deviceId, ConsultantUid, Since}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetEventLog(ByVal asyncResult As System.IAsyncResult) As EventLogDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),EventLogDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUpdateEventLog", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleUpdateEventLog(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal eventLog As EventLogDataSet) As Boolean
            Dim results() As Object = Me.Invoke("ConsoleUpdateEventLog", New Object() {deviceId, consultantUid, eventLog})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleUpdateEventLog(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal eventLog As EventLogDataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleUpdateEventLog", New Object() {deviceId, consultantUid, eventLog}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleUpdateEventLog(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetSettings", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetSettings(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As ClientSettingDataSet.ClientSettingDataTable
            Dim results() As Object = Me.Invoke("ConsoleGetSettings", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),ClientSettingDataSet.ClientSettingDataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetSettings(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetSettings", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetSettings(ByVal asyncResult As System.IAsyncResult) As ClientSettingDataSet.ClientSettingDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ClientSettingDataSet.ClientSettingDataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUpdateSettings", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleUpdateSettings(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal settings As ClientSettingDataSet.ClientSettingDataTable) As Boolean
            Dim results() As Object = Me.Invoke("ConsoleUpdateSettings", New Object() {deviceId, ConsultantUid, settings})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleUpdateSettings(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal settings As ClientSettingDataSet.ClientSettingDataTable, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleUpdateSettings", New Object() {deviceId, ConsultantUid, settings}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleUpdateSettings(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetClientSettings", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetClientSettings(ByVal deviceId As String, ByVal ConsultantUid As System.Guid) As ClientSettingDataSet.ClientSettingDataTable
            Dim results() As Object = Me.Invoke("ConsoleGetClientSettings", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),ClientSettingDataSet.ClientSettingDataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetClientSettings(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetClientSettings", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetClientSettings(ByVal asyncResult As System.IAsyncResult) As ClientSettingDataSet.ClientSettingDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ClientSettingDataSet.ClientSettingDataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUpdateClientSettings", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleUpdateClientSettings(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal settings As ClientSettingDataSet.ClientSettingDataTable) As Boolean
            Dim results() As Object = Me.Invoke("ConsoleUpdateClientSettings", New Object() {deviceId, ConsultantUid, settings})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleUpdateClientSettings(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal settings As ClientSettingDataSet.ClientSettingDataTable, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleUpdateClientSettings", New Object() {deviceId, ConsultantUid, settings}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleUpdateClientSettings(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetLastServerSettingChange", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetLastServerSettingChange(ByVal deviceId As String) As Date
            Dim results() As Object = Me.Invoke("ConsoleGetLastServerSettingChange", New Object() {deviceId})
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetLastServerSettingChange(ByVal deviceId As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetLastServerSettingChange", New Object() {deviceId}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetLastServerSettingChange(ByVal asyncResult As System.IAsyncResult) As Date
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Date)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetServerProfile", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetServerProfile(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal current As Boolean) As Utility.ServerSettingDataTable
            Dim results() As Object = Me.Invoke("ConsoleGetServerProfile", New Object() {deviceId, ConsultantUid, current})
            Return CType(results(0),Utility.ServerSettingDataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetServerProfile(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal current As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetServerProfile", New Object() {deviceId, ConsultantUid, current}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetServerProfile(ByVal asyncResult As System.IAsyncResult) As Utility.ServerSettingDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Utility.ServerSettingDataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUpdateServerProfile", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleUpdateServerProfile(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal serverProfile As Utility.ServerSettingDataTable) As Boolean
            Dim results() As Object = Me.Invoke("ConsoleUpdateServerProfile", New Object() {deviceId, ConsultantUid, serverProfile})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleUpdateServerProfile(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal serverProfile As Utility.ServerSettingDataTable, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleUpdateServerProfile", New Object() {deviceId, ConsultantUid, serverProfile}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleUpdateServerProfile(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetClientDevices", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleGetClientDevices(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal current As Boolean) As ClientRegistrationDataSet
            Dim results() As Object = Me.Invoke("ConsoleGetClientDevices", New Object() {deviceId, ConsultantUid, current})
            Return CType(results(0),ClientRegistrationDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleGetClientDevices(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal current As Boolean, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleGetClientDevices", New Object() {deviceId, ConsultantUid, current}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleGetClientDevices(ByVal asyncResult As System.IAsyncResult) As ClientRegistrationDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),ClientRegistrationDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUpdateClientDevices", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleUpdateClientDevices(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal clientDevices As ClientRegistrationDataSet) As Boolean
            Dim results() As Object = Me.Invoke("ConsoleUpdateClientDevices", New Object() {deviceId, ConsultantUid, clientDevices})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleUpdateClientDevices(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal clientDevices As ClientRegistrationDataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleUpdateClientDevices", New Object() {deviceId, ConsultantUid, clientDevices}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleUpdateClientDevices(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUploadDataSetUpdates", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleUploadDataSetUpdates(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal consoleDataSet As activiserDataSet) As Integer
            Dim results() As Object = Me.Invoke("ConsoleUploadDataSetUpdates", New Object() {deviceId, ConsultantUid, consoleDataSet})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleUploadDataSetUpdates(ByVal deviceId As String, ByVal ConsultantUid As System.Guid, ByVal consoleDataSet As activiserDataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleUploadDataSetUpdates", New Object() {deviceId, ConsultantUid, consoleDataSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleUploadDataSetUpdates(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUploadDataSetUpdatesAsXml", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleUploadDataSetUpdatesAsXml(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal clientData As System.Xml.XmlNode) As Integer
            Dim results() As Object = Me.Invoke("ConsoleUploadDataSetUpdatesAsXml", New Object() {deviceId, ConsultantUid, clientData})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleUploadDataSetUpdatesAsXml(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal clientData As System.Xml.XmlNode, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleUploadDataSetUpdatesAsXml", New Object() {deviceId, ConsultantUid, clientData}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleUploadDataSetUpdatesAsXml(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUploadataSetUpdatesCompressed", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleUploadataSetUpdatesCompressed(ByVal deviceId As String, ByVal consultantUid As String, <System.Xml.Serialization.XmlElementAttribute(DataType:="base64Binary")> ByVal clientData() As Byte) As Integer
            Dim results() As Object = Me.Invoke("ConsoleUploadataSetUpdatesCompressed", New Object() {deviceId, consultantUid, clientData})
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleUploadataSetUpdatesCompressed(ByVal deviceId As String, ByVal consultantUid As String, ByVal clientData() As Byte, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleUploadataSetUpdatesCompressed", New Object() {deviceId, consultantUid, clientData}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleUploadataSetUpdatesCompressed(ByVal asyncResult As System.IAsyncResult) As Integer
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Integer)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUpdateTerminology", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleUpdateTerminology(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal updates As LanguageDataSet) As LanguageDataSet
            Dim results() As Object = Me.Invoke("ConsoleUpdateTerminology", New Object() {deviceId, consultantUid, updates})
            Return CType(results(0),LanguageDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleUpdateTerminology(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal updates As LanguageDataSet, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleUpdateTerminology", New Object() {deviceId, consultantUid, updates}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleUpdateTerminology(ByVal asyncResult As System.IAsyncResult) As LanguageDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),LanguageDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleLogonConsultant", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleLogonConsultant(ByVal deviceId As String, ByVal userName As String, ByVal passPhrase As String) As Utility.UserDataTable
            Dim results() As Object = Me.Invoke("ConsoleLogonConsultant", New Object() {deviceId, userName, passPhrase})
            Return CType(results(0),Utility.UserDataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleLogonConsultant(ByVal deviceId As String, ByVal userName As String, ByVal passPhrase As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleLogonConsultant", New Object() {deviceId, userName, passPhrase}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleLogonConsultant(ByVal asyncResult As System.IAsyncResult) As Utility.UserDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Utility.UserDataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleLogonNetworkUser", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function ConsoleLogonNetworkUser(ByVal deviceid As String) As Utility.UserDataTable
            Dim results() As Object = Me.Invoke("ConsoleLogonNetworkUser", New Object() {deviceid})
            Return CType(results(0),Utility.UserDataTable)
        End Function
        
        '''<remarks/>
        Public Function BeginConsoleLogonNetworkUser(ByVal deviceid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("ConsoleLogonNetworkUser", New Object() {deviceid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndConsoleLogonNetworkUser(ByVal asyncResult As System.IAsyncResult) As Utility.UserDataTable
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Utility.UserDataTable)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/SchemaUpdateRequired", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function SchemaUpdateRequired(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal lastCheck As Date) As Boolean
            Dim results() As Object = Me.Invoke("SchemaUpdateRequired", New Object() {deviceId, consultantUid, lastCheck})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginSchemaUpdateRequired(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal lastCheck As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("SchemaUpdateRequired", New Object() {deviceId, consultantUid, lastCheck}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndSchemaUpdateRequired(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSetSchema", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientDataSetSchema(ByVal deviceId As String, ByVal consultantUid As System.Guid) As activiserDataSet
            Dim results() As Object = Me.Invoke("GetClientDataSetSchema", New Object() {deviceId, consultantUid})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetClientDataSetSchema(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetClientDataSetSchema", New Object() {deviceId, consultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetClientDataSetSchema(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSetSchemaMasked", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetClientDataSetSchemaMasked(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal clientMask As Integer) As activiserDataSet
            Dim results() As Object = Me.Invoke("GetClientDataSetSchemaMasked", New Object() {deviceId, consultantUid, clientMask})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginGetClientDataSetSchemaMasked(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal clientMask As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetClientDataSetSchemaMasked", New Object() {deviceId, consultantUid, clientMask}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetClientDataSetSchemaMasked(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/FormUpdateRequired", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function FormUpdateRequired(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal lastCheck As Date) As Boolean
            Dim results() As Object = Me.Invoke("FormUpdateRequired", New Object() {deviceId, consultantUid, lastCheck})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Function BeginFormUpdateRequired(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal lastCheck As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("FormUpdateRequired", New Object() {deviceId, consultantUid, lastCheck}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndFormUpdateRequired(ByVal asyncResult As System.IAsyncResult) As Boolean
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetFormDefinitions", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFormDefinitions(ByVal deviceId As String, ByVal consultantUid As System.Guid) As FormDefinition
            Dim results() As Object = Me.Invoke("GetFormDefinitions", New Object() {deviceId, consultantUid})
            Return CType(results(0),FormDefinition)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFormDefinitions(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFormDefinitions", New Object() {deviceId, consultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFormDefinitions(ByVal asyncResult As System.IAsyncResult) As FormDefinition
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FormDefinition)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetFormDefinitionsMasked", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function GetFormDefinitionsMasked(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal clientMask As Integer, <System.Xml.Serialization.XmlElementAttribute(IsNullable:=true)> ByVal since As System.Nullable(Of Date)) As FormDefinition
            Dim results() As Object = Me.Invoke("GetFormDefinitionsMasked", New Object() {deviceId, consultantUid, clientMask, since})
            Return CType(results(0),FormDefinition)
        End Function
        
        '''<remarks/>
        Public Function BeginGetFormDefinitionsMasked(ByVal deviceId As String, ByVal consultantUid As System.Guid, ByVal clientMask As Integer, ByVal since As System.Nullable(Of Date), ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("GetFormDefinitionsMasked", New Object() {deviceId, consultantUid, clientMask, since}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndGetFormDefinitionsMasked(ByVal asyncResult As System.IAsyncResult) As FormDefinition
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),FormDefinition)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetClientDataSetSchema", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugGetClientDataSetSchema(ByVal deviceId As String, ByVal ConsultantUid As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DebugGetClientDataSetSchema", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugGetClientDataSetSchema(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugGetClientDataSetSchema", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugGetClientDataSetSchema(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetClientDataSetUpdates", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugGetClientDataSetUpdates(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal Since As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DebugGetClientDataSetUpdates", New Object() {deviceId, ConsultantUid, Since})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugGetClientDataSetUpdates(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal Since As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugGetClientDataSetUpdates", New Object() {deviceId, ConsultantUid, Since}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugGetClientDataSetUpdates(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugUploadClientDataSetUpdates", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugUploadClientDataSetUpdates(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal activiserDataSet As String, ByVal CustomDataSet As String) As UploadResults
            Dim results() As Object = Me.Invoke("DebugUploadClientDataSetUpdates", New Object() {deviceId, ConsultantUid, activiserDataSet, CustomDataSet})
            Return CType(results(0),UploadResults)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugUploadClientDataSetUpdates(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal activiserDataSet As String, ByVal CustomDataSet As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugUploadClientDataSetUpdates", New Object() {deviceId, ConsultantUid, activiserDataSet, CustomDataSet}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugUploadClientDataSetUpdates(ByVal asyncResult As System.IAsyncResult) As UploadResults
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),UploadResults)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugUploadClientDataSetUpdatesAsXml", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugUploadClientDataSetUpdatesAsXml(ByVal deviceId As String, ByVal consultantUid As String, ByVal clientDataXml As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DebugUploadClientDataSetUpdatesAsXml", New Object() {deviceId, consultantUid, clientDataXml})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugUploadClientDataSetUpdatesAsXml(ByVal deviceId As String, ByVal consultantUid As String, ByVal clientDataXml As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugUploadClientDataSetUpdatesAsXml", New Object() {deviceId, consultantUid, clientDataXml}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugUploadClientDataSetUpdatesAsXml(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetSchemaMasked", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugGetSchemaMasked(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal clientMask As Integer) As activiserDataSet
            Dim results() As Object = Me.Invoke("DebugGetSchemaMasked", New Object() {deviceId, ConsultantUid, clientMask})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugGetSchemaMasked(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal clientMask As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugGetSchemaMasked", New Object() {deviceId, ConsultantUid, clientMask}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugGetSchemaMasked(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetSchema", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugGetSchema(ByVal deviceId As String, ByVal ConsultantUid As String) As activiserDataSet
            Dim results() As Object = Me.Invoke("DebugGetSchema", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugGetSchema(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugGetSchema", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugGetSchema(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetClientDataSet", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugGetClientDataSet(ByVal deviceId As String, ByVal ConsultantUid As String) As activiserDataSet
            Dim results() As Object = Me.Invoke("DebugGetClientDataSet", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugGetClientDataSet(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugGetClientDataSet", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugGetClientDataSet(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetClientDataSetAsXml", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugGetClientDataSetAsXml(ByVal deviceId As String, ByVal ConsultantUid As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DebugGetClientDataSetAsXml", New Object() {deviceId, ConsultantUid})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugGetClientDataSetAsXml(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugGetClientDataSetAsXml", New Object() {deviceId, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugGetClientDataSetAsXml(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetClientDataSetUpdatesAsXml", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugGetClientDataSetUpdatesAsXml(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal ModifiedSince As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DebugGetClientDataSetUpdatesAsXml", New Object() {deviceId, ConsultantUid, ModifiedSince})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugGetClientDataSetUpdatesAsXml(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal ModifiedSince As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugGetClientDataSetUpdatesAsXml", New Object() {deviceId, ConsultantUid, ModifiedSince}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugGetClientDataSetUpdatesAsXml(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetClientSiteDetails", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugGetClientSiteDetails(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal clientSiteUid As String) As System.Xml.XmlNode
            Dim results() As Object = Me.Invoke("DebugGetClientSiteDetails", New Object() {deviceId, ConsultantUid, clientSiteUid})
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugGetClientSiteDetails(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal clientSiteUid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugGetClientSiteDetails", New Object() {deviceId, ConsultantUid, clientSiteUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugGetClientSiteDetails(ByVal asyncResult As System.IAsyncResult) As System.Xml.XmlNode
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Xml.XmlNode)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetClientSiteDetails2", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugGetClientSiteDetails2(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal clientSiteUid As String) As String
            Dim results() As Object = Me.Invoke("DebugGetClientSiteDetails2", New Object() {deviceId, ConsultantUid, clientSiteUid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugGetClientSiteDetails2(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal clientSiteUid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugGetClientSiteDetails2", New Object() {deviceId, ConsultantUid, clientSiteUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugGetClientSiteDetails2(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetConsultantDetails", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugGetConsultantDetails(ByVal deviceId As String, ByVal UserUid As String, ByVal ConsultantUid As String) As activiserDataSet
            Dim results() As Object = Me.Invoke("DebugGetConsultantDetails", New Object() {deviceId, UserUid, ConsultantUid})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugGetConsultantDetails(ByVal deviceId As String, ByVal UserUid As String, ByVal ConsultantUid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugGetConsultantDetails", New Object() {deviceId, UserUid, ConsultantUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugGetConsultantDetails(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetCustomDataSchema", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugGetCustomDataSchema() As activiserDataSet
            Dim results() As Object = Me.Invoke("DebugGetCustomDataSchema", New Object(-1) {})
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugGetCustomDataSchema(ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugGetCustomDataSchema", New Object(-1) {}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugGetCustomDataSchema(ByVal asyncResult As System.IAsyncResult) As activiserDataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),activiserDataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetRequestDetails", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugGetRequestDetails(ByVal deviceId As String, ByVal UserUid As String, ByVal requestUid As String) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DebugGetRequestDetails", New Object() {deviceId, UserUid, requestUid})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugGetRequestDetails(ByVal deviceId As String, ByVal UserUid As String, ByVal requestUid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugGetRequestDetails", New Object() {deviceId, UserUid, requestUid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugGetRequestDetails(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetJobHistory", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugGetJobHistory(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal clientSiteUid As String, ByVal jobLimit As Integer, ByVal ageLimitDays As Integer) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DebugGetJobHistory", New Object() {deviceId, ConsultantUid, clientSiteUid, jobLimit, ageLimitDays})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugGetJobHistory(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal clientSiteUid As String, ByVal jobLimit As Integer, ByVal ageLimitDays As Integer, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugGetJobHistory", New Object() {deviceId, ConsultantUid, clientSiteUid, jobLimit, ageLimitDays}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugGetJobHistory(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetTerminology", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugGetTerminology(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal ClientKey As Integer, ByVal LanguageId As Integer, ByVal ModifiedSince As Date) As System.Data.DataSet
            Dim results() As Object = Me.Invoke("DebugGetTerminology", New Object() {deviceId, ConsultantUid, ClientKey, LanguageId, ModifiedSince})
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugGetTerminology(ByVal deviceId As String, ByVal ConsultantUid As String, ByVal ClientKey As Integer, ByVal LanguageId As Integer, ByVal ModifiedSince As Date, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugGetTerminology", New Object() {deviceId, ConsultantUid, ClientKey, LanguageId, ModifiedSince}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugGetTerminology(ByVal asyncResult As System.IAsyncResult) As System.Data.DataSet
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),System.Data.DataSet)
        End Function
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugConsoleLogonNetworkUser", RequestNamespace:="http://www.activiser.com/activiser", ResponseNamespace:="http://www.activiser.com/activiser", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function DebugConsoleLogonNetworkUser(ByVal deviceid As String) As String
            Dim results() As Object = Me.Invoke("DebugConsoleLogonNetworkUser", New Object() {deviceid})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Function BeginDebugConsoleLogonNetworkUser(ByVal deviceid As String, ByVal callback As System.AsyncCallback, ByVal asyncState As Object) As System.IAsyncResult
            Return Me.BeginInvoke("DebugConsoleLogonNetworkUser", New Object() {deviceid}, callback, asyncState)
        End Function
        
        '''<remarks/>
        Public Function EndDebugConsoleLogonNetworkUser(ByVal asyncResult As System.IAsyncResult) As String
            Dim results() As Object = Me.EndInvoke(asyncResult)
            Return CType(results(0),String)
        End Function
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("EventLogDataSet")>  _
    Partial Public Class EventLogDataSet
        Inherits Global.System.Data.DataSet
        
        Private tableEventLog As EventLogDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property EventLog() As EventLogDataTable
            Get
                Return Me.tableEventLog
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As EventLogDataSet = CType(MyBase.Clone,EventLogDataSet)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("EventLog")) Is Nothing) Then
                    MyBase.Tables.Add(New EventLogDataTable(ds.Tables("EventLog")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableEventLog = CType(MyBase.Tables("EventLog"),EventLogDataTable)
            If (initTable = true) Then
                If (Not (Me.tableEventLog) Is Nothing) Then
                    Me.tableEventLog.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "EventLogDataSet"
            Me.Prefix = ""
            Me.Namespace = "http://www.activiser.com/Schemas/EventLogDataSet.xsd"
            Me.Locale = New Global.System.Globalization.CultureInfo("en-NZ")
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableEventLog = New EventLogDataTable
            MyBase.Tables.Add(Me.tableEventLog)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeEventLog() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As EventLogDataSet = New EventLogDataSet
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        Public Delegate Sub EventLogRowChangeEventHandler(ByVal sender As Object, ByVal e As EventLogRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class EventLogDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnEventLogID As Global.System.Data.DataColumn
            
            Private columnLogDateTime As Global.System.Data.DataColumn
            
            Private columnEventDateTime As Global.System.Data.DataColumn
            
            Private columnEventClass As Global.System.Data.DataColumn
            
            Private columnSystemId As Global.System.Data.DataColumn
            
            Private columnSource As Global.System.Data.DataColumn
            
            Private columnHostName As Global.System.Data.DataColumn
            
            Private columnLoggedBy As Global.System.Data.DataColumn
            
            Private columnMessage As Global.System.Data.DataColumn
            
            Private columnStatus As Global.System.Data.DataColumn
            
            Private columnNotes As Global.System.Data.DataColumn
            
            Private columnEventData As Global.System.Data.DataColumn
            
            Private columnCreated As Global.System.Data.DataColumn
            
            Private columnCreatedBy As Global.System.Data.DataColumn
            
            Private columnModified As Global.System.Data.DataColumn
            
            Private columnModifiedBy As Global.System.Data.DataColumn
            
            Private columnrowversion As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "EventLog"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EventLogIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEventLogID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LogDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLogDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EventDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEventDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EventClassColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEventClass
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SystemIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSystemId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SourceColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSource
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property HostNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnHostName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LoggedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLoggedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property MessageColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMessage
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnStatus
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNotes
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EventDataColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEventData
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreated
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModified
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property rowversionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnrowversion
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As EventLogRow
                Get
                    Return CType(Me.Rows(index),EventLogRow)
                End Get
            End Property
            
            Public Event EventLogRowChanging As EventLogRowChangeEventHandler
            
            Public Event EventLogRowChanged As EventLogRowChangeEventHandler
            
            Public Event EventLogRowDeleting As EventLogRowChangeEventHandler
            
            Public Event EventLogRowDeleted As EventLogRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddEventLogRow(ByVal row As EventLogRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddEventLogRow( _
                        ByVal EventLogID As System.Guid,  _
                        ByVal LogDateTime As Date,  _
                        ByVal EventDateTime As Date,  _
                        ByVal EventClass As Integer,  _
                        ByVal SystemId As String,  _
                        ByVal Source As String,  _
                        ByVal HostName As String,  _
                        ByVal LoggedBy As String,  _
                        ByVal Message As String,  _
                        ByVal Status As String,  _
                        ByVal Notes As String,  _
                        ByVal EventData As String,  _
                        ByVal Created As Date,  _
                        ByVal CreatedBy As String,  _
                        ByVal Modified As Date,  _
                        ByVal ModifiedBy As String,  _
                        ByVal rowversion() As Byte) As EventLogRow
                Dim rowEventLogRow As EventLogRow = CType(Me.NewRow,EventLogRow)
                Dim columnValuesArray() As Object = New Object() {EventLogID, LogDateTime, EventDateTime, EventClass, SystemId, Source, HostName, LoggedBy, Message, Status, Notes, EventData, Created, CreatedBy, Modified, ModifiedBy, rowversion}
                rowEventLogRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowEventLogRow)
                Return rowEventLogRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByEventLogID(ByVal EventLogID As System.Guid) As EventLogRow
                Return CType(Me.Rows.Find(New Object() {EventLogID}),EventLogRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As EventLogDataTable = CType(MyBase.Clone,EventLogDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New EventLogDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnEventLogID = MyBase.Columns("EventLogID")
                Me.columnLogDateTime = MyBase.Columns("LogDateTime")
                Me.columnEventDateTime = MyBase.Columns("EventDateTime")
                Me.columnEventClass = MyBase.Columns("EventClass")
                Me.columnSystemId = MyBase.Columns("SystemId")
                Me.columnSource = MyBase.Columns("Source")
                Me.columnHostName = MyBase.Columns("HostName")
                Me.columnLoggedBy = MyBase.Columns("LoggedBy")
                Me.columnMessage = MyBase.Columns("Message")
                Me.columnStatus = MyBase.Columns("Status")
                Me.columnNotes = MyBase.Columns("Notes")
                Me.columnEventData = MyBase.Columns("EventData")
                Me.columnCreated = MyBase.Columns("Created")
                Me.columnCreatedBy = MyBase.Columns("CreatedBy")
                Me.columnModified = MyBase.Columns("Modified")
                Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
                Me.columnrowversion = MyBase.Columns("rowversion")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnEventLogID = New Global.System.Data.DataColumn("EventLogID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEventLogID)
                Me.columnLogDateTime = New Global.System.Data.DataColumn("LogDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLogDateTime)
                Me.columnEventDateTime = New Global.System.Data.DataColumn("EventDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEventDateTime)
                Me.columnEventClass = New Global.System.Data.DataColumn("EventClass", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEventClass)
                Me.columnSystemId = New Global.System.Data.DataColumn("SystemId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSystemId)
                Me.columnSource = New Global.System.Data.DataColumn("Source", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSource)
                Me.columnHostName = New Global.System.Data.DataColumn("HostName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnHostName)
                Me.columnLoggedBy = New Global.System.Data.DataColumn("LoggedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLoggedBy)
                Me.columnMessage = New Global.System.Data.DataColumn("Message", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMessage)
                Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStatus)
                Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNotes)
                Me.columnEventData = New Global.System.Data.DataColumn("EventData", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEventData)
                Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreated)
                Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedBy)
                Me.columnModified = New Global.System.Data.DataColumn("Modified", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModified)
                Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedBy)
                Me.columnrowversion = New Global.System.Data.DataColumn("rowversion", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnrowversion)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnEventLogID}, true))
                Me.columnEventLogID.AllowDBNull = false
                Me.columnEventLogID.Unique = true
                Me.columnLogDateTime.AllowDBNull = false
                Me.columnEventDateTime.AllowDBNull = false
                Me.columnEventClass.AllowDBNull = false
                Me.columnEventClass.DefaultValue = CType(0,Integer)
                Me.columnSystemId.AllowDBNull = false
                Me.columnSystemId.MaxLength = 128
                Me.columnSource.AllowDBNull = false
                Me.columnSource.MaxLength = 256
                Me.columnHostName.AllowDBNull = false
                Me.columnHostName.MaxLength = 128
                Me.columnLoggedBy.AllowDBNull = false
                Me.columnLoggedBy.MaxLength = 258
                Me.columnMessage.AllowDBNull = false
                Me.columnMessage.MaxLength = 1000
                Me.columnStatus.MaxLength = 50
                Me.columnNotes.MaxLength = 2147483647
                Me.columnEventData.MaxLength = 2147483647
                Me.columnCreatedBy.MaxLength = 128
                Me.columnModifiedBy.MaxLength = 128
                Me.columnrowversion.ReadOnly = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewEventLogRow() As EventLogRow
                Return CType(Me.NewRow,EventLogRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New EventLogRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(EventLogRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.EventLogRowChangedEvent) Is Nothing) Then
                    RaiseEvent EventLogRowChanged(Me, New EventLogRowChangeEvent(CType(e.Row,EventLogRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.EventLogRowChangingEvent) Is Nothing) Then
                    RaiseEvent EventLogRowChanging(Me, New EventLogRowChangeEvent(CType(e.Row,EventLogRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.EventLogRowDeletedEvent) Is Nothing) Then
                    RaiseEvent EventLogRowDeleted(Me, New EventLogRowChangeEvent(CType(e.Row,EventLogRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.EventLogRowDeletingEvent) Is Nothing) Then
                    RaiseEvent EventLogRowDeleting(Me, New EventLogRowChangeEvent(CType(e.Row,EventLogRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveEventLogRow(ByVal row As EventLogRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As EventLogDataSet = New EventLogDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "EventLogDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class EventLogRow
            Inherits Global.System.Data.DataRow
            
            Private tableEventLog As EventLogDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableEventLog = CType(Me.Table,EventLogDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EventLogID() As System.Guid
                Get
                    Return CType(Me(Me.tableEventLog.EventLogIDColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableEventLog.EventLogIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property LogDateTime() As Date
                Get
                    Return CType(Me(Me.tableEventLog.LogDateTimeColumn),Date)
                End Get
                Set
                    Me(Me.tableEventLog.LogDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EventDateTime() As Date
                Get
                    Return CType(Me(Me.tableEventLog.EventDateTimeColumn),Date)
                End Get
                Set
                    Me(Me.tableEventLog.EventDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EventClass() As Integer
                Get
                    Return CType(Me(Me.tableEventLog.EventClassColumn),Integer)
                End Get
                Set
                    Me(Me.tableEventLog.EventClassColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property SystemId() As String
                Get
                    Return CType(Me(Me.tableEventLog.SystemIdColumn),String)
                End Get
                Set
                    Me(Me.tableEventLog.SystemIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Source() As String
                Get
                    Return CType(Me(Me.tableEventLog.SourceColumn),String)
                End Get
                Set
                    Me(Me.tableEventLog.SourceColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property HostName() As String
                Get
                    Return CType(Me(Me.tableEventLog.HostNameColumn),String)
                End Get
                Set
                    Me(Me.tableEventLog.HostNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property LoggedBy() As String
                Get
                    Return CType(Me(Me.tableEventLog.LoggedByColumn),String)
                End Get
                Set
                    Me(Me.tableEventLog.LoggedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Message() As String
                Get
                    Return CType(Me(Me.tableEventLog.MessageColumn),String)
                End Get
                Set
                    Me(Me.tableEventLog.MessageColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Status() As String
                Get
                    Try 
                        Return CType(Me(Me.tableEventLog.StatusColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'EventLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableEventLog.StatusColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Notes() As String
                Get
                    Try 
                        Return CType(Me(Me.tableEventLog.NotesColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'EventLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableEventLog.NotesColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EventData() As String
                Get
                    Try 
                        Return CType(Me(Me.tableEventLog.EventDataColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'EventData' in table 'EventLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableEventLog.EventDataColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Created() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableEventLog.CreatedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Created' in table 'EventLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableEventLog.CreatedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableEventLog.CreatedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'EventLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableEventLog.CreatedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Modified() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableEventLog.ModifiedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Modified' in table 'EventLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableEventLog.ModifiedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableEventLog.ModifiedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'EventLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableEventLog.ModifiedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property rowversion() As Byte()
                Get
                    Try 
                        Return CType(Me(Me.tableEventLog.rowversionColumn),Byte())
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'rowversion' in table 'EventLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableEventLog.rowversionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsStatusNull() As Boolean
                Return Me.IsNull(Me.tableEventLog.StatusColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetStatusNull()
                Me(Me.tableEventLog.StatusColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNotesNull() As Boolean
                Return Me.IsNull(Me.tableEventLog.NotesColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNotesNull()
                Me(Me.tableEventLog.NotesColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsEventDataNull() As Boolean
                Return Me.IsNull(Me.tableEventLog.EventDataColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetEventDataNull()
                Me(Me.tableEventLog.EventDataColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedNull() As Boolean
                Return Me.IsNull(Me.tableEventLog.CreatedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedNull()
                Me(Me.tableEventLog.CreatedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedByNull() As Boolean
                Return Me.IsNull(Me.tableEventLog.CreatedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedByNull()
                Me(Me.tableEventLog.CreatedByColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedNull() As Boolean
                Return Me.IsNull(Me.tableEventLog.ModifiedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedNull()
                Me(Me.tableEventLog.ModifiedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedByNull() As Boolean
                Return Me.IsNull(Me.tableEventLog.ModifiedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedByNull()
                Me(Me.tableEventLog.ModifiedByColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsrowversionNull() As Boolean
                Return Me.IsNull(Me.tableEventLog.rowversionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetrowversionNull()
                Me(Me.tableEventLog.rowversionColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class EventLogRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As EventLogRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As EventLogRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As EventLogRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("DeviceTrackingDataSet")>  _
    Partial Public Class DeviceTrackingDataSet
        Inherits Global.System.Data.DataSet
        
        Private tableDeviceTracking As DeviceTrackingDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property DeviceTracking() As DeviceTrackingDataTable
            Get
                Return Me.tableDeviceTracking
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As DeviceTrackingDataSet = CType(MyBase.Clone,DeviceTrackingDataSet)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("DeviceTracking")) Is Nothing) Then
                    MyBase.Tables.Add(New DeviceTrackingDataTable(ds.Tables("DeviceTracking")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableDeviceTracking = CType(MyBase.Tables("DeviceTracking"),DeviceTrackingDataTable)
            If (initTable = true) Then
                If (Not (Me.tableDeviceTracking) Is Nothing) Then
                    Me.tableDeviceTracking.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "DeviceTrackingDataSet"
            Me.Prefix = ""
            Me.Namespace = "http://www.activiser.com/schemas/DeviceTracking.XSD"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableDeviceTracking = New DeviceTrackingDataTable
            MyBase.Tables.Add(Me.tableDeviceTracking)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeDeviceTracking() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As DeviceTrackingDataSet = New DeviceTrackingDataSet
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        Public Delegate Sub DeviceTrackingRowChangeEventHandler(ByVal sender As Object, ByVal e As DeviceTrackingRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class DeviceTrackingDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnDeviceTrackingUid As Global.System.Data.DataColumn
            
            Private columnTimeStamp As Global.System.Data.DataColumn
            
            Private columnUsername As Global.System.Data.DataColumn
            
            Private columnSystemId As Global.System.Data.DataColumn
            
            Private columnTrackingInfo As Global.System.Data.DataColumn
            
            Private columnConsultantUid As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "DeviceTracking"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DeviceTrackingUidColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDeviceTrackingUid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TimeStampColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTimeStamp
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property UsernameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUsername
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SystemIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSystemId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TrackingInfoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTrackingInfo
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantUidColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantUid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As DeviceTrackingRow
                Get
                    Return CType(Me.Rows(index),DeviceTrackingRow)
                End Get
            End Property
            
            Public Event DeviceTrackingRowChanging As DeviceTrackingRowChangeEventHandler
            
            Public Event DeviceTrackingRowChanged As DeviceTrackingRowChangeEventHandler
            
            Public Event DeviceTrackingRowDeleting As DeviceTrackingRowChangeEventHandler
            
            Public Event DeviceTrackingRowDeleted As DeviceTrackingRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddDeviceTrackingRow(ByVal row As DeviceTrackingRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddDeviceTrackingRow(ByVal DeviceTrackingUid As System.Guid, ByVal TimeStamp As Date, ByVal Username As String, ByVal SystemId As String, ByVal TrackingInfo As String, ByVal ConsultantUid As System.Guid) As DeviceTrackingRow
                Dim rowDeviceTrackingRow As DeviceTrackingRow = CType(Me.NewRow,DeviceTrackingRow)
                Dim columnValuesArray() As Object = New Object() {DeviceTrackingUid, TimeStamp, Username, SystemId, TrackingInfo, ConsultantUid}
                rowDeviceTrackingRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowDeviceTrackingRow)
                Return rowDeviceTrackingRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByDeviceTrackingUid(ByVal DeviceTrackingUid As System.Guid) As DeviceTrackingRow
                Return CType(Me.Rows.Find(New Object() {DeviceTrackingUid}),DeviceTrackingRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As DeviceTrackingDataTable = CType(MyBase.Clone,DeviceTrackingDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New DeviceTrackingDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnDeviceTrackingUid = MyBase.Columns("DeviceTrackingUid")
                Me.columnTimeStamp = MyBase.Columns("TimeStamp")
                Me.columnUsername = MyBase.Columns("Username")
                Me.columnSystemId = MyBase.Columns("SystemId")
                Me.columnTrackingInfo = MyBase.Columns("TrackingInfo")
                Me.columnConsultantUid = MyBase.Columns("ConsultantUid")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnDeviceTrackingUid = New Global.System.Data.DataColumn("DeviceTrackingUid", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDeviceTrackingUid)
                Me.columnTimeStamp = New Global.System.Data.DataColumn("TimeStamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTimeStamp)
                Me.columnUsername = New Global.System.Data.DataColumn("Username", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUsername)
                Me.columnSystemId = New Global.System.Data.DataColumn("SystemId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSystemId)
                Me.columnTrackingInfo = New Global.System.Data.DataColumn("TrackingInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTrackingInfo)
                Me.columnConsultantUid = New Global.System.Data.DataColumn("ConsultantUid", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantUid)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnDeviceTrackingUid}, true))
                Me.columnDeviceTrackingUid.AllowDBNull = false
                Me.columnDeviceTrackingUid.Unique = true
                Me.columnTimeStamp.AllowDBNull = false
                Me.columnTimeStamp.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnUsername.AllowDBNull = false
                Me.columnUsername.MaxLength = 128
                Me.columnSystemId.AllowDBNull = false
                Me.columnSystemId.MaxLength = 100
                Me.columnTrackingInfo.AllowDBNull = false
                Me.columnTrackingInfo.MaxLength = 128
                Me.columnConsultantUid.AllowDBNull = false
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewDeviceTrackingRow() As DeviceTrackingRow
                Return CType(Me.NewRow,DeviceTrackingRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New DeviceTrackingRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(DeviceTrackingRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.DeviceTrackingRowChangedEvent) Is Nothing) Then
                    RaiseEvent DeviceTrackingRowChanged(Me, New DeviceTrackingRowChangeEvent(CType(e.Row,DeviceTrackingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.DeviceTrackingRowChangingEvent) Is Nothing) Then
                    RaiseEvent DeviceTrackingRowChanging(Me, New DeviceTrackingRowChangeEvent(CType(e.Row,DeviceTrackingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.DeviceTrackingRowDeletedEvent) Is Nothing) Then
                    RaiseEvent DeviceTrackingRowDeleted(Me, New DeviceTrackingRowChangeEvent(CType(e.Row,DeviceTrackingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.DeviceTrackingRowDeletingEvent) Is Nothing) Then
                    RaiseEvent DeviceTrackingRowDeleting(Me, New DeviceTrackingRowChangeEvent(CType(e.Row,DeviceTrackingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveDeviceTrackingRow(ByVal row As DeviceTrackingRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As DeviceTrackingDataSet = New DeviceTrackingDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "DeviceTrackingDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class DeviceTrackingRow
            Inherits Global.System.Data.DataRow
            
            Private tableDeviceTracking As DeviceTrackingDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableDeviceTracking = CType(Me.Table,DeviceTrackingDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property DeviceTrackingUid() As System.Guid
                Get
                    Return CType(Me(Me.tableDeviceTracking.DeviceTrackingUidColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableDeviceTracking.DeviceTrackingUidColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TimeStamp() As Date
                Get
                    Return CType(Me(Me.tableDeviceTracking.TimeStampColumn),Date)
                End Get
                Set
                    Me(Me.tableDeviceTracking.TimeStampColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Username() As String
                Get
                    Return CType(Me(Me.tableDeviceTracking.UsernameColumn),String)
                End Get
                Set
                    Me(Me.tableDeviceTracking.UsernameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property SystemId() As String
                Get
                    Return CType(Me(Me.tableDeviceTracking.SystemIdColumn),String)
                End Get
                Set
                    Me(Me.tableDeviceTracking.SystemIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TrackingInfo() As String
                Get
                    Return CType(Me(Me.tableDeviceTracking.TrackingInfoColumn),String)
                End Get
                Set
                    Me(Me.tableDeviceTracking.TrackingInfoColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantUid() As System.Guid
                Get
                    Return CType(Me(Me.tableDeviceTracking.ConsultantUidColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableDeviceTracking.ConsultantUidColumn) = value
                End Set
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class DeviceTrackingRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As DeviceTrackingRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As DeviceTrackingRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As DeviceTrackingRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("Utility")>  _
    Partial Public Class Utility
        Inherits Global.System.Data.DataSet
        
        Private tableActiveConsultants As ActiveConsultantsDataTable
        
        Private tableUser As UserDataTable
        
        Private tableServerSetting As ServerSettingDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ActiveConsultants() As ActiveConsultantsDataTable
            Get
                Return Me.tableActiveConsultants
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property User() As UserDataTable
            Get
                Return Me.tableUser
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ServerSetting() As ServerSettingDataTable
            Get
                Return Me.tableServerSetting
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As Utility = CType(MyBase.Clone,Utility)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("ActiveConsultants")) Is Nothing) Then
                    MyBase.Tables.Add(New ActiveConsultantsDataTable(ds.Tables("ActiveConsultants")))
                End If
                If (Not (ds.Tables("User")) Is Nothing) Then
                    MyBase.Tables.Add(New UserDataTable(ds.Tables("User")))
                End If
                If (Not (ds.Tables("ServerSetting")) Is Nothing) Then
                    MyBase.Tables.Add(New ServerSettingDataTable(ds.Tables("ServerSetting")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableActiveConsultants = CType(MyBase.Tables("ActiveConsultants"),ActiveConsultantsDataTable)
            If (initTable = true) Then
                If (Not (Me.tableActiveConsultants) Is Nothing) Then
                    Me.tableActiveConsultants.InitVars
                End If
            End If
            Me.tableUser = CType(MyBase.Tables("User"),UserDataTable)
            If (initTable = true) Then
                If (Not (Me.tableUser) Is Nothing) Then
                    Me.tableUser.InitVars
                End If
            End If
            Me.tableServerSetting = CType(MyBase.Tables("ServerSetting"),ServerSettingDataTable)
            If (initTable = true) Then
                If (Not (Me.tableServerSetting) Is Nothing) Then
                    Me.tableServerSetting.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "Utility"
            Me.Prefix = ""
            Me.Namespace = "http://www.activiser.com/schemas/Utilities.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableActiveConsultants = New ActiveConsultantsDataTable
            MyBase.Tables.Add(Me.tableActiveConsultants)
            Me.tableUser = New UserDataTable
            MyBase.Tables.Add(Me.tableUser)
            Me.tableServerSetting = New ServerSettingDataTable
            MyBase.Tables.Add(Me.tableServerSetting)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeActiveConsultants() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeUser() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeServerSetting() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As Utility = New Utility
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        Public Delegate Sub ActiveConsultantsRowChangeEventHandler(ByVal sender As Object, ByVal e As ActiveConsultantsRowChangeEvent)
        
        Public Delegate Sub UserRowChangeEventHandler(ByVal sender As Object, ByVal e As UserRowChangeEvent)
        
        Public Delegate Sub ServerSettingRowChangeEventHandler(ByVal sender As Object, ByVal e As ServerSettingRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ActiveConsultantsDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnConsultantUID As Global.System.Data.DataColumn
            
            Private columnName As Global.System.Data.DataColumn
            
            Private columnUsername As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "ActiveConsultants"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantUIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantUID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property UsernameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUsername
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ActiveConsultantsRow
                Get
                    Return CType(Me.Rows(index),ActiveConsultantsRow)
                End Get
            End Property
            
            Public Event ActiveConsultantsRowChanging As ActiveConsultantsRowChangeEventHandler
            
            Public Event ActiveConsultantsRowChanged As ActiveConsultantsRowChangeEventHandler
            
            Public Event ActiveConsultantsRowDeleting As ActiveConsultantsRowChangeEventHandler
            
            Public Event ActiveConsultantsRowDeleted As ActiveConsultantsRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddActiveConsultantsRow(ByVal row As ActiveConsultantsRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddActiveConsultantsRow(ByVal ConsultantUID As System.Guid, ByVal Name As String, ByVal Username As String) As ActiveConsultantsRow
                Dim rowActiveConsultantsRow As ActiveConsultantsRow = CType(Me.NewRow,ActiveConsultantsRow)
                Dim columnValuesArray() As Object = New Object() {ConsultantUID, Name, Username}
                rowActiveConsultantsRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowActiveConsultantsRow)
                Return rowActiveConsultantsRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByConsultantUID(ByVal ConsultantUID As System.Guid) As ActiveConsultantsRow
                Return CType(Me.Rows.Find(New Object() {ConsultantUID}),ActiveConsultantsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ActiveConsultantsDataTable = CType(MyBase.Clone,ActiveConsultantsDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ActiveConsultantsDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnConsultantUID = MyBase.Columns("ConsultantUID")
                Me.columnName = MyBase.Columns("Name")
                Me.columnUsername = MyBase.Columns("Username")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnConsultantUID = New Global.System.Data.DataColumn("ConsultantUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantUID)
                Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnName)
                Me.columnUsername = New Global.System.Data.DataColumn("Username", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUsername)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnConsultantUID}, true))
                Me.columnConsultantUID.AllowDBNull = false
                Me.columnConsultantUID.Unique = true
                Me.columnConsultantUID.Caption = "UID"
                Me.columnName.AllowDBNull = false
                Me.columnName.MaxLength = 250
                Me.columnUsername.MaxLength = 50
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewActiveConsultantsRow() As ActiveConsultantsRow
                Return CType(Me.NewRow,ActiveConsultantsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ActiveConsultantsRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ActiveConsultantsRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ActiveConsultantsRowChangedEvent) Is Nothing) Then
                    RaiseEvent ActiveConsultantsRowChanged(Me, New ActiveConsultantsRowChangeEvent(CType(e.Row,ActiveConsultantsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ActiveConsultantsRowChangingEvent) Is Nothing) Then
                    RaiseEvent ActiveConsultantsRowChanging(Me, New ActiveConsultantsRowChangeEvent(CType(e.Row,ActiveConsultantsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ActiveConsultantsRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ActiveConsultantsRowDeleted(Me, New ActiveConsultantsRowChangeEvent(CType(e.Row,ActiveConsultantsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ActiveConsultantsRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ActiveConsultantsRowDeleting(Me, New ActiveConsultantsRowChangeEvent(CType(e.Row,ActiveConsultantsRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveActiveConsultantsRow(ByVal row As ActiveConsultantsRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As Utility = New Utility
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ActiveConsultantsDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class UserDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnConsultantUID As Global.System.Data.DataColumn
            
            Private columnUsername As Global.System.Data.DataColumn
            
            Private columnName As Global.System.Data.DataColumn
            
            Private columnDomainLogon As Global.System.Data.DataColumn
            
            Private columnManagement As Global.System.Data.DataColumn
            
            Private columnAdministration As Global.System.Data.DataColumn
            
            Private columnIsActiviserUser As Global.System.Data.DataColumn
            
            Private columnSyncTime As Global.System.Data.DataColumn
            
            Private columnLastSyncTime As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "User"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantUIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantUID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property UsernameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUsername
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DomainLogonColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDomainLogon
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ManagementColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnManagement
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property AdministrationColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAdministration
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property IsActiviserUserColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsActiviserUser
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SyncTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSyncTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LastSyncTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLastSyncTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As UserRow
                Get
                    Return CType(Me.Rows(index),UserRow)
                End Get
            End Property
            
            Public Event UserRowChanging As UserRowChangeEventHandler
            
            Public Event UserRowChanged As UserRowChangeEventHandler
            
            Public Event UserRowDeleting As UserRowChangeEventHandler
            
            Public Event UserRowDeleted As UserRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddUserRow(ByVal row As UserRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddUserRow(ByVal ConsultantUID As System.Guid, ByVal Username As String, ByVal Name As String, ByVal DomainLogon As String, ByVal Management As Boolean, ByVal Administration As Boolean, ByVal IsActiviserUser As Boolean, ByVal SyncTime As Date, ByVal LastSyncTime As Date) As UserRow
                Dim rowUserRow As UserRow = CType(Me.NewRow,UserRow)
                Dim columnValuesArray() As Object = New Object() {ConsultantUID, Username, Name, DomainLogon, Management, Administration, IsActiviserUser, SyncTime, LastSyncTime}
                rowUserRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowUserRow)
                Return rowUserRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByConsultantUID(ByVal ConsultantUID As System.Guid) As UserRow
                Return CType(Me.Rows.Find(New Object() {ConsultantUID}),UserRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As UserDataTable = CType(MyBase.Clone,UserDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New UserDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnConsultantUID = MyBase.Columns("ConsultantUID")
                Me.columnUsername = MyBase.Columns("Username")
                Me.columnName = MyBase.Columns("Name")
                Me.columnDomainLogon = MyBase.Columns("DomainLogon")
                Me.columnManagement = MyBase.Columns("Management")
                Me.columnAdministration = MyBase.Columns("Administration")
                Me.columnIsActiviserUser = MyBase.Columns("IsActiviserUser")
                Me.columnSyncTime = MyBase.Columns("SyncTime")
                Me.columnLastSyncTime = MyBase.Columns("LastSyncTime")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnConsultantUID = New Global.System.Data.DataColumn("ConsultantUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantUID)
                Me.columnUsername = New Global.System.Data.DataColumn("Username", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUsername)
                Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnName)
                Me.columnDomainLogon = New Global.System.Data.DataColumn("DomainLogon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDomainLogon)
                Me.columnManagement = New Global.System.Data.DataColumn("Management", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnManagement)
                Me.columnAdministration = New Global.System.Data.DataColumn("Administration", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAdministration)
                Me.columnIsActiviserUser = New Global.System.Data.DataColumn("IsActiviserUser", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsActiviserUser)
                Me.columnSyncTime = New Global.System.Data.DataColumn("SyncTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSyncTime)
                Me.columnLastSyncTime = New Global.System.Data.DataColumn("LastSyncTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLastSyncTime)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_User", New Global.System.Data.DataColumn() {Me.columnConsultantUID}, true))
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("UC_Username", New Global.System.Data.DataColumn() {Me.columnUsername}, false))
                Me.columnConsultantUID.AllowDBNull = false
                Me.columnConsultantUID.Unique = true
                Me.columnUsername.Unique = true
                Me.columnUsername.MaxLength = 50
                Me.columnName.AllowDBNull = false
                Me.columnName.MaxLength = 250
                Me.columnDomainLogon.MaxLength = 250
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewUserRow() As UserRow
                Return CType(Me.NewRow,UserRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New UserRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(UserRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.UserRowChangedEvent) Is Nothing) Then
                    RaiseEvent UserRowChanged(Me, New UserRowChangeEvent(CType(e.Row,UserRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.UserRowChangingEvent) Is Nothing) Then
                    RaiseEvent UserRowChanging(Me, New UserRowChangeEvent(CType(e.Row,UserRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.UserRowDeletedEvent) Is Nothing) Then
                    RaiseEvent UserRowDeleted(Me, New UserRowChangeEvent(CType(e.Row,UserRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.UserRowDeletingEvent) Is Nothing) Then
                    RaiseEvent UserRowDeleting(Me, New UserRowChangeEvent(CType(e.Row,UserRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveUserRow(ByVal row As UserRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As Utility = New Utility
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "UserDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ServerSettingDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnServerSettingId As Global.System.Data.DataColumn
            
            Private columnName As Global.System.Data.DataColumn
            
            Private columnStatus As Global.System.Data.DataColumn
            
            Private columnValue As Global.System.Data.DataColumn
            
            Private columnLongValue As Global.System.Data.DataColumn
            
            Private columnValidAfter As Global.System.Data.DataColumn
            
            Private columnValidBefore As Global.System.Data.DataColumn
            
            Private columnCreated As Global.System.Data.DataColumn
            
            Private columnCreatedBy As Global.System.Data.DataColumn
            
            Private columnModified As Global.System.Data.DataColumn
            
            Private columnModifiedBy As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "ServerSetting"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ServerSettingIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnServerSettingId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnStatus
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ValueColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnValue
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LongValueColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLongValue
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ValidAfterColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnValidAfter
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ValidBeforeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnValidBefore
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreated
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModified
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ServerSettingRow
                Get
                    Return CType(Me.Rows(index),ServerSettingRow)
                End Get
            End Property
            
            Public Event ServerSettingRowChanging As ServerSettingRowChangeEventHandler
            
            Public Event ServerSettingRowChanged As ServerSettingRowChangeEventHandler
            
            Public Event ServerSettingRowDeleting As ServerSettingRowChangeEventHandler
            
            Public Event ServerSettingRowDeleted As ServerSettingRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddServerSettingRow(ByVal row As ServerSettingRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddServerSettingRow(ByVal ServerSettingId As System.Guid, ByVal Name As String, ByVal Status As Integer, ByVal Value As String, ByVal LongValue As String, ByVal ValidAfter As Date, ByVal ValidBefore As Date, ByVal Created As Date, ByVal CreatedBy As String, ByVal Modified As Date, ByVal ModifiedBy As String) As ServerSettingRow
                Dim rowServerSettingRow As ServerSettingRow = CType(Me.NewRow,ServerSettingRow)
                Dim columnValuesArray() As Object = New Object() {ServerSettingId, Name, Status, Value, LongValue, ValidAfter, ValidBefore, Created, CreatedBy, Modified, ModifiedBy}
                rowServerSettingRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowServerSettingRow)
                Return rowServerSettingRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByServerSettingId(ByVal ServerSettingId As System.Guid) As ServerSettingRow
                Return CType(Me.Rows.Find(New Object() {ServerSettingId}),ServerSettingRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ServerSettingDataTable = CType(MyBase.Clone,ServerSettingDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ServerSettingDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnServerSettingId = MyBase.Columns("ServerSettingId")
                Me.columnName = MyBase.Columns("Name")
                Me.columnStatus = MyBase.Columns("Status")
                Me.columnValue = MyBase.Columns("Value")
                Me.columnLongValue = MyBase.Columns("LongValue")
                Me.columnValidAfter = MyBase.Columns("ValidAfter")
                Me.columnValidBefore = MyBase.Columns("ValidBefore")
                Me.columnCreated = MyBase.Columns("Created")
                Me.columnCreatedBy = MyBase.Columns("CreatedBy")
                Me.columnModified = MyBase.Columns("Modified")
                Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnServerSettingId = New Global.System.Data.DataColumn("ServerSettingId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnServerSettingId)
                Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnName)
                Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStatus)
                Me.columnValue = New Global.System.Data.DataColumn("Value", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnValue)
                Me.columnLongValue = New Global.System.Data.DataColumn("LongValue", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLongValue)
                Me.columnValidAfter = New Global.System.Data.DataColumn("ValidAfter", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnValidAfter)
                Me.columnValidBefore = New Global.System.Data.DataColumn("ValidBefore", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnValidBefore)
                Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreated)
                Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedBy)
                Me.columnModified = New Global.System.Data.DataColumn("Modified", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModified)
                Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedBy)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("ServerSetting_UC", New Global.System.Data.DataColumn() {Me.columnName, Me.columnStatus}, false))
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("ServerSettingPK", New Global.System.Data.DataColumn() {Me.columnServerSettingId}, true))
                Me.columnServerSettingId.AllowDBNull = false
                Me.columnServerSettingId.Unique = true
                Me.columnName.AllowDBNull = false
                Me.columnName.MaxLength = 128
                Me.columnStatus.AllowDBNull = false
                Me.columnValue.MaxLength = 1000
                Me.columnLongValue.MaxLength = 2147483647
                Me.columnCreatedBy.MaxLength = 128
                Me.columnModifiedBy.MaxLength = 128
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewServerSettingRow() As ServerSettingRow
                Return CType(Me.NewRow,ServerSettingRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ServerSettingRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ServerSettingRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ServerSettingRowChangedEvent) Is Nothing) Then
                    RaiseEvent ServerSettingRowChanged(Me, New ServerSettingRowChangeEvent(CType(e.Row,ServerSettingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ServerSettingRowChangingEvent) Is Nothing) Then
                    RaiseEvent ServerSettingRowChanging(Me, New ServerSettingRowChangeEvent(CType(e.Row,ServerSettingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ServerSettingRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ServerSettingRowDeleted(Me, New ServerSettingRowChangeEvent(CType(e.Row,ServerSettingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ServerSettingRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ServerSettingRowDeleting(Me, New ServerSettingRowChangeEvent(CType(e.Row,ServerSettingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveServerSettingRow(ByVal row As ServerSettingRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As Utility = New Utility
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ServerSettingDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ActiveConsultantsRow
            Inherits Global.System.Data.DataRow
            
            Private tableActiveConsultants As ActiveConsultantsDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableActiveConsultants = CType(Me.Table,ActiveConsultantsDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantUID() As System.Guid
                Get
                    Return CType(Me(Me.tableActiveConsultants.ConsultantUIDColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableActiveConsultants.ConsultantUIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Name() As String
                Get
                    Return CType(Me(Me.tableActiveConsultants.NameColumn),String)
                End Get
                Set
                    Me(Me.tableActiveConsultants.NameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Username() As String
                Get
                    Try 
                        Return CType(Me(Me.tableActiveConsultants.UsernameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Username' in table 'ActiveConsultants' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableActiveConsultants.UsernameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsUsernameNull() As Boolean
                Return Me.IsNull(Me.tableActiveConsultants.UsernameColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetUsernameNull()
                Me(Me.tableActiveConsultants.UsernameColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class UserRow
            Inherits Global.System.Data.DataRow
            
            Private tableUser As UserDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableUser = CType(Me.Table,UserDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantUID() As System.Guid
                Get
                    Return CType(Me(Me.tableUser.ConsultantUIDColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableUser.ConsultantUIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Username() As String
                Get
                    Try 
                        Return CType(Me(Me.tableUser.UsernameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Username' in table 'User' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableUser.UsernameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Name() As String
                Get
                    Return CType(Me(Me.tableUser.NameColumn),String)
                End Get
                Set
                    Me(Me.tableUser.NameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property DomainLogon() As String
                Get
                    Try 
                        Return CType(Me(Me.tableUser.DomainLogonColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DomainLogon' in table 'User' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableUser.DomainLogonColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Management() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableUser.ManagementColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Management' in table 'User' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableUser.ManagementColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Administration() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableUser.AdministrationColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Administration' in table 'User' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableUser.AdministrationColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property IsActiviserUser() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableUser.IsActiviserUserColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'IsActiviserUser' in table 'User' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableUser.IsActiviserUserColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property SyncTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableUser.SyncTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SyncTime' in table 'User' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableUser.SyncTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property LastSyncTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableUser.LastSyncTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LastSyncTime' in table 'User' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableUser.LastSyncTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsUsernameNull() As Boolean
                Return Me.IsNull(Me.tableUser.UsernameColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetUsernameNull()
                Me(Me.tableUser.UsernameColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDomainLogonNull() As Boolean
                Return Me.IsNull(Me.tableUser.DomainLogonColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDomainLogonNull()
                Me(Me.tableUser.DomainLogonColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsManagementNull() As Boolean
                Return Me.IsNull(Me.tableUser.ManagementColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetManagementNull()
                Me(Me.tableUser.ManagementColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsAdministrationNull() As Boolean
                Return Me.IsNull(Me.tableUser.AdministrationColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetAdministrationNull()
                Me(Me.tableUser.AdministrationColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsIsActiviserUserNull() As Boolean
                Return Me.IsNull(Me.tableUser.IsActiviserUserColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetIsActiviserUserNull()
                Me(Me.tableUser.IsActiviserUserColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsSyncTimeNull() As Boolean
                Return Me.IsNull(Me.tableUser.SyncTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetSyncTimeNull()
                Me(Me.tableUser.SyncTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsLastSyncTimeNull() As Boolean
                Return Me.IsNull(Me.tableUser.LastSyncTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetLastSyncTimeNull()
                Me(Me.tableUser.LastSyncTimeColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ServerSettingRow
            Inherits Global.System.Data.DataRow
            
            Private tableServerSetting As ServerSettingDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableServerSetting = CType(Me.Table,ServerSettingDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ServerSettingId() As System.Guid
                Get
                    Return CType(Me(Me.tableServerSetting.ServerSettingIdColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableServerSetting.ServerSettingIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Name() As String
                Get
                    Return CType(Me(Me.tableServerSetting.NameColumn),String)
                End Get
                Set
                    Me(Me.tableServerSetting.NameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Status() As Integer
                Get
                    Return CType(Me(Me.tableServerSetting.StatusColumn),Integer)
                End Get
                Set
                    Me(Me.tableServerSetting.StatusColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Value() As String
                Get
                    Try 
                        Return CType(Me(Me.tableServerSetting.ValueColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Value' in table 'ServerSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableServerSetting.ValueColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property LongValue() As String
                Get
                    Try 
                        Return CType(Me(Me.tableServerSetting.LongValueColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LongValue' in table 'ServerSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableServerSetting.LongValueColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ValidAfter() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableServerSetting.ValidAfterColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ValidAfter' in table 'ServerSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableServerSetting.ValidAfterColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ValidBefore() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableServerSetting.ValidBeforeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ValidBefore' in table 'ServerSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableServerSetting.ValidBeforeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Created() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableServerSetting.CreatedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Created' in table 'ServerSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableServerSetting.CreatedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableServerSetting.CreatedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'ServerSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableServerSetting.CreatedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Modified() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableServerSetting.ModifiedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Modified' in table 'ServerSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableServerSetting.ModifiedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableServerSetting.ModifiedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'ServerSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableServerSetting.ModifiedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsValueNull() As Boolean
                Return Me.IsNull(Me.tableServerSetting.ValueColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetValueNull()
                Me(Me.tableServerSetting.ValueColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsLongValueNull() As Boolean
                Return Me.IsNull(Me.tableServerSetting.LongValueColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetLongValueNull()
                Me(Me.tableServerSetting.LongValueColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsValidAfterNull() As Boolean
                Return Me.IsNull(Me.tableServerSetting.ValidAfterColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetValidAfterNull()
                Me(Me.tableServerSetting.ValidAfterColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsValidBeforeNull() As Boolean
                Return Me.IsNull(Me.tableServerSetting.ValidBeforeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetValidBeforeNull()
                Me(Me.tableServerSetting.ValidBeforeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedNull() As Boolean
                Return Me.IsNull(Me.tableServerSetting.CreatedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedNull()
                Me(Me.tableServerSetting.CreatedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedByNull() As Boolean
                Return Me.IsNull(Me.tableServerSetting.CreatedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedByNull()
                Me(Me.tableServerSetting.CreatedByColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedNull() As Boolean
                Return Me.IsNull(Me.tableServerSetting.ModifiedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedNull()
                Me(Me.tableServerSetting.ModifiedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedByNull() As Boolean
                Return Me.IsNull(Me.tableServerSetting.ModifiedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedByNull()
                Me(Me.tableServerSetting.ModifiedByColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class ActiveConsultantsRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ActiveConsultantsRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As ActiveConsultantsRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As ActiveConsultantsRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class UserRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As UserRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As UserRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As UserRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class ServerSettingRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ServerSettingRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As ServerSettingRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As ServerSettingRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("activiserDataSet")>  _
    Partial Public Class activiserDataSet
        Inherits Global.System.Data.DataSet
        
        Private tableConsultant As ConsultantDataTable
        
        Private tableClientSiteStatus As ClientSiteStatusDataTable
        
        Private tableClientSite As ClientSiteDataTable
        
        Private tableRequestStatus As RequestStatusDataTable
        
        Private tableRequest As RequestDataTable
        
        Private tableJobStatus As JobStatusDataTable
        
        Private tableJob As JobDataTable
        
        Private relationFK_Job_Consultant As Global.System.Data.DataRelation
        
        Private relationFK_Job_ClientSite As Global.System.Data.DataRelation
        
        Private relationFK_Job_Request As Global.System.Data.DataRelation
        
        Private relationFK_Request_ClientSite As Global.System.Data.DataRelation
        
        Private relationFK_JobStatus_Job As Global.System.Data.DataRelation
        
        Private relationFK_ClientSite_ClientSiteStatus As Global.System.Data.DataRelation
        
        Private relationFK_Request_Consultant As Global.System.Data.DataRelation
        
        Private relationFK_Request_ConsultantStatus As Global.System.Data.DataRelation
        
        Private relationFK_Request_RequestStatus As Global.System.Data.DataRelation
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
            Me.InitExpressions
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Consultant() As ConsultantDataTable
            Get
                Return Me.tableConsultant
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientSiteStatus() As ClientSiteStatusDataTable
            Get
                Return Me.tableClientSiteStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientSite() As ClientSiteDataTable
            Get
                Return Me.tableClientSite
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property RequestStatus() As RequestStatusDataTable
            Get
                Return Me.tableRequestStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Request() As RequestDataTable
            Get
                Return Me.tableRequest
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property JobStatus() As JobStatusDataTable
            Get
                Return Me.tableJobStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Job() As JobDataTable
            Get
                Return Me.tableJob
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As activiserDataSet = CType(MyBase.Clone,activiserDataSet)
            cln.InitVars
            cln.InitExpressions
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("Consultant")) Is Nothing) Then
                    MyBase.Tables.Add(New ConsultantDataTable(ds.Tables("Consultant")))
                End If
                If (Not (ds.Tables("ClientSiteStatus")) Is Nothing) Then
                    MyBase.Tables.Add(New ClientSiteStatusDataTable(ds.Tables("ClientSiteStatus")))
                End If
                If (Not (ds.Tables("ClientSite")) Is Nothing) Then
                    MyBase.Tables.Add(New ClientSiteDataTable(ds.Tables("ClientSite")))
                End If
                If (Not (ds.Tables("RequestStatus")) Is Nothing) Then
                    MyBase.Tables.Add(New RequestStatusDataTable(ds.Tables("RequestStatus")))
                End If
                If (Not (ds.Tables("Request")) Is Nothing) Then
                    MyBase.Tables.Add(New RequestDataTable(ds.Tables("Request")))
                End If
                If (Not (ds.Tables("JobStatus")) Is Nothing) Then
                    MyBase.Tables.Add(New JobStatusDataTable(ds.Tables("JobStatus")))
                End If
                If (Not (ds.Tables("Job")) Is Nothing) Then
                    MyBase.Tables.Add(New JobDataTable(ds.Tables("Job")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableConsultant = CType(MyBase.Tables("Consultant"),ConsultantDataTable)
            If (initTable = true) Then
                If (Not (Me.tableConsultant) Is Nothing) Then
                    Me.tableConsultant.InitVars
                End If
            End If
            Me.tableClientSiteStatus = CType(MyBase.Tables("ClientSiteStatus"),ClientSiteStatusDataTable)
            If (initTable = true) Then
                If (Not (Me.tableClientSiteStatus) Is Nothing) Then
                    Me.tableClientSiteStatus.InitVars
                End If
            End If
            Me.tableClientSite = CType(MyBase.Tables("ClientSite"),ClientSiteDataTable)
            If (initTable = true) Then
                If (Not (Me.tableClientSite) Is Nothing) Then
                    Me.tableClientSite.InitVars
                End If
            End If
            Me.tableRequestStatus = CType(MyBase.Tables("RequestStatus"),RequestStatusDataTable)
            If (initTable = true) Then
                If (Not (Me.tableRequestStatus) Is Nothing) Then
                    Me.tableRequestStatus.InitVars
                End If
            End If
            Me.tableRequest = CType(MyBase.Tables("Request"),RequestDataTable)
            If (initTable = true) Then
                If (Not (Me.tableRequest) Is Nothing) Then
                    Me.tableRequest.InitVars
                End If
            End If
            Me.tableJobStatus = CType(MyBase.Tables("JobStatus"),JobStatusDataTable)
            If (initTable = true) Then
                If (Not (Me.tableJobStatus) Is Nothing) Then
                    Me.tableJobStatus.InitVars
                End If
            End If
            Me.tableJob = CType(MyBase.Tables("Job"),JobDataTable)
            If (initTable = true) Then
                If (Not (Me.tableJob) Is Nothing) Then
                    Me.tableJob.InitVars
                End If
            End If
            Me.relationFK_Job_Consultant = Me.Relations("FK_Job_Consultant")
            Me.relationFK_Job_ClientSite = Me.Relations("FK_Job_ClientSite")
            Me.relationFK_Job_Request = Me.Relations("FK_Job_Request")
            Me.relationFK_Request_ClientSite = Me.Relations("FK_Request_ClientSite")
            Me.relationFK_JobStatus_Job = Me.Relations("FK_JobStatus_Job")
            Me.relationFK_ClientSite_ClientSiteStatus = Me.Relations("FK_ClientSite_ClientSiteStatus")
            Me.relationFK_Request_Consultant = Me.Relations("FK_Request_Consultant")
            Me.relationFK_Request_ConsultantStatus = Me.Relations("FK_Request_ConsultantStatus")
            Me.relationFK_Request_RequestStatus = Me.Relations("FK_Request_RequestStatus")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "activiserDataSet"
            Me.Prefix = ""
            Me.Namespace = "http://www.activiser.com/schemas/activiserDataSet.XSD"
            Me.Locale = New Global.System.Globalization.CultureInfo("")
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableConsultant = New ConsultantDataTable
            MyBase.Tables.Add(Me.tableConsultant)
            Me.tableClientSiteStatus = New ClientSiteStatusDataTable
            MyBase.Tables.Add(Me.tableClientSiteStatus)
            Me.tableClientSite = New ClientSiteDataTable
            MyBase.Tables.Add(Me.tableClientSite)
            Me.tableRequestStatus = New RequestStatusDataTable
            MyBase.Tables.Add(Me.tableRequestStatus)
            Me.tableRequest = New RequestDataTable(false)
            MyBase.Tables.Add(Me.tableRequest)
            Me.tableJobStatus = New JobStatusDataTable
            MyBase.Tables.Add(Me.tableJobStatus)
            Me.tableJob = New JobDataTable(false)
            MyBase.Tables.Add(Me.tableJob)
            Me.relationFK_Job_Consultant = New Global.System.Data.DataRelation("FK_Job_Consultant", New Global.System.Data.DataColumn() {Me.tableConsultant.ConsultantUIDColumn}, New Global.System.Data.DataColumn() {Me.tableJob.ConsultantUIDColumn}, false)
            Me.Relations.Add(Me.relationFK_Job_Consultant)
            Me.relationFK_Job_ClientSite = New Global.System.Data.DataRelation("FK_Job_ClientSite", New Global.System.Data.DataColumn() {Me.tableClientSite.ClientSiteUIDColumn}, New Global.System.Data.DataColumn() {Me.tableJob.ClientSiteUIDColumn}, false)
            Me.Relations.Add(Me.relationFK_Job_ClientSite)
            Me.relationFK_Job_Request = New Global.System.Data.DataRelation("FK_Job_Request", New Global.System.Data.DataColumn() {Me.tableRequest.RequestUIDColumn}, New Global.System.Data.DataColumn() {Me.tableJob.RequestUIDColumn}, false)
            Me.Relations.Add(Me.relationFK_Job_Request)
            Me.relationFK_Request_ClientSite = New Global.System.Data.DataRelation("FK_Request_ClientSite", New Global.System.Data.DataColumn() {Me.tableClientSite.ClientSiteUIDColumn}, New Global.System.Data.DataColumn() {Me.tableRequest.ClientSiteUIDColumn}, false)
            Me.Relations.Add(Me.relationFK_Request_ClientSite)
            Me.relationFK_JobStatus_Job = New Global.System.Data.DataRelation("FK_JobStatus_Job", New Global.System.Data.DataColumn() {Me.tableJobStatus.JobStatusIDColumn}, New Global.System.Data.DataColumn() {Me.tableJob.JobStatusIDColumn}, false)
            Me.Relations.Add(Me.relationFK_JobStatus_Job)
            Me.relationFK_ClientSite_ClientSiteStatus = New Global.System.Data.DataRelation("FK_ClientSite_ClientSiteStatus", New Global.System.Data.DataColumn() {Me.tableClientSiteStatus.ClientSiteStatusIDColumn}, New Global.System.Data.DataColumn() {Me.tableClientSite.ClientSiteStatusIDColumn}, false)
            Me.Relations.Add(Me.relationFK_ClientSite_ClientSiteStatus)
            Me.relationFK_Request_Consultant = New Global.System.Data.DataRelation("FK_Request_Consultant", New Global.System.Data.DataColumn() {Me.tableConsultant.ConsultantUIDColumn}, New Global.System.Data.DataColumn() {Me.tableRequest.AssignedToUIDColumn}, false)
            Me.Relations.Add(Me.relationFK_Request_Consultant)
            Me.relationFK_Request_ConsultantStatus = New Global.System.Data.DataRelation("FK_Request_ConsultantStatus", New Global.System.Data.DataColumn() {Me.tableRequestStatus.RequestStatusIDColumn}, New Global.System.Data.DataColumn() {Me.tableRequest.ConsultantStatusIDColumn}, false)
            Me.Relations.Add(Me.relationFK_Request_ConsultantStatus)
            Me.relationFK_Request_RequestStatus = New Global.System.Data.DataRelation("FK_Request_RequestStatus", New Global.System.Data.DataColumn() {Me.tableRequestStatus.RequestStatusIDColumn}, New Global.System.Data.DataColumn() {Me.tableRequest.RequestStatusIDColumn}, false)
            Me.Relations.Add(Me.relationFK_Request_RequestStatus)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeConsultant() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeClientSiteStatus() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeClientSite() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeRequestStatus() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeRequest() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeJobStatus() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeJob() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As activiserDataSet = New activiserDataSet
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitExpressions()
            Me.Request.ClientSiteNameColumn.Expression = "Parent(FK_Request_ClientSite).SiteName"
            Me.Request.JobsColumn.Expression = "COUNT(CHILD(FK_Job_Request).JobStatusID)"
            Me.Request.AssignedToNameColumn.Expression = "Parent(FK_Request_Consultant).Name"
            Me.Request.RequestStatusDescriptionColumn.Expression = "Parent(FK_Request_RequestStatus).Description"
            Me.Request.RequestStatusOrderColumn.Expression = "Parent(FK_Request_RequestStatus).DisplayOrder"
            Me.Request.ConsultantStatusDescriptionColumn.Expression = "ISNULL(Parent(FK_Request_ConsultantStatus).Description,Parent(FK_Request_RequestS"& _ 
                "tatus).Description)"
            Me.Request.ConsultantStatusOrderColumn.Expression = "ISNULL(Parent(FK_Request_ConsultantStatus).DisplayOrder, Parent(FK_Request_Reques"& _ 
                "tStatus).DisplayOrder)"
            Me.Job.ConsultantNameColumn.Expression = "Parent(FK_Job_Consultant).Name"
            Me.Job.RequestNumberColumn.Expression = "Parent(FK_Job_Request).RequestNumber"
            Me.Job.ClientSiteNameColumn.Expression = "Parent(FK_Job_ClientSite).SiteName"
        End Sub
        
        Public Delegate Sub ConsultantRowChangeEventHandler(ByVal sender As Object, ByVal e As ConsultantRowChangeEvent)
        
        Public Delegate Sub ClientSiteStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientSiteStatusRowChangeEvent)
        
        Public Delegate Sub ClientSiteRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientSiteRowChangeEvent)
        
        Public Delegate Sub RequestStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As RequestStatusRowChangeEvent)
        
        Public Delegate Sub RequestRowChangeEventHandler(ByVal sender As Object, ByVal e As RequestRowChangeEvent)
        
        Public Delegate Sub JobStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As JobStatusRowChangeEvent)
        
        Public Delegate Sub JobRowChangeEventHandler(ByVal sender As Object, ByVal e As JobRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ConsultantDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnConsultantNumber As Global.System.Data.DataColumn
            
            Private columnName As Global.System.Data.DataColumn
            
            Private columnUsername As Global.System.Data.DataColumn
            
            Private columnEmailAddress As Global.System.Data.DataColumn
            
            Private columnMobilePhone As Global.System.Data.DataColumn
            
            Private columnConsultantUID As Global.System.Data.DataColumn
            
            Private columnConsultantID As Global.System.Data.DataColumn
            
            Private columnCreatedDateTime As Global.System.Data.DataColumn
            
            Private columnModifiedDateTime As Global.System.Data.DataColumn
            
            Private columnMinSyncTime As Global.System.Data.DataColumn
            
            Private columnLastSyncTime As Global.System.Data.DataColumn
            
            Private columnSyncTime As Global.System.Data.DataColumn
            
            Private columnMobileAlert As Global.System.Data.DataColumn
            
            Private columnIsActiviserUser As Global.System.Data.DataColumn
            
            Private columnManagement As Global.System.Data.DataColumn
            
            Private columnAdministration As Global.System.Data.DataColumn
            
            Private columnDomainLogon As Global.System.Data.DataColumn
            
            Private columnTrackingTimestamp As Global.System.Data.DataColumn
            
            Private columnTrackingInfo As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Consultant"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantNumberColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantNumber
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property UsernameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnUsername
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EmailAddressColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEmailAddress
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property MobilePhoneColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMobilePhone
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantUIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantUID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property MinSyncTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMinSyncTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LastSyncTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLastSyncTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SyncTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSyncTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property MobileAlertColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMobileAlert
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property IsActiviserUserColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsActiviserUser
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ManagementColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnManagement
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property AdministrationColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAdministration
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DomainLogonColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDomainLogon
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TrackingTimestampColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTrackingTimestamp
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TrackingInfoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTrackingInfo
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ConsultantRow
                Get
                    Return CType(Me.Rows(index),ConsultantRow)
                End Get
            End Property
            
            Public Event ConsultantRowChanging As ConsultantRowChangeEventHandler
            
            Public Event ConsultantRowChanged As ConsultantRowChangeEventHandler
            
            Public Event ConsultantRowDeleting As ConsultantRowChangeEventHandler
            
            Public Event ConsultantRowDeleted As ConsultantRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddConsultantRow(ByVal row As ConsultantRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddConsultantRow( _
                        ByVal ConsultantNumber As String,  _
                        ByVal Name As String,  _
                        ByVal Username As String,  _
                        ByVal EmailAddress As String,  _
                        ByVal MobilePhone As String,  _
                        ByVal ConsultantUID As System.Guid,  _
                        ByVal ConsultantID As Integer,  _
                        ByVal CreatedDateTime As Date,  _
                        ByVal ModifiedDateTime As Date,  _
                        ByVal MinSyncTime As Integer,  _
                        ByVal LastSyncTime As Date,  _
                        ByVal SyncTime As Date,  _
                        ByVal MobileAlert As Boolean,  _
                        ByVal IsActiviserUser As Boolean,  _
                        ByVal Management As Boolean,  _
                        ByVal Administration As Boolean,  _
                        ByVal DomainLogon As String,  _
                        ByVal TrackingTimestamp As Date,  _
                        ByVal TrackingInfo As String) As ConsultantRow
                Dim rowConsultantRow As ConsultantRow = CType(Me.NewRow,ConsultantRow)
                Dim columnValuesArray() As Object = New Object() {ConsultantNumber, Name, Username, EmailAddress, MobilePhone, ConsultantUID, ConsultantID, CreatedDateTime, ModifiedDateTime, MinSyncTime, LastSyncTime, SyncTime, MobileAlert, IsActiviserUser, Management, Administration, DomainLogon, TrackingTimestamp, TrackingInfo}
                rowConsultantRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowConsultantRow)
                Return rowConsultantRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByConsultantUID(ByVal ConsultantUID As System.Guid) As ConsultantRow
                Return CType(Me.Rows.Find(New Object() {ConsultantUID}),ConsultantRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ConsultantDataTable = CType(MyBase.Clone,ConsultantDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ConsultantDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnConsultantNumber = MyBase.Columns("ConsultantNumber")
                Me.columnName = MyBase.Columns("Name")
                Me.columnUsername = MyBase.Columns("Username")
                Me.columnEmailAddress = MyBase.Columns("EmailAddress")
                Me.columnMobilePhone = MyBase.Columns("MobilePhone")
                Me.columnConsultantUID = MyBase.Columns("ConsultantUID")
                Me.columnConsultantID = MyBase.Columns("ConsultantID")
                Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
                Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
                Me.columnMinSyncTime = MyBase.Columns("MinSyncTime")
                Me.columnLastSyncTime = MyBase.Columns("LastSyncTime")
                Me.columnSyncTime = MyBase.Columns("SyncTime")
                Me.columnMobileAlert = MyBase.Columns("MobileAlert")
                Me.columnIsActiviserUser = MyBase.Columns("IsActiviserUser")
                Me.columnManagement = MyBase.Columns("Management")
                Me.columnAdministration = MyBase.Columns("Administration")
                Me.columnDomainLogon = MyBase.Columns("DomainLogon")
                Me.columnTrackingTimestamp = MyBase.Columns("TrackingTimestamp")
                Me.columnTrackingInfo = MyBase.Columns("TrackingInfo")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnConsultantNumber = New Global.System.Data.DataColumn("ConsultantNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantNumber)
                Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnName)
                Me.columnUsername = New Global.System.Data.DataColumn("Username", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnUsername)
                Me.columnEmailAddress = New Global.System.Data.DataColumn("EmailAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEmailAddress)
                Me.columnMobilePhone = New Global.System.Data.DataColumn("MobilePhone", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMobilePhone)
                Me.columnConsultantUID = New Global.System.Data.DataColumn("ConsultantUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantUID)
                Me.columnConsultantID = New Global.System.Data.DataColumn("ConsultantID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantID)
                Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedDateTime)
                Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedDateTime)
                Me.columnMinSyncTime = New Global.System.Data.DataColumn("MinSyncTime", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMinSyncTime)
                Me.columnLastSyncTime = New Global.System.Data.DataColumn("LastSyncTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLastSyncTime)
                Me.columnSyncTime = New Global.System.Data.DataColumn("SyncTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSyncTime)
                Me.columnMobileAlert = New Global.System.Data.DataColumn("MobileAlert", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMobileAlert)
                Me.columnIsActiviserUser = New Global.System.Data.DataColumn("IsActiviserUser", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsActiviserUser)
                Me.columnManagement = New Global.System.Data.DataColumn("Management", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnManagement)
                Me.columnAdministration = New Global.System.Data.DataColumn("Administration", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAdministration)
                Me.columnDomainLogon = New Global.System.Data.DataColumn("DomainLogon", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDomainLogon)
                Me.columnTrackingTimestamp = New Global.System.Data.DataColumn("TrackingTimestamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTrackingTimestamp)
                Me.columnTrackingInfo = New Global.System.Data.DataColumn("TrackingInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTrackingInfo)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_Consultant", New Global.System.Data.DataColumn() {Me.columnConsultantUID}, true))
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("UX_Consultant_Username", New Global.System.Data.DataColumn() {Me.columnUsername}, false))
                Me.columnConsultantNumber.MaxLength = 100
                Me.columnName.AllowDBNull = false
                Me.columnName.MaxLength = 250
                Me.columnUsername.Unique = true
                Me.columnUsername.MaxLength = 50
                Me.columnEmailAddress.MaxLength = 100
                Me.columnMobilePhone.MaxLength = 50
                Me.columnConsultantUID.AllowDBNull = false
                Me.columnConsultantUID.Unique = true
                Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnMobileAlert.DefaultValue = CType(false,Boolean)
                Me.columnIsActiviserUser.DefaultValue = CType(true,Boolean)
                Me.columnManagement.DefaultValue = CType(false,Boolean)
                Me.columnAdministration.DefaultValue = CType(false,Boolean)
                Me.columnDomainLogon.MaxLength = 250
                Me.columnTrackingInfo.MaxLength = 128
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewConsultantRow() As ConsultantRow
                Return CType(Me.NewRow,ConsultantRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ConsultantRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ConsultantRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ConsultantRowChangedEvent) Is Nothing) Then
                    RaiseEvent ConsultantRowChanged(Me, New ConsultantRowChangeEvent(CType(e.Row,ConsultantRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ConsultantRowChangingEvent) Is Nothing) Then
                    RaiseEvent ConsultantRowChanging(Me, New ConsultantRowChangeEvent(CType(e.Row,ConsultantRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ConsultantRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ConsultantRowDeleted(Me, New ConsultantRowChangeEvent(CType(e.Row,ConsultantRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ConsultantRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ConsultantRowDeleting(Me, New ConsultantRowChangeEvent(CType(e.Row,ConsultantRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveConsultantRow(ByVal row As ConsultantRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As activiserDataSet = New activiserDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ConsultantDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ClientSiteStatusDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnClientSiteStatusID As Global.System.Data.DataColumn
            
            Private columnDescription As Global.System.Data.DataColumn
            
            Private columnIsActive As Global.System.Data.DataColumn
            
            Private columnCreatedDateTime As Global.System.Data.DataColumn
            
            Private columnModifiedDateTime As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "ClientSiteStatus"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientSiteStatusIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientSiteStatusID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property IsActiveColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsActive
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ClientSiteStatusRow
                Get
                    Return CType(Me.Rows(index),ClientSiteStatusRow)
                End Get
            End Property
            
            Public Event ClientSiteStatusRowChanging As ClientSiteStatusRowChangeEventHandler
            
            Public Event ClientSiteStatusRowChanged As ClientSiteStatusRowChangeEventHandler
            
            Public Event ClientSiteStatusRowDeleting As ClientSiteStatusRowChangeEventHandler
            
            Public Event ClientSiteStatusRowDeleted As ClientSiteStatusRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddClientSiteStatusRow(ByVal row As ClientSiteStatusRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddClientSiteStatusRow(ByVal ClientSiteStatusID As Integer, ByVal Description As String, ByVal IsActive As Boolean, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date) As ClientSiteStatusRow
                Dim rowClientSiteStatusRow As ClientSiteStatusRow = CType(Me.NewRow,ClientSiteStatusRow)
                Dim columnValuesArray() As Object = New Object() {ClientSiteStatusID, Description, IsActive, CreatedDateTime, ModifiedDateTime}
                rowClientSiteStatusRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowClientSiteStatusRow)
                Return rowClientSiteStatusRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByClientSiteStatusID(ByVal ClientSiteStatusID As Integer) As ClientSiteStatusRow
                Return CType(Me.Rows.Find(New Object() {ClientSiteStatusID}),ClientSiteStatusRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ClientSiteStatusDataTable = CType(MyBase.Clone,ClientSiteStatusDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ClientSiteStatusDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnClientSiteStatusID = MyBase.Columns("ClientSiteStatusID")
                Me.columnDescription = MyBase.Columns("Description")
                Me.columnIsActive = MyBase.Columns("IsActive")
                Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
                Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnClientSiteStatusID = New Global.System.Data.DataColumn("ClientSiteStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientSiteStatusID)
                Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescription)
                Me.columnIsActive = New Global.System.Data.DataColumn("IsActive", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsActive)
                Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedDateTime)
                Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedDateTime)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_ClientSiteStatus", New Global.System.Data.DataColumn() {Me.columnClientSiteStatusID}, true))
                Me.columnClientSiteStatusID.AllowDBNull = false
                Me.columnClientSiteStatusID.Unique = true
                Me.columnDescription.AllowDBNull = false
                Me.columnDescription.MaxLength = 250
                Me.columnIsActive.AllowDBNull = false
                Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewClientSiteStatusRow() As ClientSiteStatusRow
                Return CType(Me.NewRow,ClientSiteStatusRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ClientSiteStatusRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ClientSiteStatusRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ClientSiteStatusRowChangedEvent) Is Nothing) Then
                    RaiseEvent ClientSiteStatusRowChanged(Me, New ClientSiteStatusRowChangeEvent(CType(e.Row,ClientSiteStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ClientSiteStatusRowChangingEvent) Is Nothing) Then
                    RaiseEvent ClientSiteStatusRowChanging(Me, New ClientSiteStatusRowChangeEvent(CType(e.Row,ClientSiteStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ClientSiteStatusRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ClientSiteStatusRowDeleted(Me, New ClientSiteStatusRowChangeEvent(CType(e.Row,ClientSiteStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ClientSiteStatusRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ClientSiteStatusRowDeleting(Me, New ClientSiteStatusRowChangeEvent(CType(e.Row,ClientSiteStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveClientSiteStatusRow(ByVal row As ClientSiteStatusRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As activiserDataSet = New activiserDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ClientSiteStatusDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ClientSiteDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnClientSiteUID As Global.System.Data.DataColumn
            
            Private columnClientSiteID As Global.System.Data.DataColumn
            
            Private columnClientSiteNumber As Global.System.Data.DataColumn
            
            Private columnSiteName As Global.System.Data.DataColumn
            
            Private columnSiteAddress As Global.System.Data.DataColumn
            
            Private columnSiteContactEmail As Global.System.Data.DataColumn
            
            Private columnSiteNotes As Global.System.Data.DataColumn
            
            Private columnContact As Global.System.Data.DataColumn
            
            Private columnContactPhone1 As Global.System.Data.DataColumn
            
            Private columnContactPhone2 As Global.System.Data.DataColumn
            
            Private columnHold As Global.System.Data.DataColumn
            
            Private columnClientSiteStatusID As Global.System.Data.DataColumn
            
            Private columnCreatedDateTime As Global.System.Data.DataColumn
            
            Private columnModifiedDateTime As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "ClientSite"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientSiteUIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientSiteUID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientSiteIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientSiteID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientSiteNumberColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientSiteNumber
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SiteNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSiteName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SiteAddressColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSiteAddress
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SiteContactEmailColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSiteContactEmail
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SiteNotesColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSiteNotes
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ContactColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnContact
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ContactPhone1Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnContactPhone1
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ContactPhone2Column() As Global.System.Data.DataColumn
                Get
                    Return Me.columnContactPhone2
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property HoldColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnHold
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientSiteStatusIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientSiteStatusID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ClientSiteRow
                Get
                    Return CType(Me.Rows(index),ClientSiteRow)
                End Get
            End Property
            
            Public Event ClientSiteRowChanging As ClientSiteRowChangeEventHandler
            
            Public Event ClientSiteRowChanged As ClientSiteRowChangeEventHandler
            
            Public Event ClientSiteRowDeleting As ClientSiteRowChangeEventHandler
            
            Public Event ClientSiteRowDeleted As ClientSiteRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddClientSiteRow(ByVal row As ClientSiteRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddClientSiteRow(ByVal ClientSiteUID As System.Guid, ByVal ClientSiteID As Integer, ByVal ClientSiteNumber As String, ByVal SiteName As String, ByVal SiteAddress As String, ByVal SiteContactEmail As String, ByVal SiteNotes As String, ByVal Contact As String, ByVal ContactPhone1 As String, ByVal ContactPhone2 As String, ByVal Hold As Boolean, ByVal parentClientSiteStatusRowByFK_ClientSite_ClientSiteStatus As ClientSiteStatusRow, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date) As ClientSiteRow
                Dim rowClientSiteRow As ClientSiteRow = CType(Me.NewRow,ClientSiteRow)
                Dim columnValuesArray() As Object = New Object() {ClientSiteUID, ClientSiteID, ClientSiteNumber, SiteName, SiteAddress, SiteContactEmail, SiteNotes, Contact, ContactPhone1, ContactPhone2, Hold, Nothing, CreatedDateTime, ModifiedDateTime}
                If (Not (parentClientSiteStatusRowByFK_ClientSite_ClientSiteStatus) Is Nothing) Then
                    columnValuesArray(11) = parentClientSiteStatusRowByFK_ClientSite_ClientSiteStatus(0)
                End If
                rowClientSiteRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowClientSiteRow)
                Return rowClientSiteRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByClientSiteUID(ByVal ClientSiteUID As System.Guid) As ClientSiteRow
                Return CType(Me.Rows.Find(New Object() {ClientSiteUID}),ClientSiteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ClientSiteDataTable = CType(MyBase.Clone,ClientSiteDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ClientSiteDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnClientSiteUID = MyBase.Columns("ClientSiteUID")
                Me.columnClientSiteID = MyBase.Columns("ClientSiteID")
                Me.columnClientSiteNumber = MyBase.Columns("ClientSiteNumber")
                Me.columnSiteName = MyBase.Columns("SiteName")
                Me.columnSiteAddress = MyBase.Columns("SiteAddress")
                Me.columnSiteContactEmail = MyBase.Columns("SiteContactEmail")
                Me.columnSiteNotes = MyBase.Columns("SiteNotes")
                Me.columnContact = MyBase.Columns("Contact")
                Me.columnContactPhone1 = MyBase.Columns("ContactPhone1")
                Me.columnContactPhone2 = MyBase.Columns("ContactPhone2")
                Me.columnHold = MyBase.Columns("Hold")
                Me.columnClientSiteStatusID = MyBase.Columns("ClientSiteStatusID")
                Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
                Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnClientSiteUID = New Global.System.Data.DataColumn("ClientSiteUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientSiteUID)
                Me.columnClientSiteID = New Global.System.Data.DataColumn("ClientSiteID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientSiteID)
                Me.columnClientSiteNumber = New Global.System.Data.DataColumn("ClientSiteNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientSiteNumber)
                Me.columnSiteName = New Global.System.Data.DataColumn("SiteName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSiteName)
                Me.columnSiteAddress = New Global.System.Data.DataColumn("SiteAddress", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSiteAddress)
                Me.columnSiteContactEmail = New Global.System.Data.DataColumn("SiteContactEmail", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSiteContactEmail)
                Me.columnSiteNotes = New Global.System.Data.DataColumn("SiteNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSiteNotes)
                Me.columnContact = New Global.System.Data.DataColumn("Contact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnContact)
                Me.columnContactPhone1 = New Global.System.Data.DataColumn("ContactPhone1", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnContactPhone1)
                Me.columnContactPhone2 = New Global.System.Data.DataColumn("ContactPhone2", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnContactPhone2)
                Me.columnHold = New Global.System.Data.DataColumn("Hold", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnHold)
                Me.columnClientSiteStatusID = New Global.System.Data.DataColumn("ClientSiteStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientSiteStatusID)
                Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedDateTime)
                Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedDateTime)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_ClientSite", New Global.System.Data.DataColumn() {Me.columnClientSiteUID}, true))
                Me.columnClientSiteUID.AllowDBNull = false
                Me.columnClientSiteUID.Unique = true
                Me.columnClientSiteUID.Caption = "UID"
                Me.columnClientSiteID.Caption = "ID"
                Me.columnClientSiteNumber.MaxLength = 100
                Me.columnSiteName.MaxLength = 250
                Me.columnSiteAddress.MaxLength = 250
                Me.columnSiteContactEmail.MaxLength = 100
                Me.columnSiteNotes.MaxLength = 2000
                Me.columnContact.MaxLength = 100
                Me.columnContactPhone1.MaxLength = 50
                Me.columnContactPhone2.MaxLength = 50
                Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewClientSiteRow() As ClientSiteRow
                Return CType(Me.NewRow,ClientSiteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ClientSiteRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ClientSiteRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ClientSiteRowChangedEvent) Is Nothing) Then
                    RaiseEvent ClientSiteRowChanged(Me, New ClientSiteRowChangeEvent(CType(e.Row,ClientSiteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ClientSiteRowChangingEvent) Is Nothing) Then
                    RaiseEvent ClientSiteRowChanging(Me, New ClientSiteRowChangeEvent(CType(e.Row,ClientSiteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ClientSiteRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ClientSiteRowDeleted(Me, New ClientSiteRowChangeEvent(CType(e.Row,ClientSiteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ClientSiteRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ClientSiteRowDeleting(Me, New ClientSiteRowChangeEvent(CType(e.Row,ClientSiteRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveClientSiteRow(ByVal row As ClientSiteRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As activiserDataSet = New activiserDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ClientSiteDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class RequestStatusDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnRequestStatusID As Global.System.Data.DataColumn
            
            Private columnDescription As Global.System.Data.DataColumn
            
            Private columnDisplayOrder As Global.System.Data.DataColumn
            
            Private columnIsClientMenuItem As Global.System.Data.DataColumn
            
            Private columnIsReasonRequired As Global.System.Data.DataColumn
            
            Private columnIsNewStatus As Global.System.Data.DataColumn
            
            Private columnIsInProgressStatus As Global.System.Data.DataColumn
            
            Private columnIsCompleteStatus As Global.System.Data.DataColumn
            
            Private columnIsCancelledStatus As Global.System.Data.DataColumn
            
            Private columnCreatedDateTime As Global.System.Data.DataColumn
            
            Private columnModifiedDateTime As Global.System.Data.DataColumn
            
            Private columnColour As Global.System.Data.DataColumn
            
            Private columnBackColour As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "RequestStatus"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RequestStatusIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRequestStatusID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DisplayOrderColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDisplayOrder
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property IsClientMenuItemColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsClientMenuItem
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property IsReasonRequiredColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsReasonRequired
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property IsNewStatusColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsNewStatus
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property IsInProgressStatusColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsInProgressStatus
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property IsCompleteStatusColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsCompleteStatus
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property IsCancelledStatusColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsCancelledStatus
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ColourColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnColour
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property BackColourColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnBackColour
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As RequestStatusRow
                Get
                    Return CType(Me.Rows(index),RequestStatusRow)
                End Get
            End Property
            
            Public Event RequestStatusRowChanging As RequestStatusRowChangeEventHandler
            
            Public Event RequestStatusRowChanged As RequestStatusRowChangeEventHandler
            
            Public Event RequestStatusRowDeleting As RequestStatusRowChangeEventHandler
            
            Public Event RequestStatusRowDeleted As RequestStatusRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddRequestStatusRow(ByVal row As RequestStatusRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddRequestStatusRow(ByVal RequestStatusID As Integer, ByVal Description As String, ByVal DisplayOrder As Integer, ByVal IsClientMenuItem As Boolean, ByVal IsReasonRequired As Boolean, ByVal IsNewStatus As Boolean, ByVal IsInProgressStatus As Boolean, ByVal IsCompleteStatus As Boolean, ByVal IsCancelledStatus As Boolean, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date, ByVal Colour As Integer, ByVal BackColour As Integer) As RequestStatusRow
                Dim rowRequestStatusRow As RequestStatusRow = CType(Me.NewRow,RequestStatusRow)
                Dim columnValuesArray() As Object = New Object() {RequestStatusID, Description, DisplayOrder, IsClientMenuItem, IsReasonRequired, IsNewStatus, IsInProgressStatus, IsCompleteStatus, IsCancelledStatus, CreatedDateTime, ModifiedDateTime, Colour, BackColour}
                rowRequestStatusRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowRequestStatusRow)
                Return rowRequestStatusRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByRequestStatusID(ByVal RequestStatusID As Integer) As RequestStatusRow
                Return CType(Me.Rows.Find(New Object() {RequestStatusID}),RequestStatusRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As RequestStatusDataTable = CType(MyBase.Clone,RequestStatusDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New RequestStatusDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnRequestStatusID = MyBase.Columns("RequestStatusID")
                Me.columnDescription = MyBase.Columns("Description")
                Me.columnDisplayOrder = MyBase.Columns("DisplayOrder")
                Me.columnIsClientMenuItem = MyBase.Columns("IsClientMenuItem")
                Me.columnIsReasonRequired = MyBase.Columns("IsReasonRequired")
                Me.columnIsNewStatus = MyBase.Columns("IsNewStatus")
                Me.columnIsInProgressStatus = MyBase.Columns("IsInProgressStatus")
                Me.columnIsCompleteStatus = MyBase.Columns("IsCompleteStatus")
                Me.columnIsCancelledStatus = MyBase.Columns("IsCancelledStatus")
                Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
                Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
                Me.columnColour = MyBase.Columns("Colour")
                Me.columnBackColour = MyBase.Columns("BackColour")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnRequestStatusID = New Global.System.Data.DataColumn("RequestStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRequestStatusID)
                Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescription)
                Me.columnDisplayOrder = New Global.System.Data.DataColumn("DisplayOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDisplayOrder)
                Me.columnIsClientMenuItem = New Global.System.Data.DataColumn("IsClientMenuItem", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsClientMenuItem)
                Me.columnIsReasonRequired = New Global.System.Data.DataColumn("IsReasonRequired", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsReasonRequired)
                Me.columnIsNewStatus = New Global.System.Data.DataColumn("IsNewStatus", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsNewStatus)
                Me.columnIsInProgressStatus = New Global.System.Data.DataColumn("IsInProgressStatus", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsInProgressStatus)
                Me.columnIsCompleteStatus = New Global.System.Data.DataColumn("IsCompleteStatus", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsCompleteStatus)
                Me.columnIsCancelledStatus = New Global.System.Data.DataColumn("IsCancelledStatus", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsCancelledStatus)
                Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedDateTime)
                Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedDateTime)
                Me.columnColour = New Global.System.Data.DataColumn("Colour", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnColour)
                Me.columnBackColour = New Global.System.Data.DataColumn("BackColour", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnBackColour)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_RequestStatus", New Global.System.Data.DataColumn() {Me.columnRequestStatusID}, true))
                Me.columnRequestStatusID.AllowDBNull = false
                Me.columnRequestStatusID.Unique = true
                Me.columnRequestStatusID.Caption = "ID"
                Me.columnDescription.AllowDBNull = false
                Me.columnDescription.MaxLength = 50
                Me.columnIsClientMenuItem.AllowDBNull = false
                Me.columnIsReasonRequired.AllowDBNull = false
                Me.columnIsNewStatus.AllowDBNull = false
                Me.columnIsInProgressStatus.AllowDBNull = false
                Me.columnIsCompleteStatus.AllowDBNull = false
                Me.columnIsCancelledStatus.AllowDBNull = false
                Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnColour.AllowDBNull = false
                Me.columnColour.DefaultValue = CType(0,Integer)
                Me.columnBackColour.AllowDBNull = false
                Me.columnBackColour.DefaultValue = CType(-1,Integer)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewRequestStatusRow() As RequestStatusRow
                Return CType(Me.NewRow,RequestStatusRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New RequestStatusRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(RequestStatusRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.RequestStatusRowChangedEvent) Is Nothing) Then
                    RaiseEvent RequestStatusRowChanged(Me, New RequestStatusRowChangeEvent(CType(e.Row,RequestStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.RequestStatusRowChangingEvent) Is Nothing) Then
                    RaiseEvent RequestStatusRowChanging(Me, New RequestStatusRowChangeEvent(CType(e.Row,RequestStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.RequestStatusRowDeletedEvent) Is Nothing) Then
                    RaiseEvent RequestStatusRowDeleted(Me, New RequestStatusRowChangeEvent(CType(e.Row,RequestStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.RequestStatusRowDeletingEvent) Is Nothing) Then
                    RaiseEvent RequestStatusRowDeleting(Me, New RequestStatusRowChangeEvent(CType(e.Row,RequestStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveRequestStatusRow(ByVal row As RequestStatusRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As activiserDataSet = New activiserDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "RequestStatusDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class RequestDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnRequestUID As Global.System.Data.DataColumn
            
            Private columnRequestID As Global.System.Data.DataColumn
            
            Private columnRequestNumber As Global.System.Data.DataColumn
            
            Private columnConsultantRID As Global.System.Data.DataColumn
            
            Private columnConsultantStatusID As Global.System.Data.DataColumn
            
            Private columnClientSiteUID As Global.System.Data.DataColumn
            
            Private columnAssignedToUID As Global.System.Data.DataColumn
            
            Private columnRequestStatusID As Global.System.Data.DataColumn
            
            Private columnNextActionDate As Global.System.Data.DataColumn
            
            Private columnCompletedDate As Global.System.Data.DataColumn
            
            Private columnContact As Global.System.Data.DataColumn
            
            Private columnShortDescription As Global.System.Data.DataColumn
            
            Private columnLongDescription As Global.System.Data.DataColumn
            
            Private columnCreatedDateTime As Global.System.Data.DataColumn
            
            Private columnModifiedDateTime As Global.System.Data.DataColumn
            
            Private columnClientSiteName As Global.System.Data.DataColumn
            
            Private columnJobs As Global.System.Data.DataColumn
            
            Private columnAssignedToName As Global.System.Data.DataColumn
            
            Private columnRequestStatusDescription As Global.System.Data.DataColumn
            
            Private columnRequestStatusOrder As Global.System.Data.DataColumn
            
            Private columnConsultantStatusDescription As Global.System.Data.DataColumn
            
            Private columnConsultantStatusOrder As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                Me.New(false)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal initExpressions As Boolean)
                MyBase.New
                Me.TableName = "Request"
                Me.BeginInit
                Me.InitClass
                If (initExpressions = true) Then
                    Me.InitExpressions
                End If
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RequestUIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRequestUID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RequestIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRequestID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RequestNumberColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRequestNumber
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantRIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantRID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantStatusIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantStatusID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientSiteUIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientSiteUID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property AssignedToUIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAssignedToUID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RequestStatusIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRequestStatusID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NextActionDateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNextActionDate
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CompletedDateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCompletedDate
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ContactColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnContact
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ShortDescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnShortDescription
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LongDescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLongDescription
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientSiteNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientSiteName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property JobsColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnJobs
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property AssignedToNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAssignedToName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RequestStatusDescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRequestStatusDescription
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RequestStatusOrderColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRequestStatusOrder
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantStatusDescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantStatusDescription
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantStatusOrderColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantStatusOrder
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As RequestRow
                Get
                    Return CType(Me.Rows(index),RequestRow)
                End Get
            End Property
            
            Public Event RequestRowChanging As RequestRowChangeEventHandler
            
            Public Event RequestRowChanged As RequestRowChangeEventHandler
            
            Public Event RequestRowDeleting As RequestRowChangeEventHandler
            
            Public Event RequestRowDeleted As RequestRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddRequestRow(ByVal row As RequestRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddRequestRow( _
                        ByVal RequestUID As System.Guid,  _
                        ByVal RequestNumber As String,  _
                        ByVal parentRequestStatusRowByFK_Request_ConsultantStatus As RequestStatusRow,  _
                        ByVal parentClientSiteRowByFK_Request_ClientSite As ClientSiteRow,  _
                        ByVal parentConsultantRowByFK_Request_Consultant As ConsultantRow,  _
                        ByVal parentRequestStatusRowByFK_Request_RequestStatus As RequestStatusRow,  _
                        ByVal NextActionDate As Date,  _
                        ByVal CompletedDate As Date,  _
                        ByVal Contact As String,  _
                        ByVal ShortDescription As String,  _
                        ByVal LongDescription As String,  _
                        ByVal CreatedDateTime As Date,  _
                        ByVal ModifiedDateTime As Date,  _
                        ByVal ClientSiteName As String,  _
                        ByVal Jobs As Integer,  _
                        ByVal AssignedToName As String,  _
                        ByVal RequestStatusDescription As String,  _
                        ByVal RequestStatusOrder As Integer,  _
                        ByVal ConsultantStatusDescription As String,  _
                        ByVal ConsultantStatusOrder As Integer) As RequestRow
                Dim rowRequestRow As RequestRow = CType(Me.NewRow,RequestRow)
                Dim columnValuesArray() As Object = New Object() {RequestUID, Nothing, RequestNumber, Nothing, Nothing, Nothing, Nothing, Nothing, NextActionDate, CompletedDate, Contact, ShortDescription, LongDescription, CreatedDateTime, ModifiedDateTime, ClientSiteName, Jobs, AssignedToName, RequestStatusDescription, RequestStatusOrder, ConsultantStatusDescription, ConsultantStatusOrder}
                If (Not (parentRequestStatusRowByFK_Request_ConsultantStatus) Is Nothing) Then
                    columnValuesArray(4) = parentRequestStatusRowByFK_Request_ConsultantStatus(0)
                End If
                If (Not (parentClientSiteRowByFK_Request_ClientSite) Is Nothing) Then
                    columnValuesArray(5) = parentClientSiteRowByFK_Request_ClientSite(0)
                End If
                If (Not (parentConsultantRowByFK_Request_Consultant) Is Nothing) Then
                    columnValuesArray(6) = parentConsultantRowByFK_Request_Consultant(5)
                End If
                If (Not (parentRequestStatusRowByFK_Request_RequestStatus) Is Nothing) Then
                    columnValuesArray(7) = parentRequestStatusRowByFK_Request_RequestStatus(0)
                End If
                rowRequestRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowRequestRow)
                Return rowRequestRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddRequestRow(ByVal RequestUID As System.Guid, ByVal RequestNumber As String, ByVal parentRequestStatusRowByFK_Request_ConsultantStatus As RequestStatusRow, ByVal parentClientSiteRowByFK_Request_ClientSite As ClientSiteRow, ByVal parentConsultantRowByFK_Request_Consultant As ConsultantRow, ByVal parentRequestStatusRowByFK_Request_RequestStatus As RequestStatusRow, ByVal NextActionDate As Date, ByVal CompletedDate As Date, ByVal Contact As String, ByVal ShortDescription As String, ByVal LongDescription As String, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date) As RequestRow
                Dim rowRequestRow As RequestRow = CType(Me.NewRow,RequestRow)
                Dim columnValuesArray() As Object = New Object() {RequestUID, Nothing, RequestNumber, Nothing, Nothing, Nothing, Nothing, Nothing, NextActionDate, CompletedDate, Contact, ShortDescription, LongDescription, CreatedDateTime, ModifiedDateTime, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing, Nothing}
                If (Not (parentRequestStatusRowByFK_Request_ConsultantStatus) Is Nothing) Then
                    columnValuesArray(4) = parentRequestStatusRowByFK_Request_ConsultantStatus(0)
                End If
                If (Not (parentClientSiteRowByFK_Request_ClientSite) Is Nothing) Then
                    columnValuesArray(5) = parentClientSiteRowByFK_Request_ClientSite(0)
                End If
                If (Not (parentConsultantRowByFK_Request_Consultant) Is Nothing) Then
                    columnValuesArray(6) = parentConsultantRowByFK_Request_Consultant(5)
                End If
                If (Not (parentRequestStatusRowByFK_Request_RequestStatus) Is Nothing) Then
                    columnValuesArray(7) = parentRequestStatusRowByFK_Request_RequestStatus(0)
                End If
                rowRequestRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowRequestRow)
                Return rowRequestRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByRequestUID(ByVal RequestUID As System.Guid) As RequestRow
                Return CType(Me.Rows.Find(New Object() {RequestUID}),RequestRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As RequestDataTable = CType(MyBase.Clone,RequestDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New RequestDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnRequestUID = MyBase.Columns("RequestUID")
                Me.columnRequestID = MyBase.Columns("RequestID")
                Me.columnRequestNumber = MyBase.Columns("RequestNumber")
                Me.columnConsultantRID = MyBase.Columns("ConsultantRID")
                Me.columnConsultantStatusID = MyBase.Columns("ConsultantStatusID")
                Me.columnClientSiteUID = MyBase.Columns("ClientSiteUID")
                Me.columnAssignedToUID = MyBase.Columns("AssignedToUID")
                Me.columnRequestStatusID = MyBase.Columns("RequestStatusID")
                Me.columnNextActionDate = MyBase.Columns("NextActionDate")
                Me.columnCompletedDate = MyBase.Columns("CompletedDate")
                Me.columnContact = MyBase.Columns("Contact")
                Me.columnShortDescription = MyBase.Columns("ShortDescription")
                Me.columnLongDescription = MyBase.Columns("LongDescription")
                Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
                Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
                Me.columnClientSiteName = MyBase.Columns("ClientSiteName")
                Me.columnJobs = MyBase.Columns("Jobs")
                Me.columnAssignedToName = MyBase.Columns("AssignedToName")
                Me.columnRequestStatusDescription = MyBase.Columns("RequestStatusDescription")
                Me.columnRequestStatusOrder = MyBase.Columns("RequestStatusOrder")
                Me.columnConsultantStatusDescription = MyBase.Columns("ConsultantStatusDescription")
                Me.columnConsultantStatusOrder = MyBase.Columns("ConsultantStatusOrder")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnRequestUID = New Global.System.Data.DataColumn("RequestUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRequestUID)
                Me.columnRequestID = New Global.System.Data.DataColumn("RequestID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRequestID)
                Me.columnRequestNumber = New Global.System.Data.DataColumn("RequestNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRequestNumber)
                Me.columnConsultantRID = New Global.System.Data.DataColumn("ConsultantRID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantRID)
                Me.columnConsultantStatusID = New Global.System.Data.DataColumn("ConsultantStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantStatusID)
                Me.columnClientSiteUID = New Global.System.Data.DataColumn("ClientSiteUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientSiteUID)
                Me.columnAssignedToUID = New Global.System.Data.DataColumn("AssignedToUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAssignedToUID)
                Me.columnRequestStatusID = New Global.System.Data.DataColumn("RequestStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRequestStatusID)
                Me.columnNextActionDate = New Global.System.Data.DataColumn("NextActionDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNextActionDate)
                Me.columnCompletedDate = New Global.System.Data.DataColumn("CompletedDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCompletedDate)
                Me.columnContact = New Global.System.Data.DataColumn("Contact", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnContact)
                Me.columnShortDescription = New Global.System.Data.DataColumn("ShortDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnShortDescription)
                Me.columnLongDescription = New Global.System.Data.DataColumn("LongDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLongDescription)
                Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedDateTime)
                Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedDateTime)
                Me.columnClientSiteName = New Global.System.Data.DataColumn("ClientSiteName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientSiteName)
                Me.columnJobs = New Global.System.Data.DataColumn("Jobs", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnJobs)
                Me.columnAssignedToName = New Global.System.Data.DataColumn("AssignedToName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAssignedToName)
                Me.columnRequestStatusDescription = New Global.System.Data.DataColumn("RequestStatusDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRequestStatusDescription)
                Me.columnRequestStatusOrder = New Global.System.Data.DataColumn("RequestStatusOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRequestStatusOrder)
                Me.columnConsultantStatusDescription = New Global.System.Data.DataColumn("ConsultantStatusDescription", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantStatusDescription)
                Me.columnConsultantStatusOrder = New Global.System.Data.DataColumn("ConsultantStatusOrder", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantStatusOrder)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_Request", New Global.System.Data.DataColumn() {Me.columnRequestUID}, true))
                Me.columnRequestUID.AllowDBNull = false
                Me.columnRequestUID.Unique = true
                Me.columnRequestUID.Caption = "UID"
                Me.columnRequestID.AutoIncrement = true
                Me.columnRequestID.AutoIncrementSeed = -1
                Me.columnRequestID.AutoIncrementStep = -1
                Me.columnRequestID.Caption = "ID"
                Me.columnRequestNumber.MaxLength = 100
                Me.columnConsultantRID.AutoIncrement = true
                Me.columnConsultantRID.AutoIncrementSeed = -1
                Me.columnConsultantRID.AutoIncrementStep = -1
                Me.columnNextActionDate.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnCompletedDate.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnContact.MaxLength = 100
                Me.columnShortDescription.MaxLength = 200
                Me.columnLongDescription.MaxLength = 3500
                Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnClientSiteName.ReadOnly = true
                Me.columnJobs.ReadOnly = true
                Me.columnAssignedToName.ReadOnly = true
                Me.columnRequestStatusDescription.ReadOnly = true
                Me.columnRequestStatusOrder.ReadOnly = true
                Me.columnConsultantStatusDescription.ReadOnly = true
                Me.columnConsultantStatusOrder.ReadOnly = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewRequestRow() As RequestRow
                Return CType(Me.NewRow,RequestRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New RequestRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(RequestRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitExpressions()
                Me.ClientSiteNameColumn.Expression = "Parent(FK_Request_ClientSite).SiteName"
                Me.JobsColumn.Expression = "COUNT(CHILD(FK_Job_Request).JobStatusID)"
                Me.AssignedToNameColumn.Expression = "Parent(FK_Request_Consultant).Name"
                Me.RequestStatusDescriptionColumn.Expression = "Parent(FK_Request_RequestStatus).Description"
                Me.RequestStatusOrderColumn.Expression = "Parent(FK_Request_RequestStatus).DisplayOrder"
                Me.ConsultantStatusDescriptionColumn.Expression = "ISNULL(Parent(FK_Request_ConsultantStatus).Description,Parent(FK_Request_RequestS"& _ 
                    "tatus).Description)"
                Me.ConsultantStatusOrderColumn.Expression = "ISNULL(Parent(FK_Request_ConsultantStatus).DisplayOrder, Parent(FK_Request_Reques"& _ 
                    "tStatus).DisplayOrder)"
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.RequestRowChangedEvent) Is Nothing) Then
                    RaiseEvent RequestRowChanged(Me, New RequestRowChangeEvent(CType(e.Row,RequestRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.RequestRowChangingEvent) Is Nothing) Then
                    RaiseEvent RequestRowChanging(Me, New RequestRowChangeEvent(CType(e.Row,RequestRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.RequestRowDeletedEvent) Is Nothing) Then
                    RaiseEvent RequestRowDeleted(Me, New RequestRowChangeEvent(CType(e.Row,RequestRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.RequestRowDeletingEvent) Is Nothing) Then
                    RaiseEvent RequestRowDeleting(Me, New RequestRowChangeEvent(CType(e.Row,RequestRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveRequestRow(ByVal row As RequestRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As activiserDataSet = New activiserDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "RequestDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class JobStatusDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnJobStatusID As Global.System.Data.DataColumn
            
            Private columnDescription As Global.System.Data.DataColumn
            
            Private columnCreatedDateTime As Global.System.Data.DataColumn
            
            Private columnModifiedDateTime As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "JobStatus"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property JobStatusIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnJobStatusID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As JobStatusRow
                Get
                    Return CType(Me.Rows(index),JobStatusRow)
                End Get
            End Property
            
            Public Event JobStatusRowChanging As JobStatusRowChangeEventHandler
            
            Public Event JobStatusRowChanged As JobStatusRowChangeEventHandler
            
            Public Event JobStatusRowDeleting As JobStatusRowChangeEventHandler
            
            Public Event JobStatusRowDeleted As JobStatusRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddJobStatusRow(ByVal row As JobStatusRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddJobStatusRow(ByVal JobStatusID As Integer, ByVal Description As String, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date) As JobStatusRow
                Dim rowJobStatusRow As JobStatusRow = CType(Me.NewRow,JobStatusRow)
                Dim columnValuesArray() As Object = New Object() {JobStatusID, Description, CreatedDateTime, ModifiedDateTime}
                rowJobStatusRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowJobStatusRow)
                Return rowJobStatusRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByJobStatusID(ByVal JobStatusID As Integer) As JobStatusRow
                Return CType(Me.Rows.Find(New Object() {JobStatusID}),JobStatusRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As JobStatusDataTable = CType(MyBase.Clone,JobStatusDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New JobStatusDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnJobStatusID = MyBase.Columns("JobStatusID")
                Me.columnDescription = MyBase.Columns("Description")
                Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
                Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnJobStatusID = New Global.System.Data.DataColumn("JobStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnJobStatusID)
                Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescription)
                Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedDateTime)
                Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedDateTime)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_JobStatus", New Global.System.Data.DataColumn() {Me.columnJobStatusID}, true))
                Me.columnJobStatusID.AllowDBNull = false
                Me.columnJobStatusID.Unique = true
                Me.columnDescription.AllowDBNull = false
                Me.columnDescription.MaxLength = 50
                Me.columnCreatedDateTime.AllowDBNull = false
                Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnModifiedDateTime.AllowDBNull = false
                Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewJobStatusRow() As JobStatusRow
                Return CType(Me.NewRow,JobStatusRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New JobStatusRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(JobStatusRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.JobStatusRowChangedEvent) Is Nothing) Then
                    RaiseEvent JobStatusRowChanged(Me, New JobStatusRowChangeEvent(CType(e.Row,JobStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.JobStatusRowChangingEvent) Is Nothing) Then
                    RaiseEvent JobStatusRowChanging(Me, New JobStatusRowChangeEvent(CType(e.Row,JobStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.JobStatusRowDeletedEvent) Is Nothing) Then
                    RaiseEvent JobStatusRowDeleted(Me, New JobStatusRowChangeEvent(CType(e.Row,JobStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.JobStatusRowDeletingEvent) Is Nothing) Then
                    RaiseEvent JobStatusRowDeleting(Me, New JobStatusRowChangeEvent(CType(e.Row,JobStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveJobStatusRow(ByVal row As JobStatusRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As activiserDataSet = New activiserDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "JobStatusDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class JobDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnJobUID As Global.System.Data.DataColumn
            
            Private columnJobID As Global.System.Data.DataColumn
            
            Private columnJobNumber As Global.System.Data.DataColumn
            
            Private columnConsultantJobID As Global.System.Data.DataColumn
            
            Private columnConsultantUID As Global.System.Data.DataColumn
            
            Private columnClientSiteUID As Global.System.Data.DataColumn
            
            Private columnRequestUID As Global.System.Data.DataColumn
            
            Private columnJobDate As Global.System.Data.DataColumn
            
            Private columnStartTime As Global.System.Data.DataColumn
            
            Private columnFinishTime As Global.System.Data.DataColumn
            
            Private columnJobDetails As Global.System.Data.DataColumn
            
            Private columnJobNotes As Global.System.Data.DataColumn
            
            Private columnEquipment As Global.System.Data.DataColumn
            
            Private columnJobStatusID As Global.System.Data.DataColumn
            
            Private columnReturnDate As Global.System.Data.DataColumn
            
            Private columnSignatory As Global.System.Data.DataColumn
            
            Private columnSignature As Global.System.Data.DataColumn
            
            Private columnEmail As Global.System.Data.DataColumn
            
            Private columnEmailStatus As Global.System.Data.DataColumn
            
            Private columnMinutesTravelled As Global.System.Data.DataColumn
            
            Private columnCreatedDateTime As Global.System.Data.DataColumn
            
            Private columnModifiedDateTime As Global.System.Data.DataColumn
            
            Private columnFlag As Global.System.Data.DataColumn
            
            Private columnConsultantName As Global.System.Data.DataColumn
            
            Private columnRequestNumber As Global.System.Data.DataColumn
            
            Private columnClientSiteName As Global.System.Data.DataColumn
            
            Private columnTrackingTimeStamp As Global.System.Data.DataColumn
            
            Private columnTrackingInfo As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                Me.New(false)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal initExpressions As Boolean)
                MyBase.New
                Me.TableName = "Job"
                Me.BeginInit
                Me.InitClass
                If (initExpressions = true) Then
                    Me.InitExpressions
                End If
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property JobUIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnJobUID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property JobIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnJobID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property JobNumberColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnJobNumber
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantJobIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantJobID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantUIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantUID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientSiteUIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientSiteUID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RequestUIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRequestUID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property JobDateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnJobDate
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property StartTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnStartTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FinishTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFinishTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property JobDetailsColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnJobDetails
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property JobNotesColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnJobNotes
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EquipmentColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEquipment
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property JobStatusIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnJobStatusID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ReturnDateColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnReturnDate
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SignatoryColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSignatory
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SignatureColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSignature
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EmailColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEmail
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EmailStatusColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEmailStatus
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property MinutesTravelledColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMinutesTravelled
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FlagColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFlag
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RequestNumberColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRequestNumber
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientSiteNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientSiteName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TrackingTimeStampColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTrackingTimeStamp
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TrackingInfoColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTrackingInfo
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As JobRow
                Get
                    Return CType(Me.Rows(index),JobRow)
                End Get
            End Property
            
            Public Event JobRowChanging As JobRowChangeEventHandler
            
            Public Event JobRowChanged As JobRowChangeEventHandler
            
            Public Event JobRowDeleting As JobRowChangeEventHandler
            
            Public Event JobRowDeleted As JobRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddJobRow(ByVal row As JobRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddJobRow( _
                        ByVal JobUID As System.Guid,  _
                        ByVal JobNumber As String,  _
                        ByVal parentConsultantRowByFK_Job_Consultant As ConsultantRow,  _
                        ByVal parentClientSiteRowByFK_Job_ClientSite As ClientSiteRow,  _
                        ByVal parentRequestRowByFK_Job_Request As RequestRow,  _
                        ByVal JobDate As Date,  _
                        ByVal StartTime As Date,  _
                        ByVal FinishTime As Date,  _
                        ByVal JobDetails As String,  _
                        ByVal JobNotes As String,  _
                        ByVal Equipment As String,  _
                        ByVal parentJobStatusRowByFK_JobStatus_Job As JobStatusRow,  _
                        ByVal ReturnDate As Date,  _
                        ByVal Signatory As String,  _
                        ByVal Signature As String,  _
                        ByVal Email As String,  _
                        ByVal EmailStatus As Byte,  _
                        ByVal MinutesTravelled As Integer,  _
                        ByVal CreatedDateTime As Date,  _
                        ByVal ModifiedDateTime As Date,  _
                        ByVal Flag As Integer,  _
                        ByVal ConsultantName As String,  _
                        ByVal RequestNumber As String,  _
                        ByVal ClientSiteName As String,  _
                        ByVal TrackingTimeStamp As Date,  _
                        ByVal TrackingInfo As String) As JobRow
                Dim rowJobRow As JobRow = CType(Me.NewRow,JobRow)
                Dim columnValuesArray() As Object = New Object() {JobUID, Nothing, JobNumber, Nothing, Nothing, Nothing, Nothing, JobDate, StartTime, FinishTime, JobDetails, JobNotes, Equipment, Nothing, ReturnDate, Signatory, Signature, Email, EmailStatus, MinutesTravelled, CreatedDateTime, ModifiedDateTime, Flag, ConsultantName, RequestNumber, ClientSiteName, TrackingTimeStamp, TrackingInfo}
                If (Not (parentConsultantRowByFK_Job_Consultant) Is Nothing) Then
                    columnValuesArray(4) = parentConsultantRowByFK_Job_Consultant(5)
                End If
                If (Not (parentClientSiteRowByFK_Job_ClientSite) Is Nothing) Then
                    columnValuesArray(5) = parentClientSiteRowByFK_Job_ClientSite(0)
                End If
                If (Not (parentRequestRowByFK_Job_Request) Is Nothing) Then
                    columnValuesArray(6) = parentRequestRowByFK_Job_Request(0)
                End If
                If (Not (parentJobStatusRowByFK_JobStatus_Job) Is Nothing) Then
                    columnValuesArray(13) = parentJobStatusRowByFK_JobStatus_Job(0)
                End If
                rowJobRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowJobRow)
                Return rowJobRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddJobRow( _
                        ByVal JobUID As System.Guid,  _
                        ByVal JobNumber As String,  _
                        ByVal parentConsultantRowByFK_Job_Consultant As ConsultantRow,  _
                        ByVal parentClientSiteRowByFK_Job_ClientSite As ClientSiteRow,  _
                        ByVal parentRequestRowByFK_Job_Request As RequestRow,  _
                        ByVal JobDate As Date,  _
                        ByVal StartTime As Date,  _
                        ByVal FinishTime As Date,  _
                        ByVal JobDetails As String,  _
                        ByVal JobNotes As String,  _
                        ByVal Equipment As String,  _
                        ByVal parentJobStatusRowByFK_JobStatus_Job As JobStatusRow,  _
                        ByVal ReturnDate As Date,  _
                        ByVal Signatory As String,  _
                        ByVal Signature As String,  _
                        ByVal Email As String,  _
                        ByVal EmailStatus As Byte,  _
                        ByVal MinutesTravelled As Integer,  _
                        ByVal CreatedDateTime As Date,  _
                        ByVal ModifiedDateTime As Date,  _
                        ByVal Flag As Integer,  _
                        ByVal TrackingTimeStamp As Date,  _
                        ByVal TrackingInfo As String) As JobRow
                Dim rowJobRow As JobRow = CType(Me.NewRow,JobRow)
                Dim columnValuesArray() As Object = New Object() {JobUID, Nothing, JobNumber, Nothing, Nothing, Nothing, Nothing, JobDate, StartTime, FinishTime, JobDetails, JobNotes, Equipment, Nothing, ReturnDate, Signatory, Signature, Email, EmailStatus, MinutesTravelled, CreatedDateTime, ModifiedDateTime, Flag, Nothing, Nothing, Nothing, TrackingTimeStamp, TrackingInfo}
                If (Not (parentConsultantRowByFK_Job_Consultant) Is Nothing) Then
                    columnValuesArray(4) = parentConsultantRowByFK_Job_Consultant(5)
                End If
                If (Not (parentClientSiteRowByFK_Job_ClientSite) Is Nothing) Then
                    columnValuesArray(5) = parentClientSiteRowByFK_Job_ClientSite(0)
                End If
                If (Not (parentRequestRowByFK_Job_Request) Is Nothing) Then
                    columnValuesArray(6) = parentRequestRowByFK_Job_Request(0)
                End If
                If (Not (parentJobStatusRowByFK_JobStatus_Job) Is Nothing) Then
                    columnValuesArray(13) = parentJobStatusRowByFK_JobStatus_Job(0)
                End If
                rowJobRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowJobRow)
                Return rowJobRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByJobUID(ByVal JobUID As System.Guid) As JobRow
                Return CType(Me.Rows.Find(New Object() {JobUID}),JobRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As JobDataTable = CType(MyBase.Clone,JobDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New JobDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnJobUID = MyBase.Columns("JobUID")
                Me.columnJobID = MyBase.Columns("JobID")
                Me.columnJobNumber = MyBase.Columns("JobNumber")
                Me.columnConsultantJobID = MyBase.Columns("ConsultantJobID")
                Me.columnConsultantUID = MyBase.Columns("ConsultantUID")
                Me.columnClientSiteUID = MyBase.Columns("ClientSiteUID")
                Me.columnRequestUID = MyBase.Columns("RequestUID")
                Me.columnJobDate = MyBase.Columns("JobDate")
                Me.columnStartTime = MyBase.Columns("StartTime")
                Me.columnFinishTime = MyBase.Columns("FinishTime")
                Me.columnJobDetails = MyBase.Columns("JobDetails")
                Me.columnJobNotes = MyBase.Columns("JobNotes")
                Me.columnEquipment = MyBase.Columns("Equipment")
                Me.columnJobStatusID = MyBase.Columns("JobStatusID")
                Me.columnReturnDate = MyBase.Columns("ReturnDate")
                Me.columnSignatory = MyBase.Columns("Signatory")
                Me.columnSignature = MyBase.Columns("Signature")
                Me.columnEmail = MyBase.Columns("Email")
                Me.columnEmailStatus = MyBase.Columns("EmailStatus")
                Me.columnMinutesTravelled = MyBase.Columns("MinutesTravelled")
                Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
                Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
                Me.columnFlag = MyBase.Columns("Flag")
                Me.columnConsultantName = MyBase.Columns("ConsultantName")
                Me.columnRequestNumber = MyBase.Columns("RequestNumber")
                Me.columnClientSiteName = MyBase.Columns("ClientSiteName")
                Me.columnTrackingTimeStamp = MyBase.Columns("TrackingTimeStamp")
                Me.columnTrackingInfo = MyBase.Columns("TrackingInfo")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnJobUID = New Global.System.Data.DataColumn("JobUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnJobUID)
                Me.columnJobID = New Global.System.Data.DataColumn("JobID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnJobID)
                Me.columnJobNumber = New Global.System.Data.DataColumn("JobNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnJobNumber)
                Me.columnConsultantJobID = New Global.System.Data.DataColumn("ConsultantJobID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantJobID)
                Me.columnConsultantUID = New Global.System.Data.DataColumn("ConsultantUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantUID)
                Me.columnClientSiteUID = New Global.System.Data.DataColumn("ClientSiteUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientSiteUID)
                Me.columnRequestUID = New Global.System.Data.DataColumn("RequestUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRequestUID)
                Me.columnJobDate = New Global.System.Data.DataColumn("JobDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnJobDate)
                Me.columnStartTime = New Global.System.Data.DataColumn("StartTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStartTime)
                Me.columnFinishTime = New Global.System.Data.DataColumn("FinishTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFinishTime)
                Me.columnJobDetails = New Global.System.Data.DataColumn("JobDetails", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnJobDetails)
                Me.columnJobNotes = New Global.System.Data.DataColumn("JobNotes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnJobNotes)
                Me.columnEquipment = New Global.System.Data.DataColumn("Equipment", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEquipment)
                Me.columnJobStatusID = New Global.System.Data.DataColumn("JobStatusID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnJobStatusID)
                Me.columnReturnDate = New Global.System.Data.DataColumn("ReturnDate", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnReturnDate)
                Me.columnSignatory = New Global.System.Data.DataColumn("Signatory", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSignatory)
                Me.columnSignature = New Global.System.Data.DataColumn("Signature", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSignature)
                Me.columnEmail = New Global.System.Data.DataColumn("Email", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEmail)
                Me.columnEmailStatus = New Global.System.Data.DataColumn("EmailStatus", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEmailStatus)
                Me.columnMinutesTravelled = New Global.System.Data.DataColumn("MinutesTravelled", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMinutesTravelled)
                Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedDateTime)
                Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedDateTime)
                Me.columnFlag = New Global.System.Data.DataColumn("Flag", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFlag)
                Me.columnConsultantName = New Global.System.Data.DataColumn("ConsultantName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantName)
                Me.columnRequestNumber = New Global.System.Data.DataColumn("RequestNumber", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRequestNumber)
                Me.columnClientSiteName = New Global.System.Data.DataColumn("ClientSiteName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientSiteName)
                Me.columnTrackingTimeStamp = New Global.System.Data.DataColumn("TrackingTimeStamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTrackingTimeStamp)
                Me.columnTrackingInfo = New Global.System.Data.DataColumn("TrackingInfo", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTrackingInfo)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("PK_Job", New Global.System.Data.DataColumn() {Me.columnJobUID}, true))
                Me.columnJobUID.AllowDBNull = false
                Me.columnJobUID.Unique = true
                Me.columnJobID.AutoIncrement = true
                Me.columnJobID.AutoIncrementSeed = -1
                Me.columnJobID.AutoIncrementStep = -1
                Me.columnJobNumber.MaxLength = 100
                Me.columnConsultantJobID.AutoIncrement = true
                Me.columnConsultantJobID.AutoIncrementSeed = -1
                Me.columnConsultantJobID.AutoIncrementStep = -1
                Me.columnJobDate.DateTimeMode = Global.System.Data.DataSetDateTime.Local
                Me.columnStartTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnFinishTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnJobDetails.MaxLength = 3500
                Me.columnJobNotes.MaxLength = 1073741823
                Me.columnEquipment.MaxLength = 1073741823
                Me.columnJobStatusID.DefaultValue = CType(0,Integer)
                Me.columnReturnDate.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnSignatory.MaxLength = 50
                Me.columnSignature.MaxLength = 2147483647
                Me.columnEmail.MaxLength = 100
                Me.columnEmailStatus.DefaultValue = CType(0,Byte)
                Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnFlag.DefaultValue = CType(0,Integer)
                Me.columnConsultantName.ReadOnly = true
                Me.columnRequestNumber.ReadOnly = true
                Me.columnClientSiteName.ReadOnly = true
                Me.columnTrackingTimeStamp.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnTrackingInfo.DefaultValue = CType("",String)
                Me.columnTrackingInfo.MaxLength = 128
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewJobRow() As JobRow
                Return CType(Me.NewRow,JobRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New JobRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(JobRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitExpressions()
                Me.ConsultantNameColumn.Expression = "Parent(FK_Job_Consultant).Name"
                Me.RequestNumberColumn.Expression = "Parent(FK_Job_Request).RequestNumber"
                Me.ClientSiteNameColumn.Expression = "Parent(FK_Job_ClientSite).SiteName"
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.JobRowChangedEvent) Is Nothing) Then
                    RaiseEvent JobRowChanged(Me, New JobRowChangeEvent(CType(e.Row,JobRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.JobRowChangingEvent) Is Nothing) Then
                    RaiseEvent JobRowChanging(Me, New JobRowChangeEvent(CType(e.Row,JobRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.JobRowDeletedEvent) Is Nothing) Then
                    RaiseEvent JobRowDeleted(Me, New JobRowChangeEvent(CType(e.Row,JobRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.JobRowDeletingEvent) Is Nothing) Then
                    RaiseEvent JobRowDeleting(Me, New JobRowChangeEvent(CType(e.Row,JobRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveJobRow(ByVal row As JobRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As activiserDataSet = New activiserDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "JobDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ConsultantRow
            Inherits Global.System.Data.DataRow
            
            Private tableConsultant As ConsultantDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableConsultant = CType(Me.Table,ConsultantDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantNumber() As String
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.ConsultantNumberColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantNumber' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.ConsultantNumberColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Name() As String
                Get
                    Return CType(Me(Me.tableConsultant.NameColumn),String)
                End Get
                Set
                    Me(Me.tableConsultant.NameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Username() As String
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.UsernameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Username' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.UsernameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EmailAddress() As String
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.EmailAddressColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'EmailAddress' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.EmailAddressColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property MobilePhone() As String
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.MobilePhoneColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'MobilePhone' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.MobilePhoneColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantUID() As System.Guid
                Get
                    Return CType(Me(Me.tableConsultant.ConsultantUIDColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableConsultant.ConsultantUIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.ConsultantIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantID' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.ConsultantIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.CreatedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDateTime' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.CreatedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.ModifiedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDateTime' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.ModifiedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property MinSyncTime() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.MinSyncTimeColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'MinSyncTime' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.MinSyncTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property LastSyncTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.LastSyncTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LastSyncTime' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.LastSyncTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property SyncTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.SyncTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SyncTime' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.SyncTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property MobileAlert() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.MobileAlertColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'MobileAlert' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.MobileAlertColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property IsActiviserUser() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.IsActiviserUserColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'IsActiviserUser' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.IsActiviserUserColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Management() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.ManagementColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Management' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.ManagementColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Administration() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.AdministrationColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Administration' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.AdministrationColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property DomainLogon() As String
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.DomainLogonColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DomainLogon' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.DomainLogonColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TrackingTimestamp() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.TrackingTimestampColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'TrackingTimestamp' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.TrackingTimestampColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TrackingInfo() As String
                Get
                    Try 
                        Return CType(Me(Me.tableConsultant.TrackingInfoColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'TrackingInfo' in table 'Consultant' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultant.TrackingInfoColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsConsultantNumberNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.ConsultantNumberColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetConsultantNumberNull()
                Me(Me.tableConsultant.ConsultantNumberColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsUsernameNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.UsernameColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetUsernameNull()
                Me(Me.tableConsultant.UsernameColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsEmailAddressNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.EmailAddressColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetEmailAddressNull()
                Me(Me.tableConsultant.EmailAddressColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsMobilePhoneNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.MobilePhoneColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetMobilePhoneNull()
                Me(Me.tableConsultant.MobilePhoneColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsConsultantIDNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.ConsultantIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetConsultantIDNull()
                Me(Me.tableConsultant.ConsultantIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.CreatedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedDateTimeNull()
                Me(Me.tableConsultant.CreatedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.ModifiedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedDateTimeNull()
                Me(Me.tableConsultant.ModifiedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsMinSyncTimeNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.MinSyncTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetMinSyncTimeNull()
                Me(Me.tableConsultant.MinSyncTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsLastSyncTimeNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.LastSyncTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetLastSyncTimeNull()
                Me(Me.tableConsultant.LastSyncTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsSyncTimeNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.SyncTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetSyncTimeNull()
                Me(Me.tableConsultant.SyncTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsMobileAlertNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.MobileAlertColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetMobileAlertNull()
                Me(Me.tableConsultant.MobileAlertColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsIsActiviserUserNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.IsActiviserUserColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetIsActiviserUserNull()
                Me(Me.tableConsultant.IsActiviserUserColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsManagementNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.ManagementColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetManagementNull()
                Me(Me.tableConsultant.ManagementColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsAdministrationNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.AdministrationColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetAdministrationNull()
                Me(Me.tableConsultant.AdministrationColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDomainLogonNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.DomainLogonColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDomainLogonNull()
                Me(Me.tableConsultant.DomainLogonColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTrackingTimestampNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.TrackingTimestampColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTrackingTimestampNull()
                Me(Me.tableConsultant.TrackingTimestampColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTrackingInfoNull() As Boolean
                Return Me.IsNull(Me.tableConsultant.TrackingInfoColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTrackingInfoNull()
                Me(Me.tableConsultant.TrackingInfoColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function GetJobRows() As JobRow()
                If (Me.Table.ChildRelations("FK_Job_Consultant") Is Nothing) Then
                    Return New JobRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Job_Consultant")),JobRow())
                End If
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function GetRequestRows() As RequestRow()
                If (Me.Table.ChildRelations("FK_Request_Consultant") Is Nothing) Then
                    Return New RequestRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Request_Consultant")),RequestRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ClientSiteStatusRow
            Inherits Global.System.Data.DataRow
            
            Private tableClientSiteStatus As ClientSiteStatusDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableClientSiteStatus = CType(Me.Table,ClientSiteStatusDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientSiteStatusID() As Integer
                Get
                    Return CType(Me(Me.tableClientSiteStatus.ClientSiteStatusIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableClientSiteStatus.ClientSiteStatusIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Description() As String
                Get
                    Return CType(Me(Me.tableClientSiteStatus.DescriptionColumn),String)
                End Get
                Set
                    Me(Me.tableClientSiteStatus.DescriptionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property IsActive() As Boolean
                Get
                    Return CType(Me(Me.tableClientSiteStatus.IsActiveColumn),Boolean)
                End Get
                Set
                    Me(Me.tableClientSiteStatus.IsActiveColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableClientSiteStatus.CreatedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDateTime' in table 'ClientSiteStatus' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSiteStatus.CreatedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableClientSiteStatus.ModifiedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDateTime' in table 'ClientSiteStatus' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSiteStatus.ModifiedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableClientSiteStatus.CreatedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedDateTimeNull()
                Me(Me.tableClientSiteStatus.CreatedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableClientSiteStatus.ModifiedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedDateTimeNull()
                Me(Me.tableClientSiteStatus.ModifiedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function GetClientSiteRows() As ClientSiteRow()
                If (Me.Table.ChildRelations("FK_ClientSite_ClientSiteStatus") Is Nothing) Then
                    Return New ClientSiteRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_ClientSite_ClientSiteStatus")),ClientSiteRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ClientSiteRow
            Inherits Global.System.Data.DataRow
            
            Private tableClientSite As ClientSiteDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableClientSite = CType(Me.Table,ClientSiteDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientSiteUID() As System.Guid
                Get
                    Return CType(Me(Me.tableClientSite.ClientSiteUIDColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableClientSite.ClientSiteUIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientSiteID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableClientSite.ClientSiteIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ClientSiteID' in table 'ClientSite' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSite.ClientSiteIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientSiteNumber() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClientSite.ClientSiteNumberColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ClientSiteNumber' in table 'ClientSite' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSite.ClientSiteNumberColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property SiteName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClientSite.SiteNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SiteName' in table 'ClientSite' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSite.SiteNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property SiteAddress() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClientSite.SiteAddressColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SiteAddress' in table 'ClientSite' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSite.SiteAddressColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property SiteContactEmail() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClientSite.SiteContactEmailColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SiteContactEmail' in table 'ClientSite' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSite.SiteContactEmailColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property SiteNotes() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClientSite.SiteNotesColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SiteNotes' in table 'ClientSite' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSite.SiteNotesColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Contact() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClientSite.ContactColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Contact' in table 'ClientSite' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSite.ContactColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ContactPhone1() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClientSite.ContactPhone1Column),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ContactPhone1' in table 'ClientSite' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSite.ContactPhone1Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ContactPhone2() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClientSite.ContactPhone2Column),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ContactPhone2' in table 'ClientSite' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSite.ContactPhone2Column) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Hold() As Boolean
                Get
                    Try 
                        Return CType(Me(Me.tableClientSite.HoldColumn),Boolean)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Hold' in table 'ClientSite' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSite.HoldColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientSiteStatusID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableClientSite.ClientSiteStatusIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ClientSiteStatusID' in table 'ClientSite' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSite.ClientSiteStatusIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableClientSite.CreatedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDateTime' in table 'ClientSite' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSite.CreatedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableClientSite.ModifiedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDateTime' in table 'ClientSite' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSite.ModifiedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientSiteStatusRow() As ClientSiteStatusRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_ClientSite_ClientSiteStatus")),ClientSiteStatusRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_ClientSite_ClientSiteStatus"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsClientSiteIDNull() As Boolean
                Return Me.IsNull(Me.tableClientSite.ClientSiteIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetClientSiteIDNull()
                Me(Me.tableClientSite.ClientSiteIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsClientSiteNumberNull() As Boolean
                Return Me.IsNull(Me.tableClientSite.ClientSiteNumberColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetClientSiteNumberNull()
                Me(Me.tableClientSite.ClientSiteNumberColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsSiteNameNull() As Boolean
                Return Me.IsNull(Me.tableClientSite.SiteNameColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetSiteNameNull()
                Me(Me.tableClientSite.SiteNameColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsSiteAddressNull() As Boolean
                Return Me.IsNull(Me.tableClientSite.SiteAddressColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetSiteAddressNull()
                Me(Me.tableClientSite.SiteAddressColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsSiteContactEmailNull() As Boolean
                Return Me.IsNull(Me.tableClientSite.SiteContactEmailColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetSiteContactEmailNull()
                Me(Me.tableClientSite.SiteContactEmailColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsSiteNotesNull() As Boolean
                Return Me.IsNull(Me.tableClientSite.SiteNotesColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetSiteNotesNull()
                Me(Me.tableClientSite.SiteNotesColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsContactNull() As Boolean
                Return Me.IsNull(Me.tableClientSite.ContactColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetContactNull()
                Me(Me.tableClientSite.ContactColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsContactPhone1Null() As Boolean
                Return Me.IsNull(Me.tableClientSite.ContactPhone1Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetContactPhone1Null()
                Me(Me.tableClientSite.ContactPhone1Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsContactPhone2Null() As Boolean
                Return Me.IsNull(Me.tableClientSite.ContactPhone2Column)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetContactPhone2Null()
                Me(Me.tableClientSite.ContactPhone2Column) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsHoldNull() As Boolean
                Return Me.IsNull(Me.tableClientSite.HoldColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetHoldNull()
                Me(Me.tableClientSite.HoldColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsClientSiteStatusIDNull() As Boolean
                Return Me.IsNull(Me.tableClientSite.ClientSiteStatusIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetClientSiteStatusIDNull()
                Me(Me.tableClientSite.ClientSiteStatusIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableClientSite.CreatedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedDateTimeNull()
                Me(Me.tableClientSite.CreatedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableClientSite.ModifiedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedDateTimeNull()
                Me(Me.tableClientSite.ModifiedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function GetJobRows() As JobRow()
                If (Me.Table.ChildRelations("FK_Job_ClientSite") Is Nothing) Then
                    Return New JobRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Job_ClientSite")),JobRow())
                End If
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function GetRequestRows() As RequestRow()
                If (Me.Table.ChildRelations("FK_Request_ClientSite") Is Nothing) Then
                    Return New RequestRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Request_ClientSite")),RequestRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class RequestStatusRow
            Inherits Global.System.Data.DataRow
            
            Private tableRequestStatus As RequestStatusDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableRequestStatus = CType(Me.Table,RequestStatusDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property RequestStatusID() As Integer
                Get
                    Return CType(Me(Me.tableRequestStatus.RequestStatusIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableRequestStatus.RequestStatusIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Description() As String
                Get
                    Return CType(Me(Me.tableRequestStatus.DescriptionColumn),String)
                End Get
                Set
                    Me(Me.tableRequestStatus.DescriptionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property DisplayOrder() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableRequestStatus.DisplayOrderColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DisplayOrder' in table 'RequestStatus' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequestStatus.DisplayOrderColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property IsClientMenuItem() As Boolean
                Get
                    Return CType(Me(Me.tableRequestStatus.IsClientMenuItemColumn),Boolean)
                End Get
                Set
                    Me(Me.tableRequestStatus.IsClientMenuItemColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property IsReasonRequired() As Boolean
                Get
                    Return CType(Me(Me.tableRequestStatus.IsReasonRequiredColumn),Boolean)
                End Get
                Set
                    Me(Me.tableRequestStatus.IsReasonRequiredColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property IsNewStatus() As Boolean
                Get
                    Return CType(Me(Me.tableRequestStatus.IsNewStatusColumn),Boolean)
                End Get
                Set
                    Me(Me.tableRequestStatus.IsNewStatusColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property IsInProgressStatus() As Boolean
                Get
                    Return CType(Me(Me.tableRequestStatus.IsInProgressStatusColumn),Boolean)
                End Get
                Set
                    Me(Me.tableRequestStatus.IsInProgressStatusColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property IsCompleteStatus() As Boolean
                Get
                    Return CType(Me(Me.tableRequestStatus.IsCompleteStatusColumn),Boolean)
                End Get
                Set
                    Me(Me.tableRequestStatus.IsCompleteStatusColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property IsCancelledStatus() As Boolean
                Get
                    Return CType(Me(Me.tableRequestStatus.IsCancelledStatusColumn),Boolean)
                End Get
                Set
                    Me(Me.tableRequestStatus.IsCancelledStatusColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableRequestStatus.CreatedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDateTime' in table 'RequestStatus' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequestStatus.CreatedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableRequestStatus.ModifiedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDateTime' in table 'RequestStatus' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequestStatus.ModifiedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Colour() As Integer
                Get
                    Return CType(Me(Me.tableRequestStatus.ColourColumn),Integer)
                End Get
                Set
                    Me(Me.tableRequestStatus.ColourColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property BackColour() As Integer
                Get
                    Return CType(Me(Me.tableRequestStatus.BackColourColumn),Integer)
                End Get
                Set
                    Me(Me.tableRequestStatus.BackColourColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDisplayOrderNull() As Boolean
                Return Me.IsNull(Me.tableRequestStatus.DisplayOrderColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDisplayOrderNull()
                Me(Me.tableRequestStatus.DisplayOrderColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableRequestStatus.CreatedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedDateTimeNull()
                Me(Me.tableRequestStatus.CreatedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableRequestStatus.ModifiedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedDateTimeNull()
                Me(Me.tableRequestStatus.ModifiedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function GetRequestRowsByFK_Request_ConsultantStatus() As RequestRow()
                If (Me.Table.ChildRelations("FK_Request_ConsultantStatus") Is Nothing) Then
                    Return New RequestRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Request_ConsultantStatus")),RequestRow())
                End If
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function GetRequestRowsByFK_Request_RequestStatus() As RequestRow()
                If (Me.Table.ChildRelations("FK_Request_RequestStatus") Is Nothing) Then
                    Return New RequestRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Request_RequestStatus")),RequestRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class RequestRow
            Inherits Global.System.Data.DataRow
            
            Private tableRequest As RequestDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableRequest = CType(Me.Table,RequestDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property RequestUID() As System.Guid
                Get
                    Return CType(Me(Me.tableRequest.RequestUIDColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableRequest.RequestUIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property RequestID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.RequestIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RequestID' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.RequestIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property RequestNumber() As String
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.RequestNumberColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RequestNumber' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.RequestNumberColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantRID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.ConsultantRIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantRID' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.ConsultantRIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantStatusID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.ConsultantStatusIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantStatusID' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.ConsultantStatusIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientSiteUID() As System.Guid
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.ClientSiteUIDColumn),Global.System.Guid)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ClientSiteUID' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.ClientSiteUIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property AssignedToUID() As System.Guid
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.AssignedToUIDColumn),Global.System.Guid)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'AssignedToUID' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.AssignedToUIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property RequestStatusID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.RequestStatusIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RequestStatusID' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.RequestStatusIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property NextActionDate() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.NextActionDateColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'NextActionDate' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.NextActionDateColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CompletedDate() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.CompletedDateColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CompletedDate' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.CompletedDateColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Contact() As String
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.ContactColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Contact' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.ContactColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ShortDescription() As String
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.ShortDescriptionColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ShortDescription' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.ShortDescriptionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property LongDescription() As String
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.LongDescriptionColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LongDescription' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.LongDescriptionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.CreatedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDateTime' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.CreatedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.ModifiedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDateTime' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.ModifiedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientSiteName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.ClientSiteNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ClientSiteName' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.ClientSiteNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Jobs() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.JobsColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Jobs' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.JobsColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property AssignedToName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.AssignedToNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'AssignedToName' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.AssignedToNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property RequestStatusDescription() As String
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.RequestStatusDescriptionColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RequestStatusDescription' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.RequestStatusDescriptionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property RequestStatusOrder() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.RequestStatusOrderColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RequestStatusOrder' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.RequestStatusOrderColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantStatusDescription() As String
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.ConsultantStatusDescriptionColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantStatusDescription' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.ConsultantStatusDescriptionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantStatusOrder() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableRequest.ConsultantStatusOrderColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantStatusOrder' in table 'Request' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableRequest.ConsultantStatusOrderColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientSiteRow() As ClientSiteRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Request_ClientSite")),ClientSiteRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_Request_ClientSite"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantRow() As ConsultantRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Request_Consultant")),ConsultantRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_Request_Consultant"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property RequestStatusRowByFK_Request_ConsultantStatus() As RequestStatusRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Request_ConsultantStatus")),RequestStatusRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_Request_ConsultantStatus"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property RequestStatusRowByFK_Request_RequestStatus() As RequestStatusRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Request_RequestStatus")),RequestStatusRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_Request_RequestStatus"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRequestIDNull() As Boolean
                Return Me.IsNull(Me.tableRequest.RequestIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRequestIDNull()
                Me(Me.tableRequest.RequestIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRequestNumberNull() As Boolean
                Return Me.IsNull(Me.tableRequest.RequestNumberColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRequestNumberNull()
                Me(Me.tableRequest.RequestNumberColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsConsultantRIDNull() As Boolean
                Return Me.IsNull(Me.tableRequest.ConsultantRIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetConsultantRIDNull()
                Me(Me.tableRequest.ConsultantRIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsConsultantStatusIDNull() As Boolean
                Return Me.IsNull(Me.tableRequest.ConsultantStatusIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetConsultantStatusIDNull()
                Me(Me.tableRequest.ConsultantStatusIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsClientSiteUIDNull() As Boolean
                Return Me.IsNull(Me.tableRequest.ClientSiteUIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetClientSiteUIDNull()
                Me(Me.tableRequest.ClientSiteUIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsAssignedToUIDNull() As Boolean
                Return Me.IsNull(Me.tableRequest.AssignedToUIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetAssignedToUIDNull()
                Me(Me.tableRequest.AssignedToUIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRequestStatusIDNull() As Boolean
                Return Me.IsNull(Me.tableRequest.RequestStatusIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRequestStatusIDNull()
                Me(Me.tableRequest.RequestStatusIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNextActionDateNull() As Boolean
                Return Me.IsNull(Me.tableRequest.NextActionDateColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNextActionDateNull()
                Me(Me.tableRequest.NextActionDateColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCompletedDateNull() As Boolean
                Return Me.IsNull(Me.tableRequest.CompletedDateColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCompletedDateNull()
                Me(Me.tableRequest.CompletedDateColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsContactNull() As Boolean
                Return Me.IsNull(Me.tableRequest.ContactColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetContactNull()
                Me(Me.tableRequest.ContactColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsShortDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableRequest.ShortDescriptionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetShortDescriptionNull()
                Me(Me.tableRequest.ShortDescriptionColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsLongDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableRequest.LongDescriptionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetLongDescriptionNull()
                Me(Me.tableRequest.LongDescriptionColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableRequest.CreatedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedDateTimeNull()
                Me(Me.tableRequest.CreatedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableRequest.ModifiedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedDateTimeNull()
                Me(Me.tableRequest.ModifiedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsClientSiteNameNull() As Boolean
                Return Me.IsNull(Me.tableRequest.ClientSiteNameColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetClientSiteNameNull()
                Me(Me.tableRequest.ClientSiteNameColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsJobsNull() As Boolean
                Return Me.IsNull(Me.tableRequest.JobsColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetJobsNull()
                Me(Me.tableRequest.JobsColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsAssignedToNameNull() As Boolean
                Return Me.IsNull(Me.tableRequest.AssignedToNameColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetAssignedToNameNull()
                Me(Me.tableRequest.AssignedToNameColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRequestStatusDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableRequest.RequestStatusDescriptionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRequestStatusDescriptionNull()
                Me(Me.tableRequest.RequestStatusDescriptionColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRequestStatusOrderNull() As Boolean
                Return Me.IsNull(Me.tableRequest.RequestStatusOrderColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRequestStatusOrderNull()
                Me(Me.tableRequest.RequestStatusOrderColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsConsultantStatusDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableRequest.ConsultantStatusDescriptionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetConsultantStatusDescriptionNull()
                Me(Me.tableRequest.ConsultantStatusDescriptionColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsConsultantStatusOrderNull() As Boolean
                Return Me.IsNull(Me.tableRequest.ConsultantStatusOrderColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetConsultantStatusOrderNull()
                Me(Me.tableRequest.ConsultantStatusOrderColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function GetJobRows() As JobRow()
                If (Me.Table.ChildRelations("FK_Job_Request") Is Nothing) Then
                    Return New JobRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_Job_Request")),JobRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class JobStatusRow
            Inherits Global.System.Data.DataRow
            
            Private tableJobStatus As JobStatusDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableJobStatus = CType(Me.Table,JobStatusDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property JobStatusID() As Integer
                Get
                    Return CType(Me(Me.tableJobStatus.JobStatusIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableJobStatus.JobStatusIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Description() As String
                Get
                    Return CType(Me(Me.tableJobStatus.DescriptionColumn),String)
                End Get
                Set
                    Me(Me.tableJobStatus.DescriptionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedDateTime() As Date
                Get
                    Return CType(Me(Me.tableJobStatus.CreatedDateTimeColumn),Date)
                End Get
                Set
                    Me(Me.tableJobStatus.CreatedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedDateTime() As Date
                Get
                    Return CType(Me(Me.tableJobStatus.ModifiedDateTimeColumn),Date)
                End Get
                Set
                    Me(Me.tableJobStatus.ModifiedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function GetJobRows() As JobRow()
                If (Me.Table.ChildRelations("FK_JobStatus_Job") Is Nothing) Then
                    Return New JobRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_JobStatus_Job")),JobRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class JobRow
            Inherits Global.System.Data.DataRow
            
            Private tableJob As JobDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableJob = CType(Me.Table,JobDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property JobUID() As System.Guid
                Get
                    Return CType(Me(Me.tableJob.JobUIDColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableJob.JobUIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property JobID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJob.JobIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'JobID' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.JobIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property JobNumber() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJob.JobNumberColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'JobNumber' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.JobNumberColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantJobID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJob.ConsultantJobIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantJobID' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.ConsultantJobIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantUID() As System.Guid
                Get
                    Try 
                        Return CType(Me(Me.tableJob.ConsultantUIDColumn),Global.System.Guid)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantUID' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.ConsultantUIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientSiteUID() As System.Guid
                Get
                    Try 
                        Return CType(Me(Me.tableJob.ClientSiteUIDColumn),Global.System.Guid)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ClientSiteUID' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.ClientSiteUIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property RequestUID() As System.Guid
                Get
                    Try 
                        Return CType(Me(Me.tableJob.RequestUIDColumn),Global.System.Guid)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RequestUID' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.RequestUIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property JobDate() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableJob.JobDateColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'JobDate' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.JobDateColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property StartTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableJob.StartTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'StartTime' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.StartTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FinishTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableJob.FinishTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FinishTime' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.FinishTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property JobDetails() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJob.JobDetailsColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'JobDetails' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.JobDetailsColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property JobNotes() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJob.JobNotesColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'JobNotes' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.JobNotesColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Equipment() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJob.EquipmentColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Equipment' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.EquipmentColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property JobStatusID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJob.JobStatusIDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'JobStatusID' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.JobStatusIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ReturnDate() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableJob.ReturnDateColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ReturnDate' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.ReturnDateColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Signatory() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJob.SignatoryColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Signatory' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.SignatoryColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Signature() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJob.SignatureColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Signature' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.SignatureColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Email() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJob.EmailColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Email' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.EmailColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EmailStatus() As Byte
                Get
                    Try 
                        Return CType(Me(Me.tableJob.EmailStatusColumn),Byte)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'EmailStatus' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.EmailStatusColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property MinutesTravelled() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJob.MinutesTravelledColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'MinutesTravelled' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.MinutesTravelledColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableJob.CreatedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDateTime' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.CreatedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableJob.ModifiedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDateTime' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.ModifiedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Flag() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableJob.FlagColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Flag' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.FlagColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJob.ConsultantNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ConsultantName' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.ConsultantNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property RequestNumber() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJob.RequestNumberColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RequestNumber' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.RequestNumberColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientSiteName() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJob.ClientSiteNameColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ClientSiteName' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.ClientSiteNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TrackingTimeStamp() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableJob.TrackingTimeStampColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'TrackingTimeStamp' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.TrackingTimeStampColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TrackingInfo() As String
                Get
                    Try 
                        Return CType(Me(Me.tableJob.TrackingInfoColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'TrackingInfo' in table 'Job' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableJob.TrackingInfoColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantRow() As ConsultantRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Job_Consultant")),ConsultantRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_Job_Consultant"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientSiteRow() As ClientSiteRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Job_ClientSite")),ClientSiteRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_Job_ClientSite"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property RequestRow() As RequestRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_Job_Request")),RequestRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_Job_Request"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property JobStatusRow() As JobStatusRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_JobStatus_Job")),JobStatusRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_JobStatus_Job"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsJobIDNull() As Boolean
                Return Me.IsNull(Me.tableJob.JobIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetJobIDNull()
                Me(Me.tableJob.JobIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsJobNumberNull() As Boolean
                Return Me.IsNull(Me.tableJob.JobNumberColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetJobNumberNull()
                Me(Me.tableJob.JobNumberColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsConsultantJobIDNull() As Boolean
                Return Me.IsNull(Me.tableJob.ConsultantJobIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetConsultantJobIDNull()
                Me(Me.tableJob.ConsultantJobIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsConsultantUIDNull() As Boolean
                Return Me.IsNull(Me.tableJob.ConsultantUIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetConsultantUIDNull()
                Me(Me.tableJob.ConsultantUIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsClientSiteUIDNull() As Boolean
                Return Me.IsNull(Me.tableJob.ClientSiteUIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetClientSiteUIDNull()
                Me(Me.tableJob.ClientSiteUIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRequestUIDNull() As Boolean
                Return Me.IsNull(Me.tableJob.RequestUIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRequestUIDNull()
                Me(Me.tableJob.RequestUIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsJobDateNull() As Boolean
                Return Me.IsNull(Me.tableJob.JobDateColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetJobDateNull()
                Me(Me.tableJob.JobDateColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsStartTimeNull() As Boolean
                Return Me.IsNull(Me.tableJob.StartTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetStartTimeNull()
                Me(Me.tableJob.StartTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFinishTimeNull() As Boolean
                Return Me.IsNull(Me.tableJob.FinishTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFinishTimeNull()
                Me(Me.tableJob.FinishTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsJobDetailsNull() As Boolean
                Return Me.IsNull(Me.tableJob.JobDetailsColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetJobDetailsNull()
                Me(Me.tableJob.JobDetailsColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsJobNotesNull() As Boolean
                Return Me.IsNull(Me.tableJob.JobNotesColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetJobNotesNull()
                Me(Me.tableJob.JobNotesColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsEquipmentNull() As Boolean
                Return Me.IsNull(Me.tableJob.EquipmentColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetEquipmentNull()
                Me(Me.tableJob.EquipmentColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsJobStatusIDNull() As Boolean
                Return Me.IsNull(Me.tableJob.JobStatusIDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetJobStatusIDNull()
                Me(Me.tableJob.JobStatusIDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsReturnDateNull() As Boolean
                Return Me.IsNull(Me.tableJob.ReturnDateColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetReturnDateNull()
                Me(Me.tableJob.ReturnDateColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsSignatoryNull() As Boolean
                Return Me.IsNull(Me.tableJob.SignatoryColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetSignatoryNull()
                Me(Me.tableJob.SignatoryColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsSignatureNull() As Boolean
                Return Me.IsNull(Me.tableJob.SignatureColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetSignatureNull()
                Me(Me.tableJob.SignatureColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsEmailNull() As Boolean
                Return Me.IsNull(Me.tableJob.EmailColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetEmailNull()
                Me(Me.tableJob.EmailColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsEmailStatusNull() As Boolean
                Return Me.IsNull(Me.tableJob.EmailStatusColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetEmailStatusNull()
                Me(Me.tableJob.EmailStatusColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsMinutesTravelledNull() As Boolean
                Return Me.IsNull(Me.tableJob.MinutesTravelledColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetMinutesTravelledNull()
                Me(Me.tableJob.MinutesTravelledColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableJob.CreatedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedDateTimeNull()
                Me(Me.tableJob.CreatedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableJob.ModifiedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedDateTimeNull()
                Me(Me.tableJob.ModifiedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFlagNull() As Boolean
                Return Me.IsNull(Me.tableJob.FlagColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFlagNull()
                Me(Me.tableJob.FlagColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsConsultantNameNull() As Boolean
                Return Me.IsNull(Me.tableJob.ConsultantNameColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetConsultantNameNull()
                Me(Me.tableJob.ConsultantNameColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRequestNumberNull() As Boolean
                Return Me.IsNull(Me.tableJob.RequestNumberColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRequestNumberNull()
                Me(Me.tableJob.RequestNumberColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsClientSiteNameNull() As Boolean
                Return Me.IsNull(Me.tableJob.ClientSiteNameColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetClientSiteNameNull()
                Me(Me.tableJob.ClientSiteNameColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTrackingTimeStampNull() As Boolean
                Return Me.IsNull(Me.tableJob.TrackingTimeStampColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTrackingTimeStampNull()
                Me(Me.tableJob.TrackingTimeStampColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTrackingInfoNull() As Boolean
                Return Me.IsNull(Me.tableJob.TrackingInfoColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTrackingInfoNull()
                Me(Me.tableJob.TrackingInfoColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class ConsultantRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ConsultantRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As ConsultantRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As ConsultantRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class ClientSiteStatusRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ClientSiteStatusRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As ClientSiteStatusRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As ClientSiteStatusRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class ClientSiteRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ClientSiteRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As ClientSiteRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As ClientSiteRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class RequestStatusRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As RequestStatusRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As RequestStatusRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As RequestStatusRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class RequestRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As RequestRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As RequestRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As RequestRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class JobStatusRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As JobStatusRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As JobStatusRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As JobStatusRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class JobRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As JobRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As JobRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As JobRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("LanguageDataSet")>  _
    Partial Public Class LanguageDataSet
        Inherits Global.System.Data.DataSet
        
        Private tableStringValue As StringValueDataTable
        
        Private tableLanguage As LanguageDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property StringValue() As StringValueDataTable
            Get
                Return Me.tableStringValue
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Language() As LanguageDataTable
            Get
                Return Me.tableLanguage
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As LanguageDataSet = CType(MyBase.Clone,LanguageDataSet)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("StringValue")) Is Nothing) Then
                    MyBase.Tables.Add(New StringValueDataTable(ds.Tables("StringValue")))
                End If
                If (Not (ds.Tables("Language")) Is Nothing) Then
                    MyBase.Tables.Add(New LanguageDataTable(ds.Tables("Language")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableStringValue = CType(MyBase.Tables("StringValue"),StringValueDataTable)
            If (initTable = true) Then
                If (Not (Me.tableStringValue) Is Nothing) Then
                    Me.tableStringValue.InitVars
                End If
            End If
            Me.tableLanguage = CType(MyBase.Tables("Language"),LanguageDataTable)
            If (initTable = true) Then
                If (Not (Me.tableLanguage) Is Nothing) Then
                    Me.tableLanguage.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "LanguageDataSet"
            Me.Prefix = ""
            Me.Namespace = "http://www.activiser.com/schemas/Language.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableStringValue = New StringValueDataTable
            MyBase.Tables.Add(Me.tableStringValue)
            Me.tableLanguage = New LanguageDataTable
            MyBase.Tables.Add(Me.tableLanguage)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeStringValue() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeLanguage() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As LanguageDataSet = New LanguageDataSet
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        Public Delegate Sub StringValueRowChangeEventHandler(ByVal sender As Object, ByVal e As StringValueRowChangeEvent)
        
        Public Delegate Sub LanguageRowChangeEventHandler(ByVal sender As Object, ByVal e As LanguageRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class StringValueDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnCustomStringID As Global.System.Data.DataColumn
            
            Private columnClientKey As Global.System.Data.DataColumn
            
            Private columnLanguageId As Global.System.Data.DataColumn
            
            Private columnModuleName As Global.System.Data.DataColumn
            
            Private columnStringName As Global.System.Data.DataColumn
            
            Private columnValue As Global.System.Data.DataColumn
            
            Private columnCreatedDateTime As Global.System.Data.DataColumn
            
            Private columnModifiedDateTime As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "StringValue"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property StringIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCustomStringID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientKeyColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientKey
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LanguageIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLanguageId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModuleNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModuleName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property StringNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnStringName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ValueColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnValue
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As StringValueRow
                Get
                    Return CType(Me.Rows(index),StringValueRow)
                End Get
            End Property
            
            Public Event StringValueRowChanging As StringValueRowChangeEventHandler
            
            Public Event StringValueRowChanged As StringValueRowChangeEventHandler
            
            Public Event StringValueRowDeleting As StringValueRowChangeEventHandler
            
            Public Event StringValueRowDeleted As StringValueRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddStringValueRow(ByVal row As StringValueRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddStringValueRow(ByVal ClientKey As Integer, ByVal LanguageId As Integer, ByVal ModuleName As String, ByVal StringName As String, ByVal Value As String, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date) As StringValueRow
                Dim rowStringValueRow As StringValueRow = CType(Me.NewRow,StringValueRow)
                Dim columnValuesArray() As Object = New Object() {Nothing, ClientKey, LanguageId, ModuleName, StringName, Value, CreatedDateTime, ModifiedDateTime}
                rowStringValueRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowStringValueRow)
                Return rowStringValueRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByStringID(ByVal StringID As Integer) As StringValueRow
                Return CType(Me.Rows.Find(New Object() {StringID}),StringValueRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As StringValueDataTable = CType(MyBase.Clone,StringValueDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New StringValueDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnCustomStringID = MyBase.Columns("StringID")
                Me.columnClientKey = MyBase.Columns("ClientKey")
                Me.columnLanguageId = MyBase.Columns("LanguageId")
                Me.columnModuleName = MyBase.Columns("ModuleName")
                Me.columnStringName = MyBase.Columns("StringName")
                Me.columnValue = MyBase.Columns("Value")
                Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
                Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnCustomStringID = New Global.System.Data.DataColumn("StringID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                Me.columnCustomStringID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCustomStringID")
                Me.columnCustomStringID.ExtendedProperties.Add("Generator_UserColumnName", "StringID")
                MyBase.Columns.Add(Me.columnCustomStringID)
                Me.columnClientKey = New Global.System.Data.DataColumn("ClientKey", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientKey)
                Me.columnLanguageId = New Global.System.Data.DataColumn("LanguageId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLanguageId)
                Me.columnModuleName = New Global.System.Data.DataColumn("ModuleName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModuleName)
                Me.columnStringName = New Global.System.Data.DataColumn("StringName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStringName)
                Me.columnValue = New Global.System.Data.DataColumn("Value", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnValue)
                Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedDateTime)
                Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedDateTime)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnCustomStringID}, true))
                Me.columnCustomStringID.AutoIncrement = true
                Me.columnCustomStringID.AllowDBNull = false
                Me.columnCustomStringID.ReadOnly = true
                Me.columnCustomStringID.Unique = true
                Me.columnClientKey.AllowDBNull = false
                Me.columnClientKey.DefaultValue = CType(1,Integer)
                Me.columnLanguageId.AllowDBNull = false
                Me.columnLanguageId.DefaultValue = CType(1,Integer)
                Me.columnModuleName.AllowDBNull = false
                Me.columnModuleName.MaxLength = 50
                Me.columnStringName.AllowDBNull = false
                Me.columnStringName.MaxLength = 50
                Me.columnValue.MaxLength = 2000
                Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewStringValueRow() As StringValueRow
                Return CType(Me.NewRow,StringValueRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New StringValueRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(StringValueRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.StringValueRowChangedEvent) Is Nothing) Then
                    RaiseEvent StringValueRowChanged(Me, New StringValueRowChangeEvent(CType(e.Row,StringValueRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.StringValueRowChangingEvent) Is Nothing) Then
                    RaiseEvent StringValueRowChanging(Me, New StringValueRowChangeEvent(CType(e.Row,StringValueRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.StringValueRowDeletedEvent) Is Nothing) Then
                    RaiseEvent StringValueRowDeleted(Me, New StringValueRowChangeEvent(CType(e.Row,StringValueRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.StringValueRowDeletingEvent) Is Nothing) Then
                    RaiseEvent StringValueRowDeleting(Me, New StringValueRowChangeEvent(CType(e.Row,StringValueRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveStringValueRow(ByVal row As StringValueRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As LanguageDataSet = New LanguageDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "StringValueDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class LanguageDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnLanguageId As Global.System.Data.DataColumn
            
            Private columnName As Global.System.Data.DataColumn
            
            Private columnDescription As Global.System.Data.DataColumn
            
            Private columnCreatedDateTime As Global.System.Data.DataColumn
            
            Private columnModifiedDateTime As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Language"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LanguageIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLanguageId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As LanguageRow
                Get
                    Return CType(Me.Rows(index),LanguageRow)
                End Get
            End Property
            
            Public Event LanguageRowChanging As LanguageRowChangeEventHandler
            
            Public Event LanguageRowChanged As LanguageRowChangeEventHandler
            
            Public Event LanguageRowDeleting As LanguageRowChangeEventHandler
            
            Public Event LanguageRowDeleted As LanguageRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddLanguageRow(ByVal row As LanguageRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddLanguageRow(ByVal LanguageId As Integer, ByVal Name As String, ByVal Description As String, ByVal CreatedDateTime As Date, ByVal ModifiedDateTime As Date) As LanguageRow
                Dim rowLanguageRow As LanguageRow = CType(Me.NewRow,LanguageRow)
                Dim columnValuesArray() As Object = New Object() {LanguageId, Name, Description, CreatedDateTime, ModifiedDateTime}
                rowLanguageRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowLanguageRow)
                Return rowLanguageRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByLanguageId(ByVal LanguageId As Integer) As LanguageRow
                Return CType(Me.Rows.Find(New Object() {LanguageId}),LanguageRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As LanguageDataTable = CType(MyBase.Clone,LanguageDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New LanguageDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnLanguageId = MyBase.Columns("LanguageId")
                Me.columnName = MyBase.Columns("Name")
                Me.columnDescription = MyBase.Columns("Description")
                Me.columnCreatedDateTime = MyBase.Columns("CreatedDateTime")
                Me.columnModifiedDateTime = MyBase.Columns("ModifiedDateTime")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnLanguageId = New Global.System.Data.DataColumn("LanguageId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLanguageId)
                Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnName)
                Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescription)
                Me.columnCreatedDateTime = New Global.System.Data.DataColumn("CreatedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedDateTime)
                Me.columnModifiedDateTime = New Global.System.Data.DataColumn("ModifiedDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedDateTime)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnLanguageId}, true))
                Me.columnLanguageId.AllowDBNull = false
                Me.columnLanguageId.Unique = true
                Me.columnName.AllowDBNull = false
                Me.columnName.MaxLength = 50
                Me.columnDescription.MaxLength = 250
                Me.columnCreatedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
                Me.columnModifiedDateTime.DateTimeMode = Global.System.Data.DataSetDateTime.Utc
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewLanguageRow() As LanguageRow
                Return CType(Me.NewRow,LanguageRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New LanguageRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(LanguageRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.LanguageRowChangedEvent) Is Nothing) Then
                    RaiseEvent LanguageRowChanged(Me, New LanguageRowChangeEvent(CType(e.Row,LanguageRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.LanguageRowChangingEvent) Is Nothing) Then
                    RaiseEvent LanguageRowChanging(Me, New LanguageRowChangeEvent(CType(e.Row,LanguageRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.LanguageRowDeletedEvent) Is Nothing) Then
                    RaiseEvent LanguageRowDeleted(Me, New LanguageRowChangeEvent(CType(e.Row,LanguageRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.LanguageRowDeletingEvent) Is Nothing) Then
                    RaiseEvent LanguageRowDeleting(Me, New LanguageRowChangeEvent(CType(e.Row,LanguageRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveLanguageRow(ByVal row As LanguageRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As LanguageDataSet = New LanguageDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "LanguageDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class StringValueRow
            Inherits Global.System.Data.DataRow
            
            Private tableStringValue As StringValueDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableStringValue = CType(Me.Table,StringValueDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property StringID() As Integer
                Get
                    Return CType(Me(Me.tableStringValue.StringIDColumn),Integer)
                End Get
                Set
                    Me(Me.tableStringValue.StringIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientKey() As Integer
                Get
                    Return CType(Me(Me.tableStringValue.ClientKeyColumn),Integer)
                End Get
                Set
                    Me(Me.tableStringValue.ClientKeyColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property LanguageId() As Integer
                Get
                    Return CType(Me(Me.tableStringValue.LanguageIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableStringValue.LanguageIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModuleName() As String
                Get
                    Return CType(Me(Me.tableStringValue.ModuleNameColumn),String)
                End Get
                Set
                    Me(Me.tableStringValue.ModuleNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property StringName() As String
                Get
                    Return CType(Me(Me.tableStringValue.StringNameColumn),String)
                End Get
                Set
                    Me(Me.tableStringValue.StringNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Value() As String
                Get
                    Try 
                        Return CType(Me(Me.tableStringValue.ValueColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Value' in table 'StringValue' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableStringValue.ValueColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableStringValue.CreatedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDateTime' in table 'StringValue' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableStringValue.CreatedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableStringValue.ModifiedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDateTime' in table 'StringValue' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableStringValue.ModifiedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsValueNull() As Boolean
                Return Me.IsNull(Me.tableStringValue.ValueColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetValueNull()
                Me(Me.tableStringValue.ValueColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableStringValue.CreatedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedDateTimeNull()
                Me(Me.tableStringValue.CreatedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableStringValue.ModifiedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedDateTimeNull()
                Me(Me.tableStringValue.ModifiedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class LanguageRow
            Inherits Global.System.Data.DataRow
            
            Private tableLanguage As LanguageDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableLanguage = CType(Me.Table,LanguageDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property LanguageId() As Integer
                Get
                    Return CType(Me(Me.tableLanguage.LanguageIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableLanguage.LanguageIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Name() As String
                Get
                    Return CType(Me(Me.tableLanguage.NameColumn),String)
                End Get
                Set
                    Me(Me.tableLanguage.NameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Description() As String
                Get
                    Try 
                        Return CType(Me(Me.tableLanguage.DescriptionColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Description' in table 'Language' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableLanguage.DescriptionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableLanguage.CreatedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedDateTime' in table 'Language' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableLanguage.CreatedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedDateTime() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableLanguage.ModifiedDateTimeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedDateTime' in table 'Language' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableLanguage.ModifiedDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDescriptionNull() As Boolean
                Return Me.IsNull(Me.tableLanguage.DescriptionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDescriptionNull()
                Me(Me.tableLanguage.DescriptionColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableLanguage.CreatedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedDateTimeNull()
                Me(Me.tableLanguage.CreatedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedDateTimeNull() As Boolean
                Return Me.IsNull(Me.tableLanguage.ModifiedDateTimeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedDateTimeNull()
                Me(Me.tableLanguage.ModifiedDateTimeColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class StringValueRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As StringValueRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As StringValueRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As StringValueRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class LanguageRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As LanguageRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As LanguageRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As LanguageRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("UploadResults")>  _
    Partial Public Class UploadResults
        Inherits Global.System.Data.DataSet
        
        Private tableResult As ResultDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Result() As ResultDataTable
            Get
                Return Me.tableResult
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As UploadResults = CType(MyBase.Clone,UploadResults)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("Result")) Is Nothing) Then
                    MyBase.Tables.Add(New ResultDataTable(ds.Tables("Result")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableResult = CType(MyBase.Tables("Result"),ResultDataTable)
            If (initTable = true) Then
                If (Not (Me.tableResult) Is Nothing) Then
                    Me.tableResult.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "UploadResults"
            Me.Prefix = ""
            Me.Namespace = "http://www.activiser.com/Schemas/UploadResults.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableResult = New ResultDataTable
            MyBase.Tables.Add(Me.tableResult)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeResult() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As UploadResults = New UploadResults
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        Public Delegate Sub ResultRowChangeEventHandler(ByVal sender As Object, ByVal e As ResultRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ResultDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnType As Global.System.Data.DataColumn
            
            Private columnGUID As Global.System.Data.DataColumn
            
            Private columnID As Global.System.Data.DataColumn
            
            Private columnNumber As Global.System.Data.DataColumn
            
            Private columnTimeStamp As Global.System.Data.DataColumn
            
            Private columnChecksum As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Result"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TypeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnType
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property GUIDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnGUID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property IDColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnID
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NumberColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNumber
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property TimeStampColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnTimeStamp
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ChecksumColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnChecksum
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ResultRow
                Get
                    Return CType(Me.Rows(index),ResultRow)
                End Get
            End Property
            
            Public Event ResultRowChanging As ResultRowChangeEventHandler
            
            Public Event ResultRowChanged As ResultRowChangeEventHandler
            
            Public Event ResultRowDeleting As ResultRowChangeEventHandler
            
            Public Event ResultRowDeleted As ResultRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddResultRow(ByVal row As ResultRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddResultRow(ByVal Type As String, ByVal GUID As System.Guid, ByVal ID As Integer, ByVal Number As String, ByVal TimeStamp As Date, ByVal Checksum As String) As ResultRow
                Dim rowResultRow As ResultRow = CType(Me.NewRow,ResultRow)
                Dim columnValuesArray() As Object = New Object() {Type, GUID, ID, Number, TimeStamp, Checksum}
                rowResultRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowResultRow)
                Return rowResultRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ResultDataTable = CType(MyBase.Clone,ResultDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ResultDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnType = MyBase.Columns("Type")
                Me.columnGUID = MyBase.Columns("GUID")
                Me.columnID = MyBase.Columns("ID")
                Me.columnNumber = MyBase.Columns("Number")
                Me.columnTimeStamp = MyBase.Columns("TimeStamp")
                Me.columnChecksum = MyBase.Columns("Checksum")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnType = New Global.System.Data.DataColumn("Type", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnType)
                Me.columnGUID = New Global.System.Data.DataColumn("GUID", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnGUID)
                Me.columnID = New Global.System.Data.DataColumn("ID", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnID)
                Me.columnNumber = New Global.System.Data.DataColumn("Number", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNumber)
                Me.columnTimeStamp = New Global.System.Data.DataColumn("TimeStamp", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnTimeStamp)
                Me.columnChecksum = New Global.System.Data.DataColumn("Checksum", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnChecksum)
                Me.columnType.AllowDBNull = false
                Me.columnGUID.AllowDBNull = false
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewResultRow() As ResultRow
                Return CType(Me.NewRow,ResultRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ResultRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ResultRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ResultRowChangedEvent) Is Nothing) Then
                    RaiseEvent ResultRowChanged(Me, New ResultRowChangeEvent(CType(e.Row,ResultRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ResultRowChangingEvent) Is Nothing) Then
                    RaiseEvent ResultRowChanging(Me, New ResultRowChangeEvent(CType(e.Row,ResultRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ResultRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ResultRowDeleted(Me, New ResultRowChangeEvent(CType(e.Row,ResultRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ResultRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ResultRowDeleting(Me, New ResultRowChangeEvent(CType(e.Row,ResultRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveResultRow(ByVal row As ResultRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As UploadResults = New UploadResults
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ResultDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ResultRow
            Inherits Global.System.Data.DataRow
            
            Private tableResult As ResultDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableResult = CType(Me.Table,ResultDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Type() As String
                Get
                    Return CType(Me(Me.tableResult.TypeColumn),String)
                End Get
                Set
                    Me(Me.tableResult.TypeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property GUID() As System.Guid
                Get
                    Return CType(Me(Me.tableResult.GUIDColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableResult.GUIDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ID() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableResult.IDColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ID' in table 'Result' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableResult.IDColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Number() As String
                Get
                    Try 
                        Return CType(Me(Me.tableResult.NumberColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Number' in table 'Result' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableResult.NumberColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property TimeStamp() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableResult.TimeStampColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'TimeStamp' in table 'Result' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableResult.TimeStampColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Checksum() As String
                Get
                    Try 
                        Return CType(Me(Me.tableResult.ChecksumColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Checksum' in table 'Result' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableResult.ChecksumColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsIDNull() As Boolean
                Return Me.IsNull(Me.tableResult.IDColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetIDNull()
                Me(Me.tableResult.IDColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNumberNull() As Boolean
                Return Me.IsNull(Me.tableResult.NumberColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNumberNull()
                Me(Me.tableResult.NumberColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsTimeStampNull() As Boolean
                Return Me.IsNull(Me.tableResult.TimeStampColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetTimeStampNull()
                Me(Me.tableResult.TimeStampColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsChecksumNull() As Boolean
                Return Me.IsNull(Me.tableResult.ChecksumColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetChecksumNull()
                Me(Me.tableResult.ChecksumColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class ResultRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ResultRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As ResultRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As ResultRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("ClientSettingDataSet")>  _
    Partial Public Class ClientSettingDataSet
        Inherits Global.System.Data.DataSet
        
        Private tableClientSetting As ClientSettingDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientSetting() As ClientSettingDataTable
            Get
                Return Me.tableClientSetting
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As ClientSettingDataSet = CType(MyBase.Clone,ClientSettingDataSet)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("ClientSetting")) Is Nothing) Then
                    MyBase.Tables.Add(New ClientSettingDataTable(ds.Tables("ClientSetting")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableClientSetting = CType(MyBase.Tables("ClientSetting"),ClientSettingDataTable)
            If (initTable = true) Then
                If (Not (Me.tableClientSetting) Is Nothing) Then
                    Me.tableClientSetting.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "ClientSettingDataSet"
            Me.Prefix = ""
            Me.Namespace = "http://www.activiser.com/schemas/ClientSettingDataSet.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableClientSetting = New ClientSettingDataTable
            MyBase.Tables.Add(Me.tableClientSetting)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeClientSetting() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As ClientSettingDataSet = New ClientSettingDataSet
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        Public Delegate Sub ClientSettingRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientSettingRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ClientSettingDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnClientSettingId As Global.System.Data.DataColumn
            
            Private columnClientMask As Global.System.Data.DataColumn
            
            Private columnSystemId As Global.System.Data.DataColumn
            
            Private columnName As Global.System.Data.DataColumn
            
            Private columnValue As Global.System.Data.DataColumn
            
            Private columnValidAfter As Global.System.Data.DataColumn
            
            Private columnValidBefore As Global.System.Data.DataColumn
            
            Private columnCreated As Global.System.Data.DataColumn
            
            Private columnCreatedBy As Global.System.Data.DataColumn
            
            Private columnModified As Global.System.Data.DataColumn
            
            Private columnModifiedBy As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "ClientSetting"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientSettingIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientSettingId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientMaskColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientMask
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SystemIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSystemId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ValueColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnValue
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ValidAfterColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnValidAfter
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ValidBeforeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnValidBefore
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreated
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModified
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ClientSettingRow
                Get
                    Return CType(Me.Rows(index),ClientSettingRow)
                End Get
            End Property
            
            Public Event ClientSettingRowChanging As ClientSettingRowChangeEventHandler
            
            Public Event ClientSettingRowChanged As ClientSettingRowChangeEventHandler
            
            Public Event ClientSettingRowDeleting As ClientSettingRowChangeEventHandler
            
            Public Event ClientSettingRowDeleted As ClientSettingRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddClientSettingRow(ByVal row As ClientSettingRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddClientSettingRow(ByVal ClientSettingId As System.Guid, ByVal ClientMask As Integer, ByVal SystemId As String, ByVal Name As String, ByVal Value As String, ByVal ValidAfter As Date, ByVal ValidBefore As Date, ByVal Created As Date, ByVal CreatedBy As String, ByVal Modified As Date, ByVal ModifiedBy As String) As ClientSettingRow
                Dim rowClientSettingRow As ClientSettingRow = CType(Me.NewRow,ClientSettingRow)
                Dim columnValuesArray() As Object = New Object() {ClientSettingId, ClientMask, SystemId, Name, Value, ValidAfter, ValidBefore, Created, CreatedBy, Modified, ModifiedBy}
                rowClientSettingRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowClientSettingRow)
                Return rowClientSettingRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByClientSettingId(ByVal ClientSettingId As System.Guid) As ClientSettingRow
                Return CType(Me.Rows.Find(New Object() {ClientSettingId}),ClientSettingRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ClientSettingDataTable = CType(MyBase.Clone,ClientSettingDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ClientSettingDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnClientSettingId = MyBase.Columns("ClientSettingId")
                Me.columnClientMask = MyBase.Columns("ClientMask")
                Me.columnSystemId = MyBase.Columns("SystemId")
                Me.columnName = MyBase.Columns("Name")
                Me.columnValue = MyBase.Columns("Value")
                Me.columnValidAfter = MyBase.Columns("ValidAfter")
                Me.columnValidBefore = MyBase.Columns("ValidBefore")
                Me.columnCreated = MyBase.Columns("Created")
                Me.columnCreatedBy = MyBase.Columns("CreatedBy")
                Me.columnModified = MyBase.Columns("Modified")
                Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnClientSettingId = New Global.System.Data.DataColumn("ClientSettingId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientSettingId)
                Me.columnClientMask = New Global.System.Data.DataColumn("ClientMask", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientMask)
                Me.columnSystemId = New Global.System.Data.DataColumn("SystemId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSystemId)
                Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnName)
                Me.columnValue = New Global.System.Data.DataColumn("Value", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnValue)
                Me.columnValidAfter = New Global.System.Data.DataColumn("ValidAfter", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnValidAfter)
                Me.columnValidBefore = New Global.System.Data.DataColumn("ValidBefore", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnValidBefore)
                Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreated)
                Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedBy)
                Me.columnModified = New Global.System.Data.DataColumn("Modified", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModified)
                Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedBy)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnClientSettingId}, true))
                Me.columnClientSettingId.AllowDBNull = false
                Me.columnClientSettingId.Unique = true
                Me.columnClientMask.AllowDBNull = false
                Me.columnSystemId.MaxLength = 128
                Me.columnName.AllowDBNull = false
                Me.columnName.MaxLength = 50
                Me.columnValue.MaxLength = 1000
                Me.columnCreatedBy.MaxLength = 128
                Me.columnModifiedBy.MaxLength = 128
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewClientSettingRow() As ClientSettingRow
                Return CType(Me.NewRow,ClientSettingRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ClientSettingRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ClientSettingRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ClientSettingRowChangedEvent) Is Nothing) Then
                    RaiseEvent ClientSettingRowChanged(Me, New ClientSettingRowChangeEvent(CType(e.Row,ClientSettingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ClientSettingRowChangingEvent) Is Nothing) Then
                    RaiseEvent ClientSettingRowChanging(Me, New ClientSettingRowChangeEvent(CType(e.Row,ClientSettingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ClientSettingRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ClientSettingRowDeleted(Me, New ClientSettingRowChangeEvent(CType(e.Row,ClientSettingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ClientSettingRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ClientSettingRowDeleting(Me, New ClientSettingRowChangeEvent(CType(e.Row,ClientSettingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveClientSettingRow(ByVal row As ClientSettingRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As ClientSettingDataSet = New ClientSettingDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ClientSettingDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ClientSettingRow
            Inherits Global.System.Data.DataRow
            
            Private tableClientSetting As ClientSettingDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableClientSetting = CType(Me.Table,ClientSettingDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientSettingId() As System.Guid
                Get
                    Return CType(Me(Me.tableClientSetting.ClientSettingIdColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableClientSetting.ClientSettingIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientMask() As Integer
                Get
                    Return CType(Me(Me.tableClientSetting.ClientMaskColumn),Integer)
                End Get
                Set
                    Me(Me.tableClientSetting.ClientMaskColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property SystemId() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClientSetting.SystemIdColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SystemId' in table 'ClientSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSetting.SystemIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Name() As String
                Get
                    Return CType(Me(Me.tableClientSetting.NameColumn),String)
                End Get
                Set
                    Me(Me.tableClientSetting.NameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Value() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClientSetting.ValueColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Value' in table 'ClientSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSetting.ValueColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ValidAfter() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableClientSetting.ValidAfterColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ValidAfter' in table 'ClientSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSetting.ValidAfterColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ValidBefore() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableClientSetting.ValidBeforeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ValidBefore' in table 'ClientSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSetting.ValidBeforeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Created() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableClientSetting.CreatedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Created' in table 'ClientSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSetting.CreatedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClientSetting.CreatedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'ClientSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSetting.CreatedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Modified() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableClientSetting.ModifiedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Modified' in table 'ClientSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSetting.ModifiedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClientSetting.ModifiedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'ClientSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientSetting.ModifiedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsSystemIdNull() As Boolean
                Return Me.IsNull(Me.tableClientSetting.SystemIdColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetSystemIdNull()
                Me(Me.tableClientSetting.SystemIdColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsValueNull() As Boolean
                Return Me.IsNull(Me.tableClientSetting.ValueColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetValueNull()
                Me(Me.tableClientSetting.ValueColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsValidAfterNull() As Boolean
                Return Me.IsNull(Me.tableClientSetting.ValidAfterColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetValidAfterNull()
                Me(Me.tableClientSetting.ValidAfterColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsValidBeforeNull() As Boolean
                Return Me.IsNull(Me.tableClientSetting.ValidBeforeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetValidBeforeNull()
                Me(Me.tableClientSetting.ValidBeforeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedNull() As Boolean
                Return Me.IsNull(Me.tableClientSetting.CreatedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedNull()
                Me(Me.tableClientSetting.CreatedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedByNull() As Boolean
                Return Me.IsNull(Me.tableClientSetting.CreatedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedByNull()
                Me(Me.tableClientSetting.CreatedByColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedNull() As Boolean
                Return Me.IsNull(Me.tableClientSetting.ModifiedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedNull()
                Me(Me.tableClientSetting.ModifiedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedByNull() As Boolean
                Return Me.IsNull(Me.tableClientSetting.ModifiedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedByNull()
                Me(Me.tableClientSetting.ModifiedByColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class ClientSettingRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ClientSettingRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As ClientSettingRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As ClientSettingRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("ConsultantItemDataSet")>  _
    Partial Public Class ConsultantItemDataSet
        Inherits Global.System.Data.DataSet
        
        Private tableConsultantItem As ConsultantItemDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsultantItem() As ConsultantItemDataTable
            Get
                Return Me.tableConsultantItem
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As ConsultantItemDataSet = CType(MyBase.Clone,ConsultantItemDataSet)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("ConsultantItem")) Is Nothing) Then
                    MyBase.Tables.Add(New ConsultantItemDataTable(ds.Tables("ConsultantItem")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableConsultantItem = CType(MyBase.Tables("ConsultantItem"),ConsultantItemDataTable)
            If (initTable = true) Then
                If (Not (Me.tableConsultantItem) Is Nothing) Then
                    Me.tableConsultantItem.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "ConsultantItemDataSet"
            Me.Prefix = ""
            Me.Namespace = "http://www.activiser.com/Schemas/ConsultantItemDataSet.xsd"
            Me.Locale = New Global.System.Globalization.CultureInfo("")
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableConsultantItem = New ConsultantItemDataTable
            MyBase.Tables.Add(Me.tableConsultantItem)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeConsultantItem() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As ConsultantItemDataSet = New ConsultantItemDataSet
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        Public Delegate Sub ConsultantItemRowChangeEventHandler(ByVal sender As Object, ByVal e As ConsultantItemRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ConsultantItemDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnConsultantItemId As Global.System.Data.DataColumn
            
            Private columnConsultantUid As Global.System.Data.DataColumn
            
            Private columnDeviceId As Global.System.Data.DataColumn
            
            Private columnEntity As Global.System.Data.DataColumn
            
            Private columnEntityId As Global.System.Data.DataColumn
            
            Private columnStatus As Global.System.Data.DataColumn
            
            Private columnCreated As Global.System.Data.DataColumn
            
            Private columnCreatedBy As Global.System.Data.DataColumn
            
            Private columnModified As Global.System.Data.DataColumn
            
            Private columnModifiedBy As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "ConsultantItem"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantItemIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantItemId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantUidColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantUid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DeviceIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDeviceId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EntityColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEntity
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EntityIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEntityId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnStatus
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreated
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModified
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ConsultantItemRow
                Get
                    Return CType(Me.Rows(index),ConsultantItemRow)
                End Get
            End Property
            
            Public Event ConsultantItemRowChanging As ConsultantItemRowChangeEventHandler
            
            Public Event ConsultantItemRowChanged As ConsultantItemRowChangeEventHandler
            
            Public Event ConsultantItemRowDeleting As ConsultantItemRowChangeEventHandler
            
            Public Event ConsultantItemRowDeleted As ConsultantItemRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddConsultantItemRow(ByVal row As ConsultantItemRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddConsultantItemRow(ByVal ConsultantItemId As System.Guid, ByVal ConsultantUid As System.Guid, ByVal DeviceId As String, ByVal Entity As String, ByVal EntityId As System.Guid, ByVal Status As Integer, ByVal Created As Date, ByVal CreatedBy As String, ByVal Modified As Date, ByVal ModifiedBy As String) As ConsultantItemRow
                Dim rowConsultantItemRow As ConsultantItemRow = CType(Me.NewRow,ConsultantItemRow)
                Dim columnValuesArray() As Object = New Object() {ConsultantItemId, ConsultantUid, DeviceId, Entity, EntityId, Status, Created, CreatedBy, Modified, ModifiedBy}
                rowConsultantItemRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowConsultantItemRow)
                Return rowConsultantItemRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByConsultantItemId(ByVal ConsultantItemId As System.Guid) As ConsultantItemRow
                Return CType(Me.Rows.Find(New Object() {ConsultantItemId}),ConsultantItemRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ConsultantItemDataTable = CType(MyBase.Clone,ConsultantItemDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ConsultantItemDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnConsultantItemId = MyBase.Columns("ConsultantItemId")
                Me.columnConsultantUid = MyBase.Columns("ConsultantUid")
                Me.columnDeviceId = MyBase.Columns("DeviceId")
                Me.columnEntity = MyBase.Columns("Entity")
                Me.columnEntityId = MyBase.Columns("EntityId")
                Me.columnStatus = MyBase.Columns("Status")
                Me.columnCreated = MyBase.Columns("Created")
                Me.columnCreatedBy = MyBase.Columns("CreatedBy")
                Me.columnModified = MyBase.Columns("Modified")
                Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnConsultantItemId = New Global.System.Data.DataColumn("ConsultantItemId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantItemId)
                Me.columnConsultantUid = New Global.System.Data.DataColumn("ConsultantUid", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantUid)
                Me.columnDeviceId = New Global.System.Data.DataColumn("DeviceId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDeviceId)
                Me.columnEntity = New Global.System.Data.DataColumn("Entity", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEntity)
                Me.columnEntityId = New Global.System.Data.DataColumn("EntityId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEntityId)
                Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStatus)
                Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreated)
                Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedBy)
                Me.columnModified = New Global.System.Data.DataColumn("Modified", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModified)
                Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedBy)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnConsultantItemId}, true))
                Me.columnConsultantItemId.AllowDBNull = false
                Me.columnConsultantItemId.Unique = true
                Me.columnConsultantUid.AllowDBNull = false
                Me.columnDeviceId.MaxLength = 128
                Me.columnEntity.AllowDBNull = false
                Me.columnEntity.MaxLength = 128
                Me.columnEntityId.AllowDBNull = false
                Me.columnStatus.AllowDBNull = false
                Me.columnCreatedBy.MaxLength = 128
                Me.columnModifiedBy.MaxLength = 128
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewConsultantItemRow() As ConsultantItemRow
                Return CType(Me.NewRow,ConsultantItemRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ConsultantItemRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ConsultantItemRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ConsultantItemRowChangedEvent) Is Nothing) Then
                    RaiseEvent ConsultantItemRowChanged(Me, New ConsultantItemRowChangeEvent(CType(e.Row,ConsultantItemRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ConsultantItemRowChangingEvent) Is Nothing) Then
                    RaiseEvent ConsultantItemRowChanging(Me, New ConsultantItemRowChangeEvent(CType(e.Row,ConsultantItemRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ConsultantItemRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ConsultantItemRowDeleted(Me, New ConsultantItemRowChangeEvent(CType(e.Row,ConsultantItemRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ConsultantItemRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ConsultantItemRowDeleting(Me, New ConsultantItemRowChangeEvent(CType(e.Row,ConsultantItemRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveConsultantItemRow(ByVal row As ConsultantItemRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As ConsultantItemDataSet = New ConsultantItemDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ConsultantItemDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ConsultantItemRow
            Inherits Global.System.Data.DataRow
            
            Private tableConsultantItem As ConsultantItemDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableConsultantItem = CType(Me.Table,ConsultantItemDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantItemId() As System.Guid
                Get
                    Return CType(Me(Me.tableConsultantItem.ConsultantItemIdColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableConsultantItem.ConsultantItemIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantUid() As System.Guid
                Get
                    Return CType(Me(Me.tableConsultantItem.ConsultantUidColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableConsultantItem.ConsultantUidColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property DeviceId() As String
                Get
                    Try 
                        Return CType(Me(Me.tableConsultantItem.DeviceIdColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DeviceId' in table 'ConsultantItem' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultantItem.DeviceIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Entity() As String
                Get
                    Return CType(Me(Me.tableConsultantItem.EntityColumn),String)
                End Get
                Set
                    Me(Me.tableConsultantItem.EntityColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EntityId() As System.Guid
                Get
                    Return CType(Me(Me.tableConsultantItem.EntityIdColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableConsultantItem.EntityIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Status() As Integer
                Get
                    Return CType(Me(Me.tableConsultantItem.StatusColumn),Integer)
                End Get
                Set
                    Me(Me.tableConsultantItem.StatusColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Created() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableConsultantItem.CreatedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Created' in table 'ConsultantItem' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultantItem.CreatedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableConsultantItem.CreatedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'ConsultantItem' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultantItem.CreatedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Modified() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableConsultantItem.ModifiedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Modified' in table 'ConsultantItem' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultantItem.ModifiedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableConsultantItem.ModifiedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'ConsultantItem' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultantItem.ModifiedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDeviceIdNull() As Boolean
                Return Me.IsNull(Me.tableConsultantItem.DeviceIdColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDeviceIdNull()
                Me(Me.tableConsultantItem.DeviceIdColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedNull() As Boolean
                Return Me.IsNull(Me.tableConsultantItem.CreatedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedNull()
                Me(Me.tableConsultantItem.CreatedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedByNull() As Boolean
                Return Me.IsNull(Me.tableConsultantItem.CreatedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedByNull()
                Me(Me.tableConsultantItem.CreatedByColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedNull() As Boolean
                Return Me.IsNull(Me.tableConsultantItem.ModifiedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedNull()
                Me(Me.tableConsultantItem.ModifiedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedByNull() As Boolean
                Return Me.IsNull(Me.tableConsultantItem.ModifiedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedByNull()
                Me(Me.tableConsultantItem.ModifiedByColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class ConsultantItemRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ConsultantItemRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As ConsultantItemRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As ConsultantItemRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("ConsultantSettingDataSet")>  _
    Partial Public Class ConsultantSettingDataSet
        Inherits Global.System.Data.DataSet
        
        Private tableConsultantSetting As ConsultantSettingDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ConsultantSetting() As ConsultantSettingDataTable
            Get
                Return Me.tableConsultantSetting
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As ConsultantSettingDataSet = CType(MyBase.Clone,ConsultantSettingDataSet)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("ConsultantSetting")) Is Nothing) Then
                    MyBase.Tables.Add(New ConsultantSettingDataTable(ds.Tables("ConsultantSetting")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableConsultantSetting = CType(MyBase.Tables("ConsultantSetting"),ConsultantSettingDataTable)
            If (initTable = true) Then
                If (Not (Me.tableConsultantSetting) Is Nothing) Then
                    Me.tableConsultantSetting.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "ConsultantSettingDataSet"
            Me.Prefix = ""
            Me.Namespace = "http://www.activiser.com/Schemas/ConsultantSettingDataSet.xsd"
            Me.Locale = New Global.System.Globalization.CultureInfo("")
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableConsultantSetting = New ConsultantSettingDataTable
            MyBase.Tables.Add(Me.tableConsultantSetting)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeConsultantSetting() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As ConsultantSettingDataSet = New ConsultantSettingDataSet
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        Public Delegate Sub ConsultantSettingRowChangeEventHandler(ByVal sender As Object, ByVal e As ConsultantSettingRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ConsultantSettingDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnConsultantSettingId As Global.System.Data.DataColumn
            
            Private columnConsultantUid As Global.System.Data.DataColumn
            
            Private columnDeviceId As Global.System.Data.DataColumn
            
            Private columnName As Global.System.Data.DataColumn
            
            Private columnJobHistoryNumber As Global.System.Data.DataColumn
            
            Private columnJobHistoryAgeLimit As Global.System.Data.DataColumn
            
            Private columnShortcuts As Global.System.Data.DataColumn
            
            Private columnStatus As Global.System.Data.DataColumn
            
            Private columnLastSync As Global.System.Data.DataColumn
            
            Private columnCreated As Global.System.Data.DataColumn
            
            Private columnCreatedBy As Global.System.Data.DataColumn
            
            Private columnModified As Global.System.Data.DataColumn
            
            Private columnModifiedBy As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "ConsultantSetting"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantSettingIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantSettingId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantUidColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantUid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DeviceIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDeviceId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property JobHistoryNumberColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnJobHistoryNumber
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property JobHistoryAgeLimitColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnJobHistoryAgeLimit
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ShortcutsColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnShortcuts
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property StatusColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnStatus
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LastSyncColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLastSync
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreated
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModified
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ConsultantSettingRow
                Get
                    Return CType(Me.Rows(index),ConsultantSettingRow)
                End Get
            End Property
            
            Public Event ConsultantSettingRowChanging As ConsultantSettingRowChangeEventHandler
            
            Public Event ConsultantSettingRowChanged As ConsultantSettingRowChangeEventHandler
            
            Public Event ConsultantSettingRowDeleting As ConsultantSettingRowChangeEventHandler
            
            Public Event ConsultantSettingRowDeleted As ConsultantSettingRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddConsultantSettingRow(ByVal row As ConsultantSettingRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddConsultantSettingRow(ByVal ConsultantSettingId As System.Guid, ByVal ConsultantUid As System.Guid, ByVal DeviceId As String, ByVal Name As String, ByVal JobHistoryNumber As Integer, ByVal JobHistoryAgeLimit As Integer, ByVal Shortcuts As String, ByVal Status As Integer, ByVal LastSync As Date, ByVal Created As Date, ByVal CreatedBy As String, ByVal Modified As Date, ByVal ModifiedBy As String) As ConsultantSettingRow
                Dim rowConsultantSettingRow As ConsultantSettingRow = CType(Me.NewRow,ConsultantSettingRow)
                Dim columnValuesArray() As Object = New Object() {ConsultantSettingId, ConsultantUid, DeviceId, Name, JobHistoryNumber, JobHistoryAgeLimit, Shortcuts, Status, LastSync, Created, CreatedBy, Modified, ModifiedBy}
                rowConsultantSettingRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowConsultantSettingRow)
                Return rowConsultantSettingRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByConsultantSettingId(ByVal ConsultantSettingId As System.Guid) As ConsultantSettingRow
                Return CType(Me.Rows.Find(New Object() {ConsultantSettingId}),ConsultantSettingRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ConsultantSettingDataTable = CType(MyBase.Clone,ConsultantSettingDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ConsultantSettingDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnConsultantSettingId = MyBase.Columns("ConsultantSettingId")
                Me.columnConsultantUid = MyBase.Columns("ConsultantUid")
                Me.columnDeviceId = MyBase.Columns("DeviceId")
                Me.columnName = MyBase.Columns("Name")
                Me.columnJobHistoryNumber = MyBase.Columns("JobHistoryNumber")
                Me.columnJobHistoryAgeLimit = MyBase.Columns("JobHistoryAgeLimit")
                Me.columnShortcuts = MyBase.Columns("Shortcuts")
                Me.columnStatus = MyBase.Columns("Status")
                Me.columnLastSync = MyBase.Columns("LastSync")
                Me.columnCreated = MyBase.Columns("Created")
                Me.columnCreatedBy = MyBase.Columns("CreatedBy")
                Me.columnModified = MyBase.Columns("Modified")
                Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnConsultantSettingId = New Global.System.Data.DataColumn("ConsultantSettingId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantSettingId)
                Me.columnConsultantUid = New Global.System.Data.DataColumn("ConsultantUid", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantUid)
                Me.columnDeviceId = New Global.System.Data.DataColumn("DeviceId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDeviceId)
                Me.columnName = New Global.System.Data.DataColumn("Name", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnName)
                Me.columnJobHistoryNumber = New Global.System.Data.DataColumn("JobHistoryNumber", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnJobHistoryNumber)
                Me.columnJobHistoryAgeLimit = New Global.System.Data.DataColumn("JobHistoryAgeLimit", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnJobHistoryAgeLimit)
                Me.columnShortcuts = New Global.System.Data.DataColumn("Shortcuts", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnShortcuts)
                Me.columnStatus = New Global.System.Data.DataColumn("Status", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnStatus)
                Me.columnLastSync = New Global.System.Data.DataColumn("LastSync", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLastSync)
                Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreated)
                Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedBy)
                Me.columnModified = New Global.System.Data.DataColumn("Modified", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModified)
                Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedBy)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnConsultantSettingId}, true))
                Me.columnConsultantSettingId.AllowDBNull = false
                Me.columnConsultantSettingId.Unique = true
                Me.columnConsultantUid.AllowDBNull = false
                Me.columnDeviceId.MaxLength = 128
                Me.columnName.AllowDBNull = false
                Me.columnName.MaxLength = 128
                Me.columnJobHistoryNumber.AllowDBNull = false
                Me.columnJobHistoryAgeLimit.AllowDBNull = false
                Me.columnShortcuts.MaxLength = 4000
                Me.columnCreatedBy.MaxLength = 128
                Me.columnModifiedBy.MaxLength = 128
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewConsultantSettingRow() As ConsultantSettingRow
                Return CType(Me.NewRow,ConsultantSettingRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ConsultantSettingRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ConsultantSettingRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ConsultantSettingRowChangedEvent) Is Nothing) Then
                    RaiseEvent ConsultantSettingRowChanged(Me, New ConsultantSettingRowChangeEvent(CType(e.Row,ConsultantSettingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ConsultantSettingRowChangingEvent) Is Nothing) Then
                    RaiseEvent ConsultantSettingRowChanging(Me, New ConsultantSettingRowChangeEvent(CType(e.Row,ConsultantSettingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ConsultantSettingRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ConsultantSettingRowDeleted(Me, New ConsultantSettingRowChangeEvent(CType(e.Row,ConsultantSettingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ConsultantSettingRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ConsultantSettingRowDeleting(Me, New ConsultantSettingRowChangeEvent(CType(e.Row,ConsultantSettingRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveConsultantSettingRow(ByVal row As ConsultantSettingRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As ConsultantSettingDataSet = New ConsultantSettingDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ConsultantSettingDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ConsultantSettingRow
            Inherits Global.System.Data.DataRow
            
            Private tableConsultantSetting As ConsultantSettingDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableConsultantSetting = CType(Me.Table,ConsultantSettingDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantSettingId() As System.Guid
                Get
                    Return CType(Me(Me.tableConsultantSetting.ConsultantSettingIdColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableConsultantSetting.ConsultantSettingIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantUid() As System.Guid
                Get
                    Return CType(Me(Me.tableConsultantSetting.ConsultantUidColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableConsultantSetting.ConsultantUidColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property DeviceId() As String
                Get
                    Try 
                        Return CType(Me(Me.tableConsultantSetting.DeviceIdColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'DeviceId' in table 'ConsultantSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultantSetting.DeviceIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Name() As String
                Get
                    Return CType(Me(Me.tableConsultantSetting.NameColumn),String)
                End Get
                Set
                    Me(Me.tableConsultantSetting.NameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property JobHistoryNumber() As Integer
                Get
                    Return CType(Me(Me.tableConsultantSetting.JobHistoryNumberColumn),Integer)
                End Get
                Set
                    Me(Me.tableConsultantSetting.JobHistoryNumberColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property JobHistoryAgeLimit() As Integer
                Get
                    Return CType(Me(Me.tableConsultantSetting.JobHistoryAgeLimitColumn),Integer)
                End Get
                Set
                    Me(Me.tableConsultantSetting.JobHistoryAgeLimitColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Shortcuts() As String
                Get
                    Try 
                        Return CType(Me(Me.tableConsultantSetting.ShortcutsColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Shortcuts' in table 'ConsultantSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultantSetting.ShortcutsColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Status() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableConsultantSetting.StatusColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Status' in table 'ConsultantSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultantSetting.StatusColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property LastSync() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableConsultantSetting.LastSyncColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'LastSync' in table 'ConsultantSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultantSetting.LastSyncColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Created() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableConsultantSetting.CreatedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Created' in table 'ConsultantSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultantSetting.CreatedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableConsultantSetting.CreatedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'ConsultantSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultantSetting.CreatedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Modified() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableConsultantSetting.ModifiedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Modified' in table 'ConsultantSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultantSetting.ModifiedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableConsultantSetting.ModifiedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'ConsultantSetting' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableConsultantSetting.ModifiedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsDeviceIdNull() As Boolean
                Return Me.IsNull(Me.tableConsultantSetting.DeviceIdColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetDeviceIdNull()
                Me(Me.tableConsultantSetting.DeviceIdColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsShortcutsNull() As Boolean
                Return Me.IsNull(Me.tableConsultantSetting.ShortcutsColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetShortcutsNull()
                Me(Me.tableConsultantSetting.ShortcutsColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsStatusNull() As Boolean
                Return Me.IsNull(Me.tableConsultantSetting.StatusColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetStatusNull()
                Me(Me.tableConsultantSetting.StatusColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsLastSyncNull() As Boolean
                Return Me.IsNull(Me.tableConsultantSetting.LastSyncColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetLastSyncNull()
                Me(Me.tableConsultantSetting.LastSyncColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedNull() As Boolean
                Return Me.IsNull(Me.tableConsultantSetting.CreatedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedNull()
                Me(Me.tableConsultantSetting.CreatedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedByNull() As Boolean
                Return Me.IsNull(Me.tableConsultantSetting.CreatedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedByNull()
                Me(Me.tableConsultantSetting.CreatedByColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedNull() As Boolean
                Return Me.IsNull(Me.tableConsultantSetting.ModifiedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedNull()
                Me(Me.tableConsultantSetting.ModifiedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedByNull() As Boolean
                Return Me.IsNull(Me.tableConsultantSetting.ModifiedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedByNull()
                Me(Me.tableConsultantSetting.ModifiedByColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class ConsultantSettingRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ConsultantSettingRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As ConsultantSettingRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As ConsultantSettingRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("SyncLogDataSet")>  _
    Partial Public Class SyncLogDataSet
        Inherits Global.System.Data.DataSet
        
        Private tableSyncLog As SyncLogDataTable
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property SyncLog() As SyncLogDataTable
            Get
                Return Me.tableSyncLog
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As SyncLogDataSet = CType(MyBase.Clone,SyncLogDataSet)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("SyncLog")) Is Nothing) Then
                    MyBase.Tables.Add(New SyncLogDataTable(ds.Tables("SyncLog")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableSyncLog = CType(MyBase.Tables("SyncLog"),SyncLogDataTable)
            If (initTable = true) Then
                If (Not (Me.tableSyncLog) Is Nothing) Then
                    Me.tableSyncLog.InitVars
                End If
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "SyncLogDataSet"
            Me.Prefix = ""
            Me.Namespace = "http://www.activiser.com/schemas/SyncLogDataSet.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableSyncLog = New SyncLogDataTable
            MyBase.Tables.Add(Me.tableSyncLog)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeSyncLog() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As SyncLogDataSet = New SyncLogDataSet
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        Public Delegate Sub SyncLogRowChangeEventHandler(ByVal sender As Object, ByVal e As SyncLogRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class SyncLogDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnSyncLogId As Global.System.Data.DataColumn
            
            Private columnSyncDateTime As Global.System.Data.DataColumn
            
            Private columnConsultantUid As Global.System.Data.DataColumn
            
            Private columnMessage As Global.System.Data.DataColumn
            
            Private columnSyncDetails As Global.System.Data.DataColumn
            
            Private columnCreated As Global.System.Data.DataColumn
            
            Private columnCreatedBy As Global.System.Data.DataColumn
            
            Private columnModified As Global.System.Data.DataColumn
            
            Private columnModifiedBy As Global.System.Data.DataColumn
            
            Private columnRowVersion As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "SyncLog"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SyncLogIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSyncLogId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SyncDateTimeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSyncDateTime
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ConsultantUidColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnConsultantUid
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property MessageColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMessage
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SyncDetailsColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSyncDetails
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreated
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModified
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property RowVersionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnRowVersion
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As SyncLogRow
                Get
                    Return CType(Me.Rows(index),SyncLogRow)
                End Get
            End Property
            
            Public Event SyncLogRowChanging As SyncLogRowChangeEventHandler
            
            Public Event SyncLogRowChanged As SyncLogRowChangeEventHandler
            
            Public Event SyncLogRowDeleting As SyncLogRowChangeEventHandler
            
            Public Event SyncLogRowDeleted As SyncLogRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddSyncLogRow(ByVal row As SyncLogRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddSyncLogRow(ByVal SyncLogId As System.Guid, ByVal SyncDateTime As Date, ByVal ConsultantUid As System.Guid, ByVal Message As String, ByVal SyncDetails As String, ByVal Created As Date, ByVal CreatedBy As String, ByVal Modified As Date, ByVal ModifiedBy As String, ByVal RowVersion() As Byte) As SyncLogRow
                Dim rowSyncLogRow As SyncLogRow = CType(Me.NewRow,SyncLogRow)
                Dim columnValuesArray() As Object = New Object() {SyncLogId, SyncDateTime, ConsultantUid, Message, SyncDetails, Created, CreatedBy, Modified, ModifiedBy, RowVersion}
                rowSyncLogRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowSyncLogRow)
                Return rowSyncLogRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindBySyncLogId(ByVal SyncLogId As System.Guid) As SyncLogRow
                Return CType(Me.Rows.Find(New Object() {SyncLogId}),SyncLogRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As SyncLogDataTable = CType(MyBase.Clone,SyncLogDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New SyncLogDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnSyncLogId = MyBase.Columns("SyncLogId")
                Me.columnSyncDateTime = MyBase.Columns("SyncDateTime")
                Me.columnConsultantUid = MyBase.Columns("ConsultantUid")
                Me.columnMessage = MyBase.Columns("Message")
                Me.columnSyncDetails = MyBase.Columns("SyncDetails")
                Me.columnCreated = MyBase.Columns("Created")
                Me.columnCreatedBy = MyBase.Columns("CreatedBy")
                Me.columnModified = MyBase.Columns("Modified")
                Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
                Me.columnRowVersion = MyBase.Columns("RowVersion")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnSyncLogId = New Global.System.Data.DataColumn("SyncLogId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSyncLogId)
                Me.columnSyncDateTime = New Global.System.Data.DataColumn("SyncDateTime", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSyncDateTime)
                Me.columnConsultantUid = New Global.System.Data.DataColumn("ConsultantUid", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnConsultantUid)
                Me.columnMessage = New Global.System.Data.DataColumn("Message", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMessage)
                Me.columnSyncDetails = New Global.System.Data.DataColumn("SyncDetails", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSyncDetails)
                Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreated)
                Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedBy)
                Me.columnModified = New Global.System.Data.DataColumn("Modified", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModified)
                Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedBy)
                Me.columnRowVersion = New Global.System.Data.DataColumn("RowVersion", GetType(Byte()), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnRowVersion)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnSyncLogId}, true))
                Me.columnSyncLogId.AllowDBNull = false
                Me.columnSyncLogId.Unique = true
                Me.columnSyncDateTime.AllowDBNull = false
                Me.columnConsultantUid.AllowDBNull = false
                Me.columnMessage.MaxLength = 1000
                Me.columnSyncDetails.MaxLength = 2147483647
                Me.columnCreatedBy.MaxLength = 128
                Me.columnModifiedBy.MaxLength = 128
                Me.columnRowVersion.ReadOnly = true
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewSyncLogRow() As SyncLogRow
                Return CType(Me.NewRow,SyncLogRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New SyncLogRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(SyncLogRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.SyncLogRowChangedEvent) Is Nothing) Then
                    RaiseEvent SyncLogRowChanged(Me, New SyncLogRowChangeEvent(CType(e.Row,SyncLogRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.SyncLogRowChangingEvent) Is Nothing) Then
                    RaiseEvent SyncLogRowChanging(Me, New SyncLogRowChangeEvent(CType(e.Row,SyncLogRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.SyncLogRowDeletedEvent) Is Nothing) Then
                    RaiseEvent SyncLogRowDeleted(Me, New SyncLogRowChangeEvent(CType(e.Row,SyncLogRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.SyncLogRowDeletingEvent) Is Nothing) Then
                    RaiseEvent SyncLogRowDeleting(Me, New SyncLogRowChangeEvent(CType(e.Row,SyncLogRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveSyncLogRow(ByVal row As SyncLogRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As SyncLogDataSet = New SyncLogDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "SyncLogDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class SyncLogRow
            Inherits Global.System.Data.DataRow
            
            Private tableSyncLog As SyncLogDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableSyncLog = CType(Me.Table,SyncLogDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property SyncLogId() As System.Guid
                Get
                    Return CType(Me(Me.tableSyncLog.SyncLogIdColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableSyncLog.SyncLogIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property SyncDateTime() As Date
                Get
                    Return CType(Me(Me.tableSyncLog.SyncDateTimeColumn),Date)
                End Get
                Set
                    Me(Me.tableSyncLog.SyncDateTimeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ConsultantUid() As System.Guid
                Get
                    Return CType(Me(Me.tableSyncLog.ConsultantUidColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableSyncLog.ConsultantUidColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Message() As String
                Get
                    Try 
                        Return CType(Me(Me.tableSyncLog.MessageColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Message' in table 'SyncLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSyncLog.MessageColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property SyncDetails() As String
                Get
                    Try 
                        Return CType(Me(Me.tableSyncLog.SyncDetailsColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'SyncDetails' in table 'SyncLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSyncLog.SyncDetailsColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Created() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableSyncLog.CreatedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Created' in table 'SyncLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSyncLog.CreatedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableSyncLog.CreatedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'SyncLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSyncLog.CreatedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Modified() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableSyncLog.ModifiedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Modified' in table 'SyncLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSyncLog.ModifiedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableSyncLog.ModifiedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'SyncLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSyncLog.ModifiedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property RowVersion() As Byte()
                Get
                    Try 
                        Return CType(Me(Me.tableSyncLog.RowVersionColumn),Byte())
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'RowVersion' in table 'SyncLog' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableSyncLog.RowVersionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsMessageNull() As Boolean
                Return Me.IsNull(Me.tableSyncLog.MessageColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetMessageNull()
                Me(Me.tableSyncLog.MessageColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsSyncDetailsNull() As Boolean
                Return Me.IsNull(Me.tableSyncLog.SyncDetailsColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetSyncDetailsNull()
                Me(Me.tableSyncLog.SyncDetailsColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedNull() As Boolean
                Return Me.IsNull(Me.tableSyncLog.CreatedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedNull()
                Me(Me.tableSyncLog.CreatedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedByNull() As Boolean
                Return Me.IsNull(Me.tableSyncLog.CreatedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedByNull()
                Me(Me.tableSyncLog.CreatedByColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedNull() As Boolean
                Return Me.IsNull(Me.tableSyncLog.ModifiedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedNull()
                Me(Me.tableSyncLog.ModifiedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedByNull() As Boolean
                Return Me.IsNull(Me.tableSyncLog.ModifiedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedByNull()
                Me(Me.tableSyncLog.ModifiedByColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsRowVersionNull() As Boolean
                Return Me.IsNull(Me.tableSyncLog.RowVersionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetRowVersionNull()
                Me(Me.tableSyncLog.RowVersionColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class SyncLogRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As SyncLogRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As SyncLogRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As SyncLogRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("ClientRegistrationDataSet")>  _
    Partial Public Class ClientRegistrationDataSet
        Inherits Global.System.Data.DataSet
        
        Private tableClientStatus As ClientStatusDataTable
        
        Private tableClient As ClientDataTable
        
        Private relationClientStatus_Client As Global.System.Data.DataRelation
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property ClientStatus() As ClientStatusDataTable
            Get
                Return Me.tableClientStatus
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Client() As ClientDataTable
            Get
                Return Me.tableClient
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As ClientRegistrationDataSet = CType(MyBase.Clone,ClientRegistrationDataSet)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("ClientStatus")) Is Nothing) Then
                    MyBase.Tables.Add(New ClientStatusDataTable(ds.Tables("ClientStatus")))
                End If
                If (Not (ds.Tables("Client")) Is Nothing) Then
                    MyBase.Tables.Add(New ClientDataTable(ds.Tables("Client")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableClientStatus = CType(MyBase.Tables("ClientStatus"),ClientStatusDataTable)
            If (initTable = true) Then
                If (Not (Me.tableClientStatus) Is Nothing) Then
                    Me.tableClientStatus.InitVars
                End If
            End If
            Me.tableClient = CType(MyBase.Tables("Client"),ClientDataTable)
            If (initTable = true) Then
                If (Not (Me.tableClient) Is Nothing) Then
                    Me.tableClient.InitVars
                End If
            End If
            Me.relationClientStatus_Client = Me.Relations("ClientStatus_Client")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "ClientRegistrationDataSet"
            Me.Prefix = ""
            Me.Namespace = "http://www.activiser.com/schemas/ClientDevice.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableClientStatus = New ClientStatusDataTable
            MyBase.Tables.Add(Me.tableClientStatus)
            Me.tableClient = New ClientDataTable
            MyBase.Tables.Add(Me.tableClient)
            Me.relationClientStatus_Client = New Global.System.Data.DataRelation("ClientStatus_Client", New Global.System.Data.DataColumn() {Me.tableClientStatus.ClientStatusIdColumn}, New Global.System.Data.DataColumn() {Me.tableClient.ClientStatusIdColumn}, false)
            Me.Relations.Add(Me.relationClientStatus_Client)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeClientStatus() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeClient() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As ClientRegistrationDataSet = New ClientRegistrationDataSet
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        Public Delegate Sub ClientStatusRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientStatusRowChangeEvent)
        
        Public Delegate Sub ClientRowChangeEventHandler(ByVal sender As Object, ByVal e As ClientRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ClientStatusDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnClientStatusId As Global.System.Data.DataColumn
            
            Private columnDescription As Global.System.Data.DataColumn
            
            Private columnIsActive As Global.System.Data.DataColumn
            
            Private columnCreated As Global.System.Data.DataColumn
            
            Private columnCreatedBy As Global.System.Data.DataColumn
            
            Private columnModified As Global.System.Data.DataColumn
            
            Private columnModifiedBy As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "ClientStatus"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientStatusIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientStatusId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DescriptionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDescription
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property IsActiveColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnIsActive
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreated
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModified
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ClientStatusRow
                Get
                    Return CType(Me.Rows(index),ClientStatusRow)
                End Get
            End Property
            
            Public Event ClientStatusRowChanging As ClientStatusRowChangeEventHandler
            
            Public Event ClientStatusRowChanged As ClientStatusRowChangeEventHandler
            
            Public Event ClientStatusRowDeleting As ClientStatusRowChangeEventHandler
            
            Public Event ClientStatusRowDeleted As ClientStatusRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddClientStatusRow(ByVal row As ClientStatusRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddClientStatusRow(ByVal ClientStatusId As Integer, ByVal Description As String, ByVal IsActive As Boolean, ByVal Created As Date, ByVal CreatedBy As String, ByVal Modified As Date, ByVal ModifiedBy As String) As ClientStatusRow
                Dim rowClientStatusRow As ClientStatusRow = CType(Me.NewRow,ClientStatusRow)
                Dim columnValuesArray() As Object = New Object() {ClientStatusId, Description, IsActive, Created, CreatedBy, Modified, ModifiedBy}
                rowClientStatusRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowClientStatusRow)
                Return rowClientStatusRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByClientStatusId(ByVal ClientStatusId As Integer) As ClientStatusRow
                Return CType(Me.Rows.Find(New Object() {ClientStatusId}),ClientStatusRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ClientStatusDataTable = CType(MyBase.Clone,ClientStatusDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ClientStatusDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnClientStatusId = MyBase.Columns("ClientStatusId")
                Me.columnDescription = MyBase.Columns("Description")
                Me.columnIsActive = MyBase.Columns("IsActive")
                Me.columnCreated = MyBase.Columns("Created")
                Me.columnCreatedBy = MyBase.Columns("CreatedBy")
                Me.columnModified = MyBase.Columns("Modified")
                Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnClientStatusId = New Global.System.Data.DataColumn("ClientStatusId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientStatusId)
                Me.columnDescription = New Global.System.Data.DataColumn("Description", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDescription)
                Me.columnIsActive = New Global.System.Data.DataColumn("IsActive", GetType(Boolean), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnIsActive)
                Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreated)
                Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedBy)
                Me.columnModified = New Global.System.Data.DataColumn("Modified", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModified)
                Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedBy)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnClientStatusId}, true))
                Me.columnClientStatusId.AllowDBNull = false
                Me.columnClientStatusId.Unique = true
                Me.columnDescription.AllowDBNull = false
                Me.columnDescription.MaxLength = 50
                Me.columnIsActive.AllowDBNull = false
                Me.columnCreatedBy.MaxLength = 128
                Me.columnModifiedBy.MaxLength = 128
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewClientStatusRow() As ClientStatusRow
                Return CType(Me.NewRow,ClientStatusRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ClientStatusRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ClientStatusRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ClientStatusRowChangedEvent) Is Nothing) Then
                    RaiseEvent ClientStatusRowChanged(Me, New ClientStatusRowChangeEvent(CType(e.Row,ClientStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ClientStatusRowChangingEvent) Is Nothing) Then
                    RaiseEvent ClientStatusRowChanging(Me, New ClientStatusRowChangeEvent(CType(e.Row,ClientStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ClientStatusRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ClientStatusRowDeleted(Me, New ClientStatusRowChangeEvent(CType(e.Row,ClientStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ClientStatusRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ClientStatusRowDeleting(Me, New ClientStatusRowChangeEvent(CType(e.Row,ClientStatusRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveClientStatusRow(ByVal row As ClientStatusRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As ClientRegistrationDataSet = New ClientRegistrationDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ClientStatusDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class ClientDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnClientId As Global.System.Data.DataColumn
            
            Private columnSystemId As Global.System.Data.DataColumn
            
            Private columnAssignedToId As Global.System.Data.DataColumn
            
            Private columnClientStatusId As Global.System.Data.DataColumn
            
            Private columnNotes As Global.System.Data.DataColumn
            
            Private columnValidAfter As Global.System.Data.DataColumn
            
            Private columnValidBefore As Global.System.Data.DataColumn
            
            Private columnCreated As Global.System.Data.DataColumn
            
            Private columnCreatedBy As Global.System.Data.DataColumn
            
            Private columnModified As Global.System.Data.DataColumn
            
            Private columnModifiedBy As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Client"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SystemIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSystemId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property AssignedToIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAssignedToId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientStatusIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientStatusId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property NotesColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnNotes
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ValidAfterColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnValidAfter
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ValidBeforeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnValidBefore
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreated
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModified
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As ClientRow
                Get
                    Return CType(Me.Rows(index),ClientRow)
                End Get
            End Property
            
            Public Event ClientRowChanging As ClientRowChangeEventHandler
            
            Public Event ClientRowChanged As ClientRowChangeEventHandler
            
            Public Event ClientRowDeleting As ClientRowChangeEventHandler
            
            Public Event ClientRowDeleted As ClientRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddClientRow(ByVal row As ClientRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddClientRow(ByVal ClientId As System.Guid, ByVal SystemId As String, ByVal AssignedToId As System.Guid, ByVal parentClientStatusRowByClientStatus_Client As ClientStatusRow, ByVal Notes As String, ByVal ValidAfter As Date, ByVal ValidBefore As Date, ByVal Created As Date, ByVal CreatedBy As String, ByVal Modified As Date, ByVal ModifiedBy As String) As ClientRow
                Dim rowClientRow As ClientRow = CType(Me.NewRow,ClientRow)
                Dim columnValuesArray() As Object = New Object() {ClientId, SystemId, AssignedToId, Nothing, Notes, ValidAfter, ValidBefore, Created, CreatedBy, Modified, ModifiedBy}
                If (Not (parentClientStatusRowByClientStatus_Client) Is Nothing) Then
                    columnValuesArray(3) = parentClientStatusRowByClientStatus_Client(0)
                End If
                rowClientRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowClientRow)
                Return rowClientRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByClientId(ByVal ClientId As System.Guid) As ClientRow
                Return CType(Me.Rows.Find(New Object() {ClientId}),ClientRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As ClientDataTable = CType(MyBase.Clone,ClientDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New ClientDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnClientId = MyBase.Columns("ClientId")
                Me.columnSystemId = MyBase.Columns("SystemId")
                Me.columnAssignedToId = MyBase.Columns("AssignedToId")
                Me.columnClientStatusId = MyBase.Columns("ClientStatusId")
                Me.columnNotes = MyBase.Columns("Notes")
                Me.columnValidAfter = MyBase.Columns("ValidAfter")
                Me.columnValidBefore = MyBase.Columns("ValidBefore")
                Me.columnCreated = MyBase.Columns("Created")
                Me.columnCreatedBy = MyBase.Columns("CreatedBy")
                Me.columnModified = MyBase.Columns("Modified")
                Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnClientId = New Global.System.Data.DataColumn("ClientId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientId)
                Me.columnSystemId = New Global.System.Data.DataColumn("SystemId", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSystemId)
                Me.columnAssignedToId = New Global.System.Data.DataColumn("AssignedToId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAssignedToId)
                Me.columnClientStatusId = New Global.System.Data.DataColumn("ClientStatusId", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientStatusId)
                Me.columnNotes = New Global.System.Data.DataColumn("Notes", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnNotes)
                Me.columnValidAfter = New Global.System.Data.DataColumn("ValidAfter", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnValidAfter)
                Me.columnValidBefore = New Global.System.Data.DataColumn("ValidBefore", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnValidBefore)
                Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreated)
                Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedBy)
                Me.columnModified = New Global.System.Data.DataColumn("Modified", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModified)
                Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedBy)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnClientId}, true))
                Me.columnClientId.AllowDBNull = false
                Me.columnClientId.Unique = true
                Me.columnSystemId.AllowDBNull = false
                Me.columnSystemId.MaxLength = 128
                Me.columnNotes.MaxLength = 400
                Me.columnCreatedBy.MaxLength = 128
                Me.columnModifiedBy.MaxLength = 128
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewClientRow() As ClientRow
                Return CType(Me.NewRow,ClientRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New ClientRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(ClientRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.ClientRowChangedEvent) Is Nothing) Then
                    RaiseEvent ClientRowChanged(Me, New ClientRowChangeEvent(CType(e.Row,ClientRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.ClientRowChangingEvent) Is Nothing) Then
                    RaiseEvent ClientRowChanging(Me, New ClientRowChangeEvent(CType(e.Row,ClientRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.ClientRowDeletedEvent) Is Nothing) Then
                    RaiseEvent ClientRowDeleted(Me, New ClientRowChangeEvent(CType(e.Row,ClientRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.ClientRowDeletingEvent) Is Nothing) Then
                    RaiseEvent ClientRowDeleting(Me, New ClientRowChangeEvent(CType(e.Row,ClientRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveClientRow(ByVal row As ClientRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As ClientRegistrationDataSet = New ClientRegistrationDataSet
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "ClientDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ClientStatusRow
            Inherits Global.System.Data.DataRow
            
            Private tableClientStatus As ClientStatusDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableClientStatus = CType(Me.Table,ClientStatusDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientStatusId() As Integer
                Get
                    Return CType(Me(Me.tableClientStatus.ClientStatusIdColumn),Integer)
                End Get
                Set
                    Me(Me.tableClientStatus.ClientStatusIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Description() As String
                Get
                    Return CType(Me(Me.tableClientStatus.DescriptionColumn),String)
                End Get
                Set
                    Me(Me.tableClientStatus.DescriptionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property IsActive() As Boolean
                Get
                    Return CType(Me(Me.tableClientStatus.IsActiveColumn),Boolean)
                End Get
                Set
                    Me(Me.tableClientStatus.IsActiveColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Created() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableClientStatus.CreatedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Created' in table 'ClientStatus' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientStatus.CreatedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClientStatus.CreatedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'ClientStatus' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientStatus.CreatedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Modified() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableClientStatus.ModifiedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Modified' in table 'ClientStatus' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientStatus.ModifiedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClientStatus.ModifiedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'ClientStatus' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClientStatus.ModifiedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedNull() As Boolean
                Return Me.IsNull(Me.tableClientStatus.CreatedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedNull()
                Me(Me.tableClientStatus.CreatedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedByNull() As Boolean
                Return Me.IsNull(Me.tableClientStatus.CreatedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedByNull()
                Me(Me.tableClientStatus.CreatedByColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedNull() As Boolean
                Return Me.IsNull(Me.tableClientStatus.ModifiedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedNull()
                Me(Me.tableClientStatus.ModifiedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedByNull() As Boolean
                Return Me.IsNull(Me.tableClientStatus.ModifiedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedByNull()
                Me(Me.tableClientStatus.ModifiedByColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function GetClientRows() As ClientRow()
                If (Me.Table.ChildRelations("ClientStatus_Client") Is Nothing) Then
                    Return New ClientRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("ClientStatus_Client")),ClientRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class ClientRow
            Inherits Global.System.Data.DataRow
            
            Private tableClient As ClientDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableClient = CType(Me.Table,ClientDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientId() As System.Guid
                Get
                    Return CType(Me(Me.tableClient.ClientIdColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableClient.ClientIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property SystemId() As String
                Get
                    Return CType(Me(Me.tableClient.SystemIdColumn),String)
                End Get
                Set
                    Me(Me.tableClient.SystemIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property AssignedToId() As System.Guid
                Get
                    Try 
                        Return CType(Me(Me.tableClient.AssignedToIdColumn),Global.System.Guid)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'AssignedToId' in table 'Client' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClient.AssignedToIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientStatusId() As Integer
                Get
                    Try 
                        Return CType(Me(Me.tableClient.ClientStatusIdColumn),Integer)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ClientStatusId' in table 'Client' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClient.ClientStatusIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Notes() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClient.NotesColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Notes' in table 'Client' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClient.NotesColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ValidAfter() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableClient.ValidAfterColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ValidAfter' in table 'Client' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClient.ValidAfterColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ValidBefore() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableClient.ValidBeforeColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ValidBefore' in table 'Client' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClient.ValidBeforeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Created() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableClient.CreatedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Created' in table 'Client' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClient.CreatedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClient.CreatedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'Client' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClient.CreatedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Modified() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableClient.ModifiedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Modified' in table 'Client' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClient.ModifiedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableClient.ModifiedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'Client' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableClient.ModifiedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientStatusRow() As ClientStatusRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("ClientStatus_Client")),ClientStatusRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("ClientStatus_Client"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsAssignedToIdNull() As Boolean
                Return Me.IsNull(Me.tableClient.AssignedToIdColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetAssignedToIdNull()
                Me(Me.tableClient.AssignedToIdColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsClientStatusIdNull() As Boolean
                Return Me.IsNull(Me.tableClient.ClientStatusIdColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetClientStatusIdNull()
                Me(Me.tableClient.ClientStatusIdColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsNotesNull() As Boolean
                Return Me.IsNull(Me.tableClient.NotesColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetNotesNull()
                Me(Me.tableClient.NotesColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsValidAfterNull() As Boolean
                Return Me.IsNull(Me.tableClient.ValidAfterColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetValidAfterNull()
                Me(Me.tableClient.ValidAfterColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsValidBeforeNull() As Boolean
                Return Me.IsNull(Me.tableClient.ValidBeforeColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetValidBeforeNull()
                Me(Me.tableClient.ValidBeforeColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedNull() As Boolean
                Return Me.IsNull(Me.tableClient.CreatedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedNull()
                Me(Me.tableClient.CreatedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedByNull() As Boolean
                Return Me.IsNull(Me.tableClient.CreatedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedByNull()
                Me(Me.tableClient.CreatedByColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedNull() As Boolean
                Return Me.IsNull(Me.tableClient.ModifiedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedNull()
                Me(Me.tableClient.ModifiedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedByNull() As Boolean
                Return Me.IsNull(Me.tableClient.ModifiedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedByNull()
                Me(Me.tableClient.ModifiedByColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class ClientStatusRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ClientStatusRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As ClientStatusRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As ClientStatusRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class ClientRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As ClientRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As ClientRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As ClientRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
    
    'This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    '''<summary>
    '''Represents a strongly typed in-memory cache of data.
    '''</summary>
    <Global.System.ComponentModel.DesignerCategoryAttribute("code"),  _
     Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema"),  _
     Global.System.Xml.Serialization.XmlRootAttribute("FormDefinition")>  _
    Partial Public Class FormDefinition
        Inherits Global.System.Data.DataSet
        
        Private tableForm As FormDataTable
        
        Private tableFormField As FormFieldDataTable
        
        Private relationFK_FormField_Form As Global.System.Data.DataRelation
        
        Private _schemaSerializationMode As Global.System.Data.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Sub New()
            MyBase.New
            Me.BeginInit
            Me.InitClass
            Dim schemaChangedHandler As Global.System.ComponentModel.CollectionChangeEventHandler = AddressOf Me.SchemaChanged
            AddHandler MyBase.Tables.CollectionChanged, schemaChangedHandler
            AddHandler MyBase.Relations.CollectionChanged, schemaChangedHandler
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property Form() As FormDataTable
            Get
                Return Me.tableForm
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public ReadOnly Property FormField() As FormFieldDataTable
            Get
                Return Me.tableFormField
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Property SchemaSerializationMode() As Global.System.Data.SchemaSerializationMode
            Get
                Return Me._schemaSerializationMode
            End Get
            Set
                Me._schemaSerializationMode = value
            End Set
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Tables() As Global.System.Data.DataTableCollection
            Get
                Return MyBase.Tables
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shadows ReadOnly Property Relations() As Global.System.Data.DataRelationCollection
            Get
                Return MyBase.Relations
            End Get
        End Property
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub InitializeDerivedDataSet()
            Me.BeginInit
            Me.InitClass
            Me.EndInit
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Overrides Function Clone() As Global.System.Data.DataSet
            Dim cln As FormDefinition = CType(MyBase.Clone,FormDefinition)
            cln.InitVars
            cln.SchemaSerializationMode = Me.SchemaSerializationMode
            Return cln
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeTables() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function ShouldSerializeRelations() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Sub ReadXmlSerializable(ByVal reader As Global.System.Xml.XmlReader)
            If (Me.DetermineSchemaSerializationMode(reader) = Global.System.Data.SchemaSerializationMode.IncludeSchema) Then
                Me.Reset
                Dim ds As Global.System.Data.DataSet = New Global.System.Data.DataSet
                ds.ReadXml(reader)
                If (Not (ds.Tables("Form")) Is Nothing) Then
                    MyBase.Tables.Add(New FormDataTable(ds.Tables("Form")))
                End If
                If (Not (ds.Tables("FormField")) Is Nothing) Then
                    MyBase.Tables.Add(New FormFieldDataTable(ds.Tables("FormField")))
                End If
                Me.DataSetName = ds.DataSetName
                Me.Prefix = ds.Prefix
                Me.Namespace = ds.Namespace
                Me.Locale = ds.Locale
                Me.CaseSensitive = ds.CaseSensitive
                Me.EnforceConstraints = ds.EnforceConstraints
                Me.Merge(ds, false, Global.System.Data.MissingSchemaAction.Add)
                Me.InitVars
            Else
                Me.ReadXml(reader)
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Protected Overrides Function GetSchemaSerializable() As Global.System.Xml.Schema.XmlSchema
            Dim stream As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
            Me.WriteXmlSchema(New Global.System.Xml.XmlTextWriter(stream, Nothing))
            stream.Position = 0
            Return Global.System.Xml.Schema.XmlSchema.Read(New Global.System.Xml.XmlTextReader(stream), Nothing)
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars()
            Me.InitVars(true)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Friend Overloads Sub InitVars(ByVal initTable As Boolean)
            Me.tableForm = CType(MyBase.Tables("Form"),FormDataTable)
            If (initTable = true) Then
                If (Not (Me.tableForm) Is Nothing) Then
                    Me.tableForm.InitVars
                End If
            End If
            Me.tableFormField = CType(MyBase.Tables("FormField"),FormFieldDataTable)
            If (initTable = true) Then
                If (Not (Me.tableFormField) Is Nothing) Then
                    Me.tableFormField.InitVars
                End If
            End If
            Me.relationFK_FormField_Form = Me.Relations("FK_FormField_Form")
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub InitClass()
            Me.DataSetName = "FormDefinition"
            Me.Prefix = ""
            Me.Namespace = "http://www.activiser.com/Schemas/FormDefinition.xsd"
            Me.EnforceConstraints = true
            Me.SchemaSerializationMode = Global.System.Data.SchemaSerializationMode.IncludeSchema
            Me.tableForm = New FormDataTable
            MyBase.Tables.Add(Me.tableForm)
            Me.tableFormField = New FormFieldDataTable
            MyBase.Tables.Add(Me.tableFormField)
            Me.relationFK_FormField_Form = New Global.System.Data.DataRelation("FK_FormField_Form", New Global.System.Data.DataColumn() {Me.tableForm.FormIdColumn}, New Global.System.Data.DataColumn() {Me.tableFormField.FormIdColumn}, false)
            Me.Relations.Add(Me.relationFK_FormField_Form)
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeForm() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Function ShouldSerializeFormField() As Boolean
            Return false
        End Function
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Private Sub SchemaChanged(ByVal sender As Object, ByVal e As Global.System.ComponentModel.CollectionChangeEventArgs)
            If (e.Action = Global.System.ComponentModel.CollectionChangeAction.Remove) Then
                Me.InitVars
            End If
        End Sub
        
        <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
        Public Shared Function GetTypedDataSetSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
            Dim ds As FormDefinition = New FormDefinition
            Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
            Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
            Dim any As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
            any.Namespace = ds.Namespace
            sequence.Items.Add(any)
            type.Particle = sequence
            Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
            If xs.Contains(dsSchema.TargetNamespace) Then
                Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                Try 
                    Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                    dsSchema.Write(s1)
                    Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                    Do While schemas.MoveNext
                        schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                        s2.SetLength(0)
                        schema.Write(s2)
                        If (s1.Length = s2.Length) Then
                            s1.Position = 0
                            s2.Position = 0
                            
                            Do While ((s1.Position <> s1.Length)  _
                                        AndAlso (s1.ReadByte = s2.ReadByte))
                                
                                
                            Loop
                            If (s1.Position = s1.Length) Then
                                Return type
                            End If
                        End If
                        
                    Loop
                Finally
                    If (Not (s1) Is Nothing) Then
                        s1.Close
                    End If
                    If (Not (s2) Is Nothing) Then
                        s2.Close
                    End If
                End Try
            End If
            xs.Add(dsSchema)
            Return type
        End Function
        
        Public Delegate Sub FormRowChangeEventHandler(ByVal sender As Object, ByVal e As FormRowChangeEvent)
        
        Public Delegate Sub FormFieldRowChangeEventHandler(ByVal sender As Object, ByVal e As FormFieldRowChangeEvent)
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class FormDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnFormId As Global.System.Data.DataColumn
            
            Private columnClientMask As Global.System.Data.DataColumn
            
            Private columnFormName As Global.System.Data.DataColumn
            
            Private columnFormLabel As Global.System.Data.DataColumn
            
            Private columnEntityId As Global.System.Data.DataColumn
            
            Private columnEntityName As Global.System.Data.DataColumn
            
            Private columnEntityPK As Global.System.Data.DataColumn
            
            Private columnParentEntityId As Global.System.Data.DataColumn
            
            Private columnParentEntityName As Global.System.Data.DataColumn
            
            Private columnParentPK As Global.System.Data.DataColumn
            
            Private columnEntityParentFK As Global.System.Data.DataColumn
            
            Private columnMaxItems As Global.System.Data.DataColumn
            
            Private columnPriority As Global.System.Data.DataColumn
            
            Private columnLockCode As Global.System.Data.DataColumn
            
            Private columnParentFilter As Global.System.Data.DataColumn
            
            Private columnVersion As Global.System.Data.DataColumn
            
            Private columnEffectiveFrom As Global.System.Data.DataColumn
            
            Private columnEffectiveUntil As Global.System.Data.DataColumn
            
            Private columnCreated As Global.System.Data.DataColumn
            
            Private columnCreatedBy As Global.System.Data.DataColumn
            
            Private columnModified As Global.System.Data.DataColumn
            
            Private columnModifiedBy As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "Form"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FormIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFormId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientMaskColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientMask
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FormNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFormName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FormLabelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFormLabel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EntityIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEntityId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EntityNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEntityName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EntityPKColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEntityPK
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ParentEntityIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnParentEntityId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ParentEntityNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnParentEntityName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ParentPKColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnParentPK
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EntityParentFKColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEntityParentFK
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property MaxItemsColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMaxItems
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property PriorityColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPriority
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LockCodeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLockCode
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ParentFilterColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnParentFilter
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property VersionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnVersion
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EffectiveFromColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEffectiveFrom
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EffectiveUntilColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEffectiveUntil
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreated
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModified
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As FormRow
                Get
                    Return CType(Me.Rows(index),FormRow)
                End Get
            End Property
            
            Public Event FormRowChanging As FormRowChangeEventHandler
            
            Public Event FormRowChanged As FormRowChangeEventHandler
            
            Public Event FormRowDeleting As FormRowChangeEventHandler
            
            Public Event FormRowDeleted As FormRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddFormRow(ByVal row As FormRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddFormRow( _
                        ByVal FormId As System.Guid,  _
                        ByVal ClientMask As Integer,  _
                        ByVal FormName As String,  _
                        ByVal FormLabel As String,  _
                        ByVal EntityId As System.Guid,  _
                        ByVal EntityName As String,  _
                        ByVal EntityPK As String,  _
                        ByVal ParentEntityId As System.Guid,  _
                        ByVal ParentEntityName As String,  _
                        ByVal ParentPK As String,  _
                        ByVal EntityParentFK As String,  _
                        ByVal MaxItems As Integer,  _
                        ByVal Priority As Integer,  _
                        ByVal LockCode As Byte,  _
                        ByVal ParentFilter As String,  _
                        ByVal Version As Single,  _
                        ByVal EffectiveFrom As Date,  _
                        ByVal EffectiveUntil As Date,  _
                        ByVal Created As Date,  _
                        ByVal CreatedBy As String,  _
                        ByVal Modified As Date,  _
                        ByVal ModifiedBy As String) As FormRow
                Dim rowFormRow As FormRow = CType(Me.NewRow,FormRow)
                Dim columnValuesArray() As Object = New Object() {FormId, ClientMask, FormName, FormLabel, EntityId, EntityName, EntityPK, ParentEntityId, ParentEntityName, ParentPK, EntityParentFK, MaxItems, Priority, LockCode, ParentFilter, Version, EffectiveFrom, EffectiveUntil, Created, CreatedBy, Modified, ModifiedBy}
                rowFormRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowFormRow)
                Return rowFormRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByFormId(ByVal FormId As System.Guid) As FormRow
                Return CType(Me.Rows.Find(New Object() {FormId}),FormRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As FormDataTable = CType(MyBase.Clone,FormDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New FormDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnFormId = MyBase.Columns("FormId")
                Me.columnClientMask = MyBase.Columns("ClientMask")
                Me.columnFormName = MyBase.Columns("FormName")
                Me.columnFormLabel = MyBase.Columns("FormLabel")
                Me.columnEntityId = MyBase.Columns("EntityId")
                Me.columnEntityName = MyBase.Columns("EntityName")
                Me.columnEntityPK = MyBase.Columns("EntityPK")
                Me.columnParentEntityId = MyBase.Columns("ParentEntityId")
                Me.columnParentEntityName = MyBase.Columns("ParentEntityName")
                Me.columnParentPK = MyBase.Columns("ParentPK")
                Me.columnEntityParentFK = MyBase.Columns("EntityParentFK")
                Me.columnMaxItems = MyBase.Columns("MaxItems")
                Me.columnPriority = MyBase.Columns("Priority")
                Me.columnLockCode = MyBase.Columns("LockCode")
                Me.columnParentFilter = MyBase.Columns("ParentFilter")
                Me.columnVersion = MyBase.Columns("Version")
                Me.columnEffectiveFrom = MyBase.Columns("EffectiveFrom")
                Me.columnEffectiveUntil = MyBase.Columns("EffectiveUntil")
                Me.columnCreated = MyBase.Columns("Created")
                Me.columnCreatedBy = MyBase.Columns("CreatedBy")
                Me.columnModified = MyBase.Columns("Modified")
                Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnFormId = New Global.System.Data.DataColumn("FormId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFormId)
                Me.columnClientMask = New Global.System.Data.DataColumn("ClientMask", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientMask)
                Me.columnFormName = New Global.System.Data.DataColumn("FormName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFormName)
                Me.columnFormLabel = New Global.System.Data.DataColumn("FormLabel", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFormLabel)
                Me.columnEntityId = New Global.System.Data.DataColumn("EntityId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEntityId)
                Me.columnEntityName = New Global.System.Data.DataColumn("EntityName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEntityName)
                Me.columnEntityPK = New Global.System.Data.DataColumn("EntityPK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEntityPK)
                Me.columnParentEntityId = New Global.System.Data.DataColumn("ParentEntityId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnParentEntityId)
                Me.columnParentEntityName = New Global.System.Data.DataColumn("ParentEntityName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnParentEntityName)
                Me.columnParentPK = New Global.System.Data.DataColumn("ParentPK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnParentPK)
                Me.columnEntityParentFK = New Global.System.Data.DataColumn("EntityParentFK", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEntityParentFK)
                Me.columnMaxItems = New Global.System.Data.DataColumn("MaxItems", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMaxItems)
                Me.columnPriority = New Global.System.Data.DataColumn("Priority", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPriority)
                Me.columnLockCode = New Global.System.Data.DataColumn("LockCode", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLockCode)
                Me.columnParentFilter = New Global.System.Data.DataColumn("ParentFilter", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnParentFilter)
                Me.columnVersion = New Global.System.Data.DataColumn("Version", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnVersion)
                Me.columnEffectiveFrom = New Global.System.Data.DataColumn("EffectiveFrom", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEffectiveFrom)
                Me.columnEffectiveUntil = New Global.System.Data.DataColumn("EffectiveUntil", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEffectiveUntil)
                Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreated)
                Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedBy)
                Me.columnModified = New Global.System.Data.DataColumn("Modified", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModified)
                Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedBy)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFormId}, true))
                Me.columnFormId.AllowDBNull = false
                Me.columnFormId.ReadOnly = true
                Me.columnFormId.Unique = true
                Me.columnClientMask.AllowDBNull = false
                Me.columnFormName.AllowDBNull = false
                Me.columnFormName.MaxLength = 256
                Me.columnFormLabel.MaxLength = 32
                Me.columnEntityName.AllowDBNull = false
                Me.columnEntityName.MaxLength = 128
                Me.columnEntityPK.AllowDBNull = false
                Me.columnEntityPK.MaxLength = 128
                Me.columnParentEntityName.AllowDBNull = false
                Me.columnParentEntityName.MaxLength = 128
                Me.columnParentPK.AllowDBNull = false
                Me.columnParentPK.MaxLength = 128
                Me.columnEntityParentFK.AllowDBNull = false
                Me.columnEntityParentFK.MaxLength = 128
                Me.columnMaxItems.AllowDBNull = false
                Me.columnPriority.AllowDBNull = false
                Me.columnLockCode.AllowDBNull = false
                Me.columnParentFilter.MaxLength = 1000
                Me.columnCreatedBy.MaxLength = 128
                Me.columnModifiedBy.MaxLength = 128
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewFormRow() As FormRow
                Return CType(Me.NewRow,FormRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New FormRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(FormRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.FormRowChangedEvent) Is Nothing) Then
                    RaiseEvent FormRowChanged(Me, New FormRowChangeEvent(CType(e.Row,FormRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.FormRowChangingEvent) Is Nothing) Then
                    RaiseEvent FormRowChanging(Me, New FormRowChangeEvent(CType(e.Row,FormRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.FormRowDeletedEvent) Is Nothing) Then
                    RaiseEvent FormRowDeleted(Me, New FormRowChangeEvent(CType(e.Row,FormRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.FormRowDeletingEvent) Is Nothing) Then
                    RaiseEvent FormRowDeleting(Me, New FormRowChangeEvent(CType(e.Row,FormRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveFormRow(ByVal row As FormRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As FormDefinition = New FormDefinition
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "FormDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents the strongly named DataTable class.
        '''</summary>
        <Global.System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")>  _
        Partial Public Class FormFieldDataTable
            Inherits Global.System.Data.DataTable
            Implements Global.System.Collections.IEnumerable
            
            Private columnFormFieldId As Global.System.Data.DataColumn
            
            Private columnFormId As Global.System.Data.DataColumn
            
            Private columnClientMask As Global.System.Data.DataColumn
            
            Private columnAttributeId As Global.System.Data.DataColumn
            
            Private columnAttributeName As Global.System.Data.DataColumn
            
            Private columnLabel As Global.System.Data.DataColumn
            
            Private columnSortPriority As Global.System.Data.DataColumn
            
            Private columnDisplayOrder As Global.System.Data.DataColumn
            
            Private columnFieldType As Global.System.Data.DataColumn
            
            Private columnLockCode As Global.System.Data.DataColumn
            
            Private columnMinimumValue As Global.System.Data.DataColumn
            
            Private columnMaximumValue As Global.System.Data.DataColumn
            
            Private columnDecimalPlaces As Global.System.Data.DataColumn
            
            Private columnLines As Global.System.Data.DataColumn
            
            Private columnPosition As Global.System.Data.DataColumn
            
            Private columnWidth As Global.System.Data.DataColumn
            
            Private columnLabelWidth As Global.System.Data.DataColumn
            
            Private columnListDataSource As Global.System.Data.DataColumn
            
            Private columnListValueColumn As Global.System.Data.DataColumn
            
            Private columnListDisplayColumn As Global.System.Data.DataColumn
            
            Private columnListData As Global.System.Data.DataColumn
            
            Private columnVersion As Global.System.Data.DataColumn
            
            Private columnEffectiveFrom As Global.System.Data.DataColumn
            
            Private columnEffectiveUntil As Global.System.Data.DataColumn
            
            Private columnCreated As Global.System.Data.DataColumn
            
            Private columnCreatedBy As Global.System.Data.DataColumn
            
            Private columnModified As Global.System.Data.DataColumn
            
            Private columnModifiedBy As Global.System.Data.DataColumn
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New()
                MyBase.New
                Me.TableName = "FormField"
                Me.BeginInit
                Me.InitClass
                Me.EndInit
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal table As Global.System.Data.DataTable)
                MyBase.New
                Me.TableName = table.TableName
                If (table.CaseSensitive <> table.DataSet.CaseSensitive) Then
                    Me.CaseSensitive = table.CaseSensitive
                End If
                If (table.Locale.ToString <> table.DataSet.Locale.ToString) Then
                    Me.Locale = table.Locale
                End If
                If (table.Namespace <> table.DataSet.Namespace) Then
                    Me.Namespace = table.Namespace
                End If
                Me.Prefix = table.Prefix
                Me.MinimumCapacity = table.MinimumCapacity
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FormFieldIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFormFieldId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FormIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFormId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ClientMaskColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnClientMask
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property AttributeIdColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAttributeId
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property AttributeNameColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnAttributeName
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LabelColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLabel
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property SortPriorityColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnSortPriority
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DisplayOrderColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDisplayOrder
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property FieldTypeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnFieldType
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LockCodeColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLockCode
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property MinimumValueColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMinimumValue
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property MaximumValueColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnMaximumValue
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property DecimalPlacesColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnDecimalPlaces
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LinesColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLines
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property PositionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnPosition
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property WidthColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnWidth
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property LabelWidthColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnLabelWidth
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ListDataSourceColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnListDataSource
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ListValueColumnColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnListValueColumn
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ListDisplayColumnColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnListDisplayColumn
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ListDataColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnListData
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property VersionColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnVersion
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EffectiveFromColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEffectiveFrom
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property EffectiveUntilColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnEffectiveUntil
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreated
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property CreatedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnCreatedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModified
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property ModifiedByColumn() As Global.System.Data.DataColumn
                Get
                    Return Me.columnModifiedBy
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Count() As Integer
                Get
                    Return Me.Rows.Count
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Default ReadOnly Property Item(ByVal index As Integer) As FormFieldRow
                Get
                    Return CType(Me.Rows(index),FormFieldRow)
                End Get
            End Property
            
            Public Event FormFieldRowChanging As FormFieldRowChangeEventHandler
            
            Public Event FormFieldRowChanged As FormFieldRowChangeEventHandler
            
            Public Event FormFieldRowDeleting As FormFieldRowChangeEventHandler
            
            Public Event FormFieldRowDeleted As FormFieldRowChangeEventHandler
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Sub AddFormFieldRow(ByVal row As FormFieldRow)
                Me.Rows.Add(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overloads Function AddFormFieldRow( _
                        ByVal FormFieldId As System.Guid,  _
                        ByVal parentFormRowByFK_FormField_Form As FormRow,  _
                        ByVal ClientMask As Integer,  _
                        ByVal AttributeId As System.Guid,  _
                        ByVal AttributeName As String,  _
                        ByVal Label As String,  _
                        ByVal SortPriority As Short,  _
                        ByVal DisplayOrder As Byte,  _
                        ByVal FieldType As Byte,  _
                        ByVal LockCode As Byte,  _
                        ByVal MinimumValue As Decimal,  _
                        ByVal MaximumValue As Decimal,  _
                        ByVal DecimalPlaces As Byte,  _
                        ByVal Lines As Byte,  _
                        ByVal Position As String,  _
                        ByVal Width As Byte,  _
                        ByVal LabelWidth As Byte,  _
                        ByVal ListDataSource As String,  _
                        ByVal ListValueColumn As String,  _
                        ByVal ListDisplayColumn As String,  _
                        ByVal ListData As String,  _
                        ByVal Version As Single,  _
                        ByVal EffectiveFrom As Date,  _
                        ByVal EffectiveUntil As Date,  _
                        ByVal Created As Date,  _
                        ByVal CreatedBy As String,  _
                        ByVal Modified As Date,  _
                        ByVal ModifiedBy As String) As FormFieldRow
                Dim rowFormFieldRow As FormFieldRow = CType(Me.NewRow,FormFieldRow)
                Dim columnValuesArray() As Object = New Object() {FormFieldId, Nothing, ClientMask, AttributeId, AttributeName, Label, SortPriority, DisplayOrder, FieldType, LockCode, MinimumValue, MaximumValue, DecimalPlaces, Lines, Position, Width, LabelWidth, ListDataSource, ListValueColumn, ListDisplayColumn, ListData, Version, EffectiveFrom, EffectiveUntil, Created, CreatedBy, Modified, ModifiedBy}
                If (Not (parentFormRowByFK_FormField_Form) Is Nothing) Then
                    columnValuesArray(1) = parentFormRowByFK_FormField_Form(0)
                End If
                rowFormFieldRow.ItemArray = columnValuesArray
                Me.Rows.Add(rowFormFieldRow)
                Return rowFormFieldRow
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function FindByFormFieldId(ByVal FormFieldId As System.Guid) As FormFieldRow
                Return CType(Me.Rows.Find(New Object() {FormFieldId}),FormFieldRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overridable Function GetEnumerator() As Global.System.Collections.IEnumerator Implements Global.System.Collections.IEnumerable.GetEnumerator
                Return Me.Rows.GetEnumerator
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Overrides Function Clone() As Global.System.Data.DataTable
                Dim cln As FormFieldDataTable = CType(MyBase.Clone,FormFieldDataTable)
                cln.InitVars
                Return cln
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function CreateInstance() As Global.System.Data.DataTable
                Return New FormFieldDataTable
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub InitVars()
                Me.columnFormFieldId = MyBase.Columns("FormFieldId")
                Me.columnFormId = MyBase.Columns("FormId")
                Me.columnClientMask = MyBase.Columns("ClientMask")
                Me.columnAttributeId = MyBase.Columns("AttributeId")
                Me.columnAttributeName = MyBase.Columns("AttributeName")
                Me.columnLabel = MyBase.Columns("Label")
                Me.columnSortPriority = MyBase.Columns("SortPriority")
                Me.columnDisplayOrder = MyBase.Columns("DisplayOrder")
                Me.columnFieldType = MyBase.Columns("FieldType")
                Me.columnLockCode = MyBase.Columns("LockCode")
                Me.columnMinimumValue = MyBase.Columns("MinimumValue")
                Me.columnMaximumValue = MyBase.Columns("MaximumValue")
                Me.columnDecimalPlaces = MyBase.Columns("DecimalPlaces")
                Me.columnLines = MyBase.Columns("Lines")
                Me.columnPosition = MyBase.Columns("Position")
                Me.columnWidth = MyBase.Columns("Width")
                Me.columnLabelWidth = MyBase.Columns("LabelWidth")
                Me.columnListDataSource = MyBase.Columns("ListDataSource")
                Me.columnListValueColumn = MyBase.Columns("ListValueColumn")
                Me.columnListDisplayColumn = MyBase.Columns("ListDisplayColumn")
                Me.columnListData = MyBase.Columns("ListData")
                Me.columnVersion = MyBase.Columns("Version")
                Me.columnEffectiveFrom = MyBase.Columns("EffectiveFrom")
                Me.columnEffectiveUntil = MyBase.Columns("EffectiveUntil")
                Me.columnCreated = MyBase.Columns("Created")
                Me.columnCreatedBy = MyBase.Columns("CreatedBy")
                Me.columnModified = MyBase.Columns("Modified")
                Me.columnModifiedBy = MyBase.Columns("ModifiedBy")
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Private Sub InitClass()
                Me.columnFormFieldId = New Global.System.Data.DataColumn("FormFieldId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFormFieldId)
                Me.columnFormId = New Global.System.Data.DataColumn("FormId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFormId)
                Me.columnClientMask = New Global.System.Data.DataColumn("ClientMask", GetType(Integer), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnClientMask)
                Me.columnAttributeId = New Global.System.Data.DataColumn("AttributeId", GetType(Global.System.Guid), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAttributeId)
                Me.columnAttributeName = New Global.System.Data.DataColumn("AttributeName", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnAttributeName)
                Me.columnLabel = New Global.System.Data.DataColumn("Label", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLabel)
                Me.columnSortPriority = New Global.System.Data.DataColumn("SortPriority", GetType(Short), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnSortPriority)
                Me.columnDisplayOrder = New Global.System.Data.DataColumn("DisplayOrder", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDisplayOrder)
                Me.columnFieldType = New Global.System.Data.DataColumn("FieldType", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnFieldType)
                Me.columnLockCode = New Global.System.Data.DataColumn("LockCode", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLockCode)
                Me.columnMinimumValue = New Global.System.Data.DataColumn("MinimumValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMinimumValue)
                Me.columnMaximumValue = New Global.System.Data.DataColumn("MaximumValue", GetType(Decimal), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnMaximumValue)
                Me.columnDecimalPlaces = New Global.System.Data.DataColumn("DecimalPlaces", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnDecimalPlaces)
                Me.columnLines = New Global.System.Data.DataColumn("Lines", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLines)
                Me.columnPosition = New Global.System.Data.DataColumn("Position", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnPosition)
                Me.columnWidth = New Global.System.Data.DataColumn("Width", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnWidth)
                Me.columnLabelWidth = New Global.System.Data.DataColumn("LabelWidth", GetType(Byte), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnLabelWidth)
                Me.columnListDataSource = New Global.System.Data.DataColumn("ListDataSource", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnListDataSource)
                Me.columnListValueColumn = New Global.System.Data.DataColumn("ListValueColumn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnListValueColumn)
                Me.columnListDisplayColumn = New Global.System.Data.DataColumn("ListDisplayColumn", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnListDisplayColumn)
                Me.columnListData = New Global.System.Data.DataColumn("ListData", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnListData)
                Me.columnVersion = New Global.System.Data.DataColumn("Version", GetType(Single), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnVersion)
                Me.columnEffectiveFrom = New Global.System.Data.DataColumn("EffectiveFrom", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEffectiveFrom)
                Me.columnEffectiveUntil = New Global.System.Data.DataColumn("EffectiveUntil", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnEffectiveUntil)
                Me.columnCreated = New Global.System.Data.DataColumn("Created", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreated)
                Me.columnCreatedBy = New Global.System.Data.DataColumn("CreatedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnCreatedBy)
                Me.columnModified = New Global.System.Data.DataColumn("Modified", GetType(Date), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModified)
                Me.columnModifiedBy = New Global.System.Data.DataColumn("ModifiedBy", GetType(String), Nothing, Global.System.Data.MappingType.Element)
                MyBase.Columns.Add(Me.columnModifiedBy)
                Me.Constraints.Add(New Global.System.Data.UniqueConstraint("Constraint1", New Global.System.Data.DataColumn() {Me.columnFormFieldId}, true))
                Me.columnFormFieldId.AllowDBNull = false
                Me.columnFormFieldId.ReadOnly = true
                Me.columnFormFieldId.Unique = true
                Me.columnFormId.AllowDBNull = false
                Me.columnFormId.ReadOnly = true
                Me.columnClientMask.AllowDBNull = false
                Me.columnAttributeName.AllowDBNull = false
                Me.columnAttributeName.MaxLength = 128
                Me.columnLabel.MaxLength = 256
                Me.columnSortPriority.AllowDBNull = false
                Me.columnDisplayOrder.AllowDBNull = false
                Me.columnFieldType.AllowDBNull = false
                Me.columnLockCode.AllowDBNull = false
                Me.columnMinimumValue.AllowDBNull = false
                Me.columnMaximumValue.AllowDBNull = false
                Me.columnDecimalPlaces.AllowDBNull = false
                Me.columnLines.AllowDBNull = false
                Me.columnPosition.AllowDBNull = false
                Me.columnPosition.MaxLength = 2
                Me.columnWidth.AllowDBNull = false
                Me.columnLabelWidth.AllowDBNull = false
                Me.columnListDataSource.MaxLength = 128
                Me.columnListValueColumn.MaxLength = 128
                Me.columnListDisplayColumn.MaxLength = 128
                Me.columnListData.MaxLength = 2147483647
                Me.columnCreatedBy.MaxLength = 128
                Me.columnModifiedBy.MaxLength = 128
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function NewFormFieldRow() As FormFieldRow
                Return CType(Me.NewRow,FormFieldRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function NewRowFromBuilder(ByVal builder As Global.System.Data.DataRowBuilder) As Global.System.Data.DataRow
                Return New FormFieldRow(builder)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Function GetRowType() As Global.System.Type
                Return GetType(FormFieldRow)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanged(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanged(e)
                If (Not (Me.FormFieldRowChangedEvent) Is Nothing) Then
                    RaiseEvent FormFieldRowChanged(Me, New FormFieldRowChangeEvent(CType(e.Row,FormFieldRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowChanging(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowChanging(e)
                If (Not (Me.FormFieldRowChangingEvent) Is Nothing) Then
                    RaiseEvent FormFieldRowChanging(Me, New FormFieldRowChangeEvent(CType(e.Row,FormFieldRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleted(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleted(e)
                If (Not (Me.FormFieldRowDeletedEvent) Is Nothing) Then
                    RaiseEvent FormFieldRowDeleted(Me, New FormFieldRowChangeEvent(CType(e.Row,FormFieldRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Protected Overrides Sub OnRowDeleting(ByVal e As Global.System.Data.DataRowChangeEventArgs)
                MyBase.OnRowDeleting(e)
                If (Not (Me.FormFieldRowDeletingEvent) Is Nothing) Then
                    RaiseEvent FormFieldRowDeleting(Me, New FormFieldRowChangeEvent(CType(e.Row,FormFieldRow), e.Action))
                End If
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub RemoveFormFieldRow(ByVal row As FormFieldRow)
                Me.Rows.Remove(row)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Shared Function GetTypedTableSchema(ByVal xs As Global.System.Xml.Schema.XmlSchemaSet) As Global.System.Xml.Schema.XmlSchemaComplexType
                Dim type As Global.System.Xml.Schema.XmlSchemaComplexType = New Global.System.Xml.Schema.XmlSchemaComplexType
                Dim sequence As Global.System.Xml.Schema.XmlSchemaSequence = New Global.System.Xml.Schema.XmlSchemaSequence
                Dim ds As FormDefinition = New FormDefinition
                Dim any1 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any1.Namespace = "http://www.w3.org/2001/XMLSchema"
                any1.MinOccurs = New Decimal(0)
                any1.MaxOccurs = Decimal.MaxValue
                any1.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any1)
                Dim any2 As Global.System.Xml.Schema.XmlSchemaAny = New Global.System.Xml.Schema.XmlSchemaAny
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1"
                any2.MinOccurs = New Decimal(1)
                any2.ProcessContents = Global.System.Xml.Schema.XmlSchemaContentProcessing.Lax
                sequence.Items.Add(any2)
                Dim attribute1 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute1.Name = "namespace"
                attribute1.FixedValue = ds.Namespace
                type.Attributes.Add(attribute1)
                Dim attribute2 As Global.System.Xml.Schema.XmlSchemaAttribute = New Global.System.Xml.Schema.XmlSchemaAttribute
                attribute2.Name = "tableTypeName"
                attribute2.FixedValue = "FormFieldDataTable"
                type.Attributes.Add(attribute2)
                type.Particle = sequence
                Dim dsSchema As Global.System.Xml.Schema.XmlSchema = ds.GetSchemaSerializable
                If xs.Contains(dsSchema.TargetNamespace) Then
                    Dim s1 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Dim s2 As Global.System.IO.MemoryStream = New Global.System.IO.MemoryStream
                    Try 
                        Dim schema As Global.System.Xml.Schema.XmlSchema = Nothing
                        dsSchema.Write(s1)
                        Dim schemas As Global.System.Collections.IEnumerator = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator
                        Do While schemas.MoveNext
                            schema = CType(schemas.Current,Global.System.Xml.Schema.XmlSchema)
                            s2.SetLength(0)
                            schema.Write(s2)
                            If (s1.Length = s2.Length) Then
                                s1.Position = 0
                                s2.Position = 0
                                
                                Do While ((s1.Position <> s1.Length)  _
                                            AndAlso (s1.ReadByte = s2.ReadByte))
                                    
                                    
                                Loop
                                If (s1.Position = s1.Length) Then
                                    Return type
                                End If
                            End If
                            
                        Loop
                    Finally
                        If (Not (s1) Is Nothing) Then
                            s1.Close
                        End If
                        If (Not (s2) Is Nothing) Then
                            s2.Close
                        End If
                    End Try
                End If
                xs.Add(dsSchema)
                Return type
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class FormRow
            Inherits Global.System.Data.DataRow
            
            Private tableForm As FormDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableForm = CType(Me.Table,FormDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FormId() As System.Guid
                Get
                    Return CType(Me(Me.tableForm.FormIdColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableForm.FormIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientMask() As Integer
                Get
                    Return CType(Me(Me.tableForm.ClientMaskColumn),Integer)
                End Get
                Set
                    Me(Me.tableForm.ClientMaskColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FormName() As String
                Get
                    Return CType(Me(Me.tableForm.FormNameColumn),String)
                End Get
                Set
                    Me(Me.tableForm.FormNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FormLabel() As String
                Get
                    Try 
                        Return CType(Me(Me.tableForm.FormLabelColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'FormLabel' in table 'Form' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForm.FormLabelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EntityId() As System.Guid
                Get
                    Try 
                        Return CType(Me(Me.tableForm.EntityIdColumn),Global.System.Guid)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'EntityId' in table 'Form' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForm.EntityIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EntityName() As String
                Get
                    Return CType(Me(Me.tableForm.EntityNameColumn),String)
                End Get
                Set
                    Me(Me.tableForm.EntityNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EntityPK() As String
                Get
                    Return CType(Me(Me.tableForm.EntityPKColumn),String)
                End Get
                Set
                    Me(Me.tableForm.EntityPKColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ParentEntityId() As System.Guid
                Get
                    Try 
                        Return CType(Me(Me.tableForm.ParentEntityIdColumn),Global.System.Guid)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ParentEntityId' in table 'Form' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForm.ParentEntityIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ParentEntityName() As String
                Get
                    Return CType(Me(Me.tableForm.ParentEntityNameColumn),String)
                End Get
                Set
                    Me(Me.tableForm.ParentEntityNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ParentPK() As String
                Get
                    Return CType(Me(Me.tableForm.ParentPKColumn),String)
                End Get
                Set
                    Me(Me.tableForm.ParentPKColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EntityParentFK() As String
                Get
                    Return CType(Me(Me.tableForm.EntityParentFKColumn),String)
                End Get
                Set
                    Me(Me.tableForm.EntityParentFKColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property MaxItems() As Integer
                Get
                    Return CType(Me(Me.tableForm.MaxItemsColumn),Integer)
                End Get
                Set
                    Me(Me.tableForm.MaxItemsColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Priority() As Integer
                Get
                    Return CType(Me(Me.tableForm.PriorityColumn),Integer)
                End Get
                Set
                    Me(Me.tableForm.PriorityColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property LockCode() As Byte
                Get
                    Return CType(Me(Me.tableForm.LockCodeColumn),Byte)
                End Get
                Set
                    Me(Me.tableForm.LockCodeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ParentFilter() As String
                Get
                    Try 
                        Return CType(Me(Me.tableForm.ParentFilterColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ParentFilter' in table 'Form' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForm.ParentFilterColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Version() As Single
                Get
                    Try 
                        Return CType(Me(Me.tableForm.VersionColumn),Single)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Version' in table 'Form' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForm.VersionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EffectiveFrom() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableForm.EffectiveFromColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'EffectiveFrom' in table 'Form' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForm.EffectiveFromColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EffectiveUntil() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableForm.EffectiveUntilColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'EffectiveUntil' in table 'Form' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForm.EffectiveUntilColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Created() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableForm.CreatedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Created' in table 'Form' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForm.CreatedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableForm.CreatedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'Form' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForm.CreatedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Modified() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableForm.ModifiedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Modified' in table 'Form' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForm.ModifiedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableForm.ModifiedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'Form' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableForm.ModifiedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsFormLabelNull() As Boolean
                Return Me.IsNull(Me.tableForm.FormLabelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetFormLabelNull()
                Me(Me.tableForm.FormLabelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsEntityIdNull() As Boolean
                Return Me.IsNull(Me.tableForm.EntityIdColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetEntityIdNull()
                Me(Me.tableForm.EntityIdColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsParentEntityIdNull() As Boolean
                Return Me.IsNull(Me.tableForm.ParentEntityIdColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetParentEntityIdNull()
                Me(Me.tableForm.ParentEntityIdColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsParentFilterNull() As Boolean
                Return Me.IsNull(Me.tableForm.ParentFilterColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetParentFilterNull()
                Me(Me.tableForm.ParentFilterColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsVersionNull() As Boolean
                Return Me.IsNull(Me.tableForm.VersionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetVersionNull()
                Me(Me.tableForm.VersionColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsEffectiveFromNull() As Boolean
                Return Me.IsNull(Me.tableForm.EffectiveFromColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetEffectiveFromNull()
                Me(Me.tableForm.EffectiveFromColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsEffectiveUntilNull() As Boolean
                Return Me.IsNull(Me.tableForm.EffectiveUntilColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetEffectiveUntilNull()
                Me(Me.tableForm.EffectiveUntilColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedNull() As Boolean
                Return Me.IsNull(Me.tableForm.CreatedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedNull()
                Me(Me.tableForm.CreatedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedByNull() As Boolean
                Return Me.IsNull(Me.tableForm.CreatedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedByNull()
                Me(Me.tableForm.CreatedByColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedNull() As Boolean
                Return Me.IsNull(Me.tableForm.ModifiedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedNull()
                Me(Me.tableForm.ModifiedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedByNull() As Boolean
                Return Me.IsNull(Me.tableForm.ModifiedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedByNull()
                Me(Me.tableForm.ModifiedByColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function GetFormFieldRows() As FormFieldRow()
                If (Me.Table.ChildRelations("FK_FormField_Form") Is Nothing) Then
                    Return New FormFieldRow(-1) {}
                Else
                    Return CType(MyBase.GetChildRows(Me.Table.ChildRelations("FK_FormField_Form")),FormFieldRow())
                End If
            End Function
        End Class
        
        '''<summary>
        '''Represents strongly named DataRow class.
        '''</summary>
        Partial Public Class FormFieldRow
            Inherits Global.System.Data.DataRow
            
            Private tableFormField As FormFieldDataTable
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Friend Sub New(ByVal rb As Global.System.Data.DataRowBuilder)
                MyBase.New(rb)
                Me.tableFormField = CType(Me.Table,FormFieldDataTable)
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FormFieldId() As System.Guid
                Get
                    Return CType(Me(Me.tableFormField.FormFieldIdColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableFormField.FormFieldIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FormId() As System.Guid
                Get
                    Return CType(Me(Me.tableFormField.FormIdColumn),Global.System.Guid)
                End Get
                Set
                    Me(Me.tableFormField.FormIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ClientMask() As Integer
                Get
                    Return CType(Me(Me.tableFormField.ClientMaskColumn),Integer)
                End Get
                Set
                    Me(Me.tableFormField.ClientMaskColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property AttributeId() As System.Guid
                Get
                    Try 
                        Return CType(Me(Me.tableFormField.AttributeIdColumn),Global.System.Guid)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'AttributeId' in table 'FormField' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFormField.AttributeIdColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property AttributeName() As String
                Get
                    Return CType(Me(Me.tableFormField.AttributeNameColumn),String)
                End Get
                Set
                    Me(Me.tableFormField.AttributeNameColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Label() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFormField.LabelColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Label' in table 'FormField' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFormField.LabelColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property SortPriority() As Short
                Get
                    Return CType(Me(Me.tableFormField.SortPriorityColumn),Short)
                End Get
                Set
                    Me(Me.tableFormField.SortPriorityColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property DisplayOrder() As Byte
                Get
                    Return CType(Me(Me.tableFormField.DisplayOrderColumn),Byte)
                End Get
                Set
                    Me(Me.tableFormField.DisplayOrderColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FieldType() As Byte
                Get
                    Return CType(Me(Me.tableFormField.FieldTypeColumn),Byte)
                End Get
                Set
                    Me(Me.tableFormField.FieldTypeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property LockCode() As Byte
                Get
                    Return CType(Me(Me.tableFormField.LockCodeColumn),Byte)
                End Get
                Set
                    Me(Me.tableFormField.LockCodeColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property MinimumValue() As Decimal
                Get
                    Return CType(Me(Me.tableFormField.MinimumValueColumn),Decimal)
                End Get
                Set
                    Me(Me.tableFormField.MinimumValueColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property MaximumValue() As Decimal
                Get
                    Return CType(Me(Me.tableFormField.MaximumValueColumn),Decimal)
                End Get
                Set
                    Me(Me.tableFormField.MaximumValueColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property DecimalPlaces() As Byte
                Get
                    Return CType(Me(Me.tableFormField.DecimalPlacesColumn),Byte)
                End Get
                Set
                    Me(Me.tableFormField.DecimalPlacesColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Lines() As Byte
                Get
                    Return CType(Me(Me.tableFormField.LinesColumn),Byte)
                End Get
                Set
                    Me(Me.tableFormField.LinesColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Position() As String
                Get
                    Return CType(Me(Me.tableFormField.PositionColumn),String)
                End Get
                Set
                    Me(Me.tableFormField.PositionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Width() As Byte
                Get
                    Return CType(Me(Me.tableFormField.WidthColumn),Byte)
                End Get
                Set
                    Me(Me.tableFormField.WidthColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property LabelWidth() As Byte
                Get
                    Return CType(Me(Me.tableFormField.LabelWidthColumn),Byte)
                End Get
                Set
                    Me(Me.tableFormField.LabelWidthColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ListDataSource() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFormField.ListDataSourceColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ListDataSource' in table 'FormField' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFormField.ListDataSourceColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ListValueColumn() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFormField.ListValueColumnColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ListValueColumn' in table 'FormField' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFormField.ListValueColumnColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ListDisplayColumn() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFormField.ListDisplayColumnColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ListDisplayColumn' in table 'FormField' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFormField.ListDisplayColumnColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ListData() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFormField.ListDataColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ListData' in table 'FormField' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFormField.ListDataColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Version() As Single
                Get
                    Try 
                        Return CType(Me(Me.tableFormField.VersionColumn),Single)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Version' in table 'FormField' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFormField.VersionColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EffectiveFrom() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableFormField.EffectiveFromColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'EffectiveFrom' in table 'FormField' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFormField.EffectiveFromColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property EffectiveUntil() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableFormField.EffectiveUntilColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'EffectiveUntil' in table 'FormField' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFormField.EffectiveUntilColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Created() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableFormField.CreatedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Created' in table 'FormField' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFormField.CreatedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property CreatedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFormField.CreatedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'CreatedBy' in table 'FormField' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFormField.CreatedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property Modified() As Date
                Get
                    Try 
                        Return CType(Me(Me.tableFormField.ModifiedColumn),Date)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'Modified' in table 'FormField' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFormField.ModifiedColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property ModifiedBy() As String
                Get
                    Try 
                        Return CType(Me(Me.tableFormField.ModifiedByColumn),String)
                    Catch e As Global.System.InvalidCastException
                        Throw New Global.System.Data.StrongTypingException("The value for column 'ModifiedBy' in table 'FormField' is DBNull.", e)
                    End Try
                End Get
                Set
                    Me(Me.tableFormField.ModifiedByColumn) = value
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Property FormRow() As FormRow
                Get
                    Return CType(Me.GetParentRow(Me.Table.ParentRelations("FK_FormField_Form")),FormRow)
                End Get
                Set
                    Me.SetParentRow(value, Me.Table.ParentRelations("FK_FormField_Form"))
                End Set
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsAttributeIdNull() As Boolean
                Return Me.IsNull(Me.tableFormField.AttributeIdColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetAttributeIdNull()
                Me(Me.tableFormField.AttributeIdColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsLabelNull() As Boolean
                Return Me.IsNull(Me.tableFormField.LabelColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetLabelNull()
                Me(Me.tableFormField.LabelColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsListDataSourceNull() As Boolean
                Return Me.IsNull(Me.tableFormField.ListDataSourceColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetListDataSourceNull()
                Me(Me.tableFormField.ListDataSourceColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsListValueColumnNull() As Boolean
                Return Me.IsNull(Me.tableFormField.ListValueColumnColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetListValueColumnNull()
                Me(Me.tableFormField.ListValueColumnColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsListDisplayColumnNull() As Boolean
                Return Me.IsNull(Me.tableFormField.ListDisplayColumnColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetListDisplayColumnNull()
                Me(Me.tableFormField.ListDisplayColumnColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsListDataNull() As Boolean
                Return Me.IsNull(Me.tableFormField.ListDataColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetListDataNull()
                Me(Me.tableFormField.ListDataColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsVersionNull() As Boolean
                Return Me.IsNull(Me.tableFormField.VersionColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetVersionNull()
                Me(Me.tableFormField.VersionColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsEffectiveFromNull() As Boolean
                Return Me.IsNull(Me.tableFormField.EffectiveFromColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetEffectiveFromNull()
                Me(Me.tableFormField.EffectiveFromColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsEffectiveUntilNull() As Boolean
                Return Me.IsNull(Me.tableFormField.EffectiveUntilColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetEffectiveUntilNull()
                Me(Me.tableFormField.EffectiveUntilColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedNull() As Boolean
                Return Me.IsNull(Me.tableFormField.CreatedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedNull()
                Me(Me.tableFormField.CreatedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsCreatedByNull() As Boolean
                Return Me.IsNull(Me.tableFormField.CreatedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetCreatedByNull()
                Me(Me.tableFormField.CreatedByColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedNull() As Boolean
                Return Me.IsNull(Me.tableFormField.ModifiedColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedNull()
                Me(Me.tableFormField.ModifiedColumn) = Global.System.Convert.DBNull
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Function IsModifiedByNull() As Boolean
                Return Me.IsNull(Me.tableFormField.ModifiedByColumn)
            End Function
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub SetModifiedByNull()
                Me(Me.tableFormField.ModifiedByColumn) = Global.System.Convert.DBNull
            End Sub
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class FormRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As FormRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As FormRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As FormRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
        
        '''<summary>
        '''Row event argument class
        '''</summary>
        Public Class FormFieldRowChangeEvent
            Inherits Global.System.EventArgs
            
            Private eventRow As FormFieldRow
            
            Private eventAction As Global.System.Data.DataRowAction
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public Sub New(ByVal row As FormFieldRow, ByVal action As Global.System.Data.DataRowAction)
                MyBase.New
                Me.eventRow = row
                Me.eventAction = action
            End Sub
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Row() As FormFieldRow
                Get
                    Return Me.eventRow
                End Get
            End Property
            
            <Global.System.Diagnostics.DebuggerNonUserCodeAttribute()>  _
            Public ReadOnly Property Action() As Global.System.Data.DataRowAction
                Get
                    Return Me.eventAction
                End Get
            End Property
        End Class
    End Class
End Namespace
