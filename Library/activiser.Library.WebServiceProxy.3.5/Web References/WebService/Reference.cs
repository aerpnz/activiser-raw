//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.CompactFramework.Design.Data, Version 2.0.50727.3053.
// 
namespace activiser.Library.WebService {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
    
    
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="activiserSoap", Namespace="http://www.activiser.com/activiser")]
    public partial class activiser : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        /// <remarks/>
        public activiser() {
            this.Url = "http://localhost:4200/activiser/activiser.asmx";
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/TestGateway", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode TestGateway() {
            object[] results = this.Invoke("TestGateway", new object[0]);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTestGateway(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TestGateway", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndTestGateway(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/UploadEventLog", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadEventLog(string deviceId, EventLogDataSet dsEvent) {
            object[] results = this.Invoke("UploadEventLog", new object[] {
                        deviceId,
                        dsEvent});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadEventLog(string deviceId, EventLogDataSet dsEvent, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadEventLog", new object[] {
                        deviceId,
                        dsEvent}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUploadEventLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/UploadDeviceTrackingInfo", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadDeviceTrackingInfo(string deviceId, DeviceTrackingDataSet trackingData) {
            object[] results = this.Invoke("UploadDeviceTrackingInfo", new object[] {
                        deviceId,
                        trackingData});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadDeviceTrackingInfo(string deviceId, DeviceTrackingDataSet trackingData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadDeviceTrackingInfo", new object[] {
                        deviceId,
                        trackingData}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUploadDeviceTrackingInfo(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetCurrentConsultantList", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Utility.ActiveConsultantsDataTable GetCurrentConsultantList(string deviceId) {
            object[] results = this.Invoke("GetCurrentConsultantList", new object[] {
                        deviceId});
            return ((Utility.ActiveConsultantsDataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCurrentConsultantList(string deviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCurrentConsultantList", new object[] {
                        deviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public Utility.ActiveConsultantsDataTable EndGetCurrentConsultantList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Utility.ActiveConsultantsDataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetActiviserConsultantList", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet.ConsultantDataTable GetActiviserConsultantList(string deviceId) {
            object[] results = this.Invoke("GetActiviserConsultantList", new object[] {
                        deviceId});
            return ((activiserDataSet.ConsultantDataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetActiviserConsultantList(string deviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetActiviserConsultantList", new object[] {
                        deviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet.ConsultantDataTable EndGetActiviserConsultantList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet.ConsultantDataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetConsultantDetails", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet GetConsultantDetails(string deviceId, System.Guid UserUid, System.Guid ConsultantUid) {
            object[] results = this.Invoke("GetConsultantDetails", new object[] {
                        deviceId,
                        UserUid,
                        ConsultantUid});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetConsultantDetails(string deviceId, System.Guid UserUid, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetConsultantDetails", new object[] {
                        deviceId,
                        UserUid,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndGetConsultantDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/TestEmail", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string TestEmail(string deviceid, string host, int port, string sender, string recipients, string subject, string message) {
            object[] results = this.Invoke("TestEmail", new object[] {
                        deviceid,
                        host,
                        port,
                        sender,
                        recipients,
                        subject,
                        message});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginTestEmail(string deviceid, string host, int port, string sender, string recipients, string subject, string message, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("TestEmail", new object[] {
                        deviceid,
                        host,
                        port,
                        sender,
                        recipients,
                        subject,
                        message}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndTestEmail(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/CheckDeviceId", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckDeviceId(string DeviceIdString) {
            object[] results = this.Invoke("CheckDeviceId", new object[] {
                        DeviceIdString});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckDeviceId(string DeviceIdString, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckDeviceId", new object[] {
                        DeviceIdString}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndCheckDeviceId(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetServerTime", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetServerTime(string deviceId) {
            object[] results = this.Invoke("GetServerTime", new object[] {
                        deviceId});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServerTime(string deviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServerTime", new object[] {
                        deviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.DateTime EndGetServerTime(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetServerVersion", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetServerVersion(string deviceId) {
            object[] results = this.Invoke("GetServerVersion", new object[] {
                        deviceId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetServerVersion(string deviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetServerVersion", new object[] {
                        deviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetServerVersion(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/CheckConnection", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckConnection() {
            object[] results = this.Invoke("CheckConnection", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCheckConnection(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CheckConnection", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndCheckConnection(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetTerminology", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LanguageDataSet GetTerminology(string deviceId, System.Guid ConsultantUid, int ClientKey, int LanguageId, System.DateTime ModifiedSince) {
            object[] results = this.Invoke("GetTerminology", new object[] {
                        deviceId,
                        ConsultantUid,
                        ClientKey,
                        LanguageId,
                        ModifiedSince});
            return ((LanguageDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetTerminology(string deviceId, System.Guid ConsultantUid, int ClientKey, int LanguageId, System.DateTime ModifiedSince, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetTerminology", new object[] {
                        deviceId,
                        ConsultantUid,
                        ClientKey,
                        LanguageId,
                        ModifiedSince}, callback, asyncState);
        }
        
        /// <remarks/>
        public LanguageDataSet EndGetTerminology(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LanguageDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/WhoAmI", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string WhoAmI() {
            object[] results = this.Invoke("WhoAmI", new object[0]);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginWhoAmI(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("WhoAmI", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public string EndWhoAmI(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ClientGetUserDetails", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet.ConsultantDataTable ClientGetUserDetails(string deviceId, string userName, string passPhrase) {
            object[] results = this.Invoke("ClientGetUserDetails", new object[] {
                        deviceId,
                        userName,
                        passPhrase});
            return ((activiserDataSet.ConsultantDataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginClientGetUserDetails(string deviceId, string userName, string passPhrase, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ClientGetUserDetails", new object[] {
                        deviceId,
                        userName,
                        passPhrase}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet.ConsultantDataTable EndClientGetUserDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet.ConsultantDataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/SyncStart", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime SyncStart(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("SyncStart", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSyncStart(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SyncStart", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.DateTime EndSyncStart(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/SyncComplete", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime SyncComplete(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("SyncComplete", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSyncComplete(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SyncComplete", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.DateTime EndSyncComplete(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetLastSyncTime", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetLastSyncTime(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("GetLastSyncTime", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetLastSyncTime(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetLastSyncTime", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.DateTime EndGetLastSyncTime(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetSyncTime", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime GetSyncTime(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("GetSyncTime", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSyncTime(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSyncTime", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.DateTime EndGetSyncTime(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientSiteDetails", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet GetClientSiteDetails(string deviceId, System.Guid ConsultantUid, System.Guid clientSiteUid) {
            object[] results = this.Invoke("GetClientSiteDetails", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientSiteUid});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClientSiteDetails(string deviceId, System.Guid ConsultantUid, System.Guid clientSiteUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClientSiteDetails", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientSiteUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndGetClientSiteDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientSiteOpenRequests", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet GetClientSiteOpenRequests(string deviceId, System.Guid ConsultantUid, System.Guid clientSiteUid) {
            object[] results = this.Invoke("GetClientSiteOpenRequests", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientSiteUid});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClientSiteOpenRequests(string deviceId, System.Guid ConsultantUid, System.Guid clientSiteUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClientSiteOpenRequests", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientSiteUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndGetClientSiteOpenRequests(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetCurrentClientSiteList", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet.ClientSiteDataTable GetCurrentClientSiteList(string deviceId) {
            object[] results = this.Invoke("GetCurrentClientSiteList", new object[] {
                        deviceId});
            return ((activiserDataSet.ClientSiteDataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetCurrentClientSiteList(string deviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetCurrentClientSiteList", new object[] {
                        deviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet.ClientSiteDataTable EndGetCurrentClientSiteList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet.ClientSiteDataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSet", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet GetClientDataSet(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("GetClientDataSet", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClientDataSet(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClientDataSet", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndGetClientDataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSeXml", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetClientDataSeXml(string deviceId, string ConsultantUid) {
            object[] results = this.Invoke("GetClientDataSeXml", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClientDataSeXml(string deviceId, string ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClientDataSeXml", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndGetClientDataSeXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSetAsXml", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetClientDataSetAsXml(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("GetClientDataSetAsXml", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClientDataSetAsXml(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClientDataSetAsXml", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndGetClientDataSetAsXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSetCompressed", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetClientDataSetCompressed(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("GetClientDataSetCompressed", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClientDataSetCompressed(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClientDataSetCompressed", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetClientDataSetCompressed(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSetUpdates", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet GetClientDataSetUpdates(string deviceId, System.Guid ConsultantUid, System.DateTime Since) {
            object[] results = this.Invoke("GetClientDataSetUpdates", new object[] {
                        deviceId,
                        ConsultantUid,
                        Since});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClientDataSetUpdates(string deviceId, System.Guid ConsultantUid, System.DateTime Since, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClientDataSetUpdates", new object[] {
                        deviceId,
                        ConsultantUid,
                        Since}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndGetClientDataSetUpdates(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSetUpdatesAsXml", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode GetClientDataSetUpdatesAsXml(string deviceId, string ConsultantUid, System.DateTime Since) {
            object[] results = this.Invoke("GetClientDataSetUpdatesAsXml", new object[] {
                        deviceId,
                        ConsultantUid,
                        Since});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClientDataSetUpdatesAsXml(string deviceId, string ConsultantUid, System.DateTime Since, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClientDataSetUpdatesAsXml", new object[] {
                        deviceId,
                        ConsultantUid,
                        Since}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndGetClientDataSetUpdatesAsXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSetUpdatesCompressed", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] GetClientDataSetUpdatesCompressed(string deviceId, string ConsultantUid, System.DateTime Since) {
            object[] results = this.Invoke("GetClientDataSetUpdatesCompressed", new object[] {
                        deviceId,
                        ConsultantUid,
                        Since});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClientDataSetUpdatesCompressed(string deviceId, string ConsultantUid, System.DateTime Since, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClientDataSetUpdatesCompressed", new object[] {
                        deviceId,
                        ConsultantUid,
                        Since}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndGetClientDataSetUpdatesCompressed(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/UploadClientDataSetUpdates", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UploadResults UploadClientDataSetUpdates(string deviceId, System.Guid consultantUid, activiserDataSet clientDataSet) {
            object[] results = this.Invoke("UploadClientDataSetUpdates", new object[] {
                        deviceId,
                        consultantUid,
                        clientDataSet});
            return ((UploadResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadClientDataSetUpdates(string deviceId, System.Guid consultantUid, activiserDataSet clientDataSet, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadClientDataSetUpdates", new object[] {
                        deviceId,
                        consultantUid,
                        clientDataSet}, callback, asyncState);
        }
        
        /// <remarks/>
        public UploadResults EndUploadClientDataSetUpdates(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UploadResults)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/UploadClientDataSetUpdatesAsXml", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode UploadClientDataSetUpdatesAsXml(string deviceId, string consultantUid, System.Xml.XmlNode clientData) {
            object[] results = this.Invoke("UploadClientDataSetUpdatesAsXml", new object[] {
                        deviceId,
                        consultantUid,
                        clientData});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadClientDataSetUpdatesAsXml(string deviceId, string consultantUid, System.Xml.XmlNode clientData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadClientDataSetUpdatesAsXml", new object[] {
                        deviceId,
                        consultantUid,
                        clientData}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndUploadClientDataSetUpdatesAsXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/UploadClientDataSetUpdatesCompressed", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] UploadClientDataSetUpdatesCompressed(string deviceId, string consultantUid, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] clientData) {
            object[] results = this.Invoke("UploadClientDataSetUpdatesCompressed", new object[] {
                        deviceId,
                        consultantUid,
                        clientData});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadClientDataSetUpdatesCompressed(string deviceId, string consultantUid, byte[] clientData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadClientDataSetUpdatesCompressed", new object[] {
                        deviceId,
                        consultantUid,
                        clientData}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndUploadClientDataSetUpdatesCompressed(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientSettings", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ClientSettingDataSet.ClientSettingDataTable GetClientSettings(string deviceId, string consultantUid, int clientMask, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> since) {
            object[] results = this.Invoke("GetClientSettings", new object[] {
                        deviceId,
                        consultantUid,
                        clientMask,
                        since});
            return ((ClientSettingDataSet.ClientSettingDataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClientSettings(string deviceId, string consultantUid, int clientMask, System.Nullable<System.DateTime> since, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClientSettings", new object[] {
                        deviceId,
                        consultantUid,
                        clientMask,
                        since}, callback, asyncState);
        }
        
        /// <remarks/>
        public ClientSettingDataSet.ClientSettingDataTable EndGetClientSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ClientSettingDataSet.ClientSettingDataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetShortRequestList", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet GetShortRequestList(string deviceId, string ConsultantUid) {
            object[] results = this.Invoke("GetShortRequestList", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetShortRequestList(string deviceId, string ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetShortRequestList", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndGetShortRequestList(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetRequestDetails", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet GetRequestDetails(string deviceId, System.Guid ConsultantUid, System.Guid RequestUid) {
            object[] results = this.Invoke("GetRequestDetails", new object[] {
                        deviceId,
                        ConsultantUid,
                        RequestUid});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRequestDetails(string deviceId, System.Guid ConsultantUid, System.Guid RequestUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRequestDetails", new object[] {
                        deviceId,
                        ConsultantUid,
                        RequestUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndGetRequestDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetNewRequestData", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet GetNewRequestData(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("GetNewRequestData", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetNewRequestData(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetNewRequestData", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndGetNewRequestData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetJobHistory", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetJobHistory(string deviceId, System.Guid ConsultantUid, System.Guid ClientSiteUid, int jobLimit, int ageLimitDays) {
            object[] results = this.Invoke("GetJobHistory", new object[] {
                        deviceId,
                        ConsultantUid,
                        ClientSiteUid,
                        jobLimit,
                        ageLimitDays});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetJobHistory(string deviceId, System.Guid ConsultantUid, System.Guid ClientSiteUid, int jobLimit, int ageLimitDays, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetJobHistory", new object[] {
                        deviceId,
                        ConsultantUid,
                        ClientSiteUid,
                        jobLimit,
                        ageLimitDays}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetJobHistory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetJobDetails", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet GetJobDetails(string deviceId, System.Guid UserUid, System.Guid JobUid) {
            object[] results = this.Invoke("GetJobDetails", new object[] {
                        deviceId,
                        UserUid,
                        JobUid});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetJobDetails(string deviceId, System.Guid UserUid, System.Guid JobUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetJobDetails", new object[] {
                        deviceId,
                        UserUid,
                        JobUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndGetJobDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/UploadUserItems", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadUserItems(string deviceId, System.Guid ConsultantUid, ConsultantItemDataSet items) {
            object[] results = this.Invoke("UploadUserItems", new object[] {
                        deviceId,
                        ConsultantUid,
                        items});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadUserItems(string deviceId, System.Guid ConsultantUid, ConsultantItemDataSet items, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadUserItems", new object[] {
                        deviceId,
                        ConsultantUid,
                        items}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUploadUserItems(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/UploadUserSettings", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool UploadUserSettings(string deviceId, System.Guid ConsultantUid, ConsultantSettingDataSet settings) {
            object[] results = this.Invoke("UploadUserSettings", new object[] {
                        deviceId,
                        ConsultantUid,
                        settings});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUploadUserSettings(string deviceId, System.Guid ConsultantUid, ConsultantSettingDataSet settings, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UploadUserSettings", new object[] {
                        deviceId,
                        ConsultantUid,
                        settings}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndUploadUserSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetUserProfile", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ConsultantSettingDataSet GetUserProfile(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("GetUserProfile", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((ConsultantSettingDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserProfile(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserProfile", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public ConsultantSettingDataSet EndGetUserProfile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ConsultantSettingDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetUserItems", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ConsultantItemDataSet GetUserItems(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("GetUserItems", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((ConsultantItemDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetUserItems(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetUserItems", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public ConsultantItemDataSet EndGetUserItems(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ConsultantItemDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetAutoSyncInterval", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetAutoSyncInterval(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("GetAutoSyncInterval", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetAutoSyncInterval(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetAutoSyncInterval", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetAutoSyncInterval(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetConsultantSyncInterval", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int GetConsultantSyncInterval(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("GetConsultantSyncInterval", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetConsultantSyncInterval(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetConsultantSyncInterval", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndGetConsultantSyncInterval(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleChangeUserPassPhrase", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConsoleChangeUserPassPhrase(string deviceid, Utility.UserDataTable user, string oldPassPhrase, string passPhrase) {
            object[] results = this.Invoke("ConsoleChangeUserPassPhrase", new object[] {
                        deviceid,
                        user,
                        oldPassPhrase,
                        passPhrase});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleChangeUserPassPhrase(string deviceid, Utility.UserDataTable user, string oldPassPhrase, string passPhrase, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleChangeUserPassPhrase", new object[] {
                        deviceid,
                        user,
                        oldPassPhrase,
                        passPhrase}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndConsoleChangeUserPassPhrase(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleLinkNetworkUser", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConsoleLinkNetworkUser(string deviceid, Utility.UserDataTable user, string passPhrase) {
            object[] results = this.Invoke("ConsoleLinkNetworkUser", new object[] {
                        deviceid,
                        user,
                        passPhrase});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleLinkNetworkUser(string deviceid, Utility.UserDataTable user, string passPhrase, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleLinkNetworkUser", new object[] {
                        deviceid,
                        user,
                        passPhrase}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndConsoleLinkNetworkUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDataSet", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet ConsoleGetDataSet(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("ConsoleGetDataSet", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetDataSet(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetDataSet", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndConsoleGetDataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDataSetXml", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ConsoleGetDataSetXml(string deviceId, string ConsultantUid) {
            object[] results = this.Invoke("ConsoleGetDataSetXml", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetDataSetXml(string deviceId, string ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetDataSetXml", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndConsoleGetDataSetXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDataSetAsXml", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ConsoleGetDataSetAsXml(string deviceId, string ConsultantUid) {
            object[] results = this.Invoke("ConsoleGetDataSetAsXml", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetDataSetAsXml(string deviceId, string ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetDataSetAsXml", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndConsoleGetDataSetAsXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDataSetCompressed", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ConsoleGetDataSetCompressed(string deviceId, string ConsultantUid) {
            object[] results = this.Invoke("ConsoleGetDataSetCompressed", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetDataSetCompressed(string deviceId, string ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetDataSetCompressed", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndConsoleGetDataSetCompressed(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDataSetUpdates", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet ConsoleGetDataSetUpdates(string deviceId, System.Guid ConsultantUid, System.DateTime ModifiedSince) {
            object[] results = this.Invoke("ConsoleGetDataSetUpdates", new object[] {
                        deviceId,
                        ConsultantUid,
                        ModifiedSince});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetDataSetUpdates(string deviceId, System.Guid ConsultantUid, System.DateTime ModifiedSince, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetDataSetUpdates", new object[] {
                        deviceId,
                        ConsultantUid,
                        ModifiedSince}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndConsoleGetDataSetUpdates(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDataSetUpdatesAsXml", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode ConsoleGetDataSetUpdatesAsXml(string deviceId, System.Guid ConsultantUid, System.DateTime ModifiedSince) {
            object[] results = this.Invoke("ConsoleGetDataSetUpdatesAsXml", new object[] {
                        deviceId,
                        ConsultantUid,
                        ModifiedSince});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetDataSetUpdatesAsXml(string deviceId, System.Guid ConsultantUid, System.DateTime ModifiedSince, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetDataSetUpdatesAsXml", new object[] {
                        deviceId,
                        ConsultantUid,
                        ModifiedSince}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndConsoleGetDataSetUpdatesAsXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDataSetUpdatesCompressed", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")]
        public byte[] ConsoleGetDataSetUpdatesCompressed(string deviceId, System.Guid ConsultantUid, System.DateTime ModifiedSince) {
            object[] results = this.Invoke("ConsoleGetDataSetUpdatesCompressed", new object[] {
                        deviceId,
                        ConsultantUid,
                        ModifiedSince});
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetDataSetUpdatesCompressed(string deviceId, System.Guid ConsultantUid, System.DateTime ModifiedSince, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetDataSetUpdatesCompressed", new object[] {
                        deviceId,
                        ConsultantUid,
                        ModifiedSince}, callback, asyncState);
        }
        
        /// <remarks/>
        public byte[] EndConsoleGetDataSetUpdatesCompressed(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDeviceTrackingData", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DeviceTrackingDataSet.DeviceTrackingDataTable ConsoleGetDeviceTrackingData(string deviceId, System.Guid ConsultantUid, System.DateTime since, System.DateTime until) {
            object[] results = this.Invoke("ConsoleGetDeviceTrackingData", new object[] {
                        deviceId,
                        ConsultantUid,
                        since,
                        until});
            return ((DeviceTrackingDataSet.DeviceTrackingDataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetDeviceTrackingData(string deviceId, System.Guid ConsultantUid, System.DateTime since, System.DateTime until, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetDeviceTrackingData", new object[] {
                        deviceId,
                        ConsultantUid,
                        since,
                        until}, callback, asyncState);
        }
        
        /// <remarks/>
        public DeviceTrackingDataSet.DeviceTrackingDataTable EndConsoleGetDeviceTrackingData(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DeviceTrackingDataSet.DeviceTrackingDataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetDeviceTrackingDataAsAt", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DeviceTrackingDataSet.DeviceTrackingDataTable ConsoleGetDeviceTrackingDataAsAt(string deviceId, System.Guid consultantUid, System.DateTime asAt) {
            object[] results = this.Invoke("ConsoleGetDeviceTrackingDataAsAt", new object[] {
                        deviceId,
                        consultantUid,
                        asAt});
            return ((DeviceTrackingDataSet.DeviceTrackingDataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetDeviceTrackingDataAsAt(string deviceId, System.Guid consultantUid, System.DateTime asAt, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetDeviceTrackingDataAsAt", new object[] {
                        deviceId,
                        consultantUid,
                        asAt}, callback, asyncState);
        }
        
        /// <remarks/>
        public DeviceTrackingDataSet.DeviceTrackingDataTable EndConsoleGetDeviceTrackingDataAsAt(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DeviceTrackingDataSet.DeviceTrackingDataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetSyncLog", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SyncLogDataSet ConsoleGetSyncLog(string deviceId, System.Guid ConsultantUid, System.DateTime Since) {
            object[] results = this.Invoke("ConsoleGetSyncLog", new object[] {
                        deviceId,
                        ConsultantUid,
                        Since});
            return ((SyncLogDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetSyncLog(string deviceId, System.Guid ConsultantUid, System.DateTime Since, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetSyncLog", new object[] {
                        deviceId,
                        ConsultantUid,
                        Since}, callback, asyncState);
        }
        
        /// <remarks/>
        public SyncLogDataSet EndConsoleGetSyncLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SyncLogDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetEventLog", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public EventLogDataSet ConsoleGetEventLog(string deviceId, System.Guid ConsultantUid, System.DateTime Since) {
            object[] results = this.Invoke("ConsoleGetEventLog", new object[] {
                        deviceId,
                        ConsultantUid,
                        Since});
            return ((EventLogDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetEventLog(string deviceId, System.Guid ConsultantUid, System.DateTime Since, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetEventLog", new object[] {
                        deviceId,
                        ConsultantUid,
                        Since}, callback, asyncState);
        }
        
        /// <remarks/>
        public EventLogDataSet EndConsoleGetEventLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((EventLogDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUpdateEventLog", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConsoleUpdateEventLog(string deviceId, System.Guid consultantUid, EventLogDataSet eventLog) {
            object[] results = this.Invoke("ConsoleUpdateEventLog", new object[] {
                        deviceId,
                        consultantUid,
                        eventLog});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleUpdateEventLog(string deviceId, System.Guid consultantUid, EventLogDataSet eventLog, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleUpdateEventLog", new object[] {
                        deviceId,
                        consultantUid,
                        eventLog}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndConsoleUpdateEventLog(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetSettings", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ClientSettingDataSet.ClientSettingDataTable ConsoleGetSettings(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("ConsoleGetSettings", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((ClientSettingDataSet.ClientSettingDataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetSettings(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetSettings", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public ClientSettingDataSet.ClientSettingDataTable EndConsoleGetSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ClientSettingDataSet.ClientSettingDataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUpdateSettings", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConsoleUpdateSettings(string deviceId, System.Guid ConsultantUid, ClientSettingDataSet.ClientSettingDataTable settings) {
            object[] results = this.Invoke("ConsoleUpdateSettings", new object[] {
                        deviceId,
                        ConsultantUid,
                        settings});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleUpdateSettings(string deviceId, System.Guid ConsultantUid, ClientSettingDataSet.ClientSettingDataTable settings, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleUpdateSettings", new object[] {
                        deviceId,
                        ConsultantUid,
                        settings}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndConsoleUpdateSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetClientSettings", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ClientSettingDataSet.ClientSettingDataTable ConsoleGetClientSettings(string deviceId, System.Guid ConsultantUid) {
            object[] results = this.Invoke("ConsoleGetClientSettings", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((ClientSettingDataSet.ClientSettingDataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetClientSettings(string deviceId, System.Guid ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetClientSettings", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public ClientSettingDataSet.ClientSettingDataTable EndConsoleGetClientSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ClientSettingDataSet.ClientSettingDataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUpdateClientSettings", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConsoleUpdateClientSettings(string deviceId, System.Guid ConsultantUid, ClientSettingDataSet.ClientSettingDataTable settings) {
            object[] results = this.Invoke("ConsoleUpdateClientSettings", new object[] {
                        deviceId,
                        ConsultantUid,
                        settings});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleUpdateClientSettings(string deviceId, System.Guid ConsultantUid, ClientSettingDataSet.ClientSettingDataTable settings, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleUpdateClientSettings", new object[] {
                        deviceId,
                        ConsultantUid,
                        settings}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndConsoleUpdateClientSettings(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetLastServerSettingChange", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.DateTime ConsoleGetLastServerSettingChange(string deviceId) {
            object[] results = this.Invoke("ConsoleGetLastServerSettingChange", new object[] {
                        deviceId});
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetLastServerSettingChange(string deviceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetLastServerSettingChange", new object[] {
                        deviceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.DateTime EndConsoleGetLastServerSettingChange(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.DateTime)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetServerProfile", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Utility.ServerSettingDataTable ConsoleGetServerProfile(string deviceId, System.Guid ConsultantUid, bool current) {
            object[] results = this.Invoke("ConsoleGetServerProfile", new object[] {
                        deviceId,
                        ConsultantUid,
                        current});
            return ((Utility.ServerSettingDataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetServerProfile(string deviceId, System.Guid ConsultantUid, bool current, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetServerProfile", new object[] {
                        deviceId,
                        ConsultantUid,
                        current}, callback, asyncState);
        }
        
        /// <remarks/>
        public Utility.ServerSettingDataTable EndConsoleGetServerProfile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Utility.ServerSettingDataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUpdateServerProfile", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConsoleUpdateServerProfile(string deviceId, System.Guid ConsultantUid, Utility.ServerSettingDataTable serverProfile) {
            object[] results = this.Invoke("ConsoleUpdateServerProfile", new object[] {
                        deviceId,
                        ConsultantUid,
                        serverProfile});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleUpdateServerProfile(string deviceId, System.Guid ConsultantUid, Utility.ServerSettingDataTable serverProfile, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleUpdateServerProfile", new object[] {
                        deviceId,
                        ConsultantUid,
                        serverProfile}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndConsoleUpdateServerProfile(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleGetClientDevices", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ClientRegistrationDataSet ConsoleGetClientDevices(string deviceId, System.Guid ConsultantUid, bool current) {
            object[] results = this.Invoke("ConsoleGetClientDevices", new object[] {
                        deviceId,
                        ConsultantUid,
                        current});
            return ((ClientRegistrationDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleGetClientDevices(string deviceId, System.Guid ConsultantUid, bool current, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleGetClientDevices", new object[] {
                        deviceId,
                        ConsultantUid,
                        current}, callback, asyncState);
        }
        
        /// <remarks/>
        public ClientRegistrationDataSet EndConsoleGetClientDevices(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ClientRegistrationDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUpdateClientDevices", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool ConsoleUpdateClientDevices(string deviceId, System.Guid ConsultantUid, ClientRegistrationDataSet clientDevices) {
            object[] results = this.Invoke("ConsoleUpdateClientDevices", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientDevices});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleUpdateClientDevices(string deviceId, System.Guid ConsultantUid, ClientRegistrationDataSet clientDevices, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleUpdateClientDevices", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientDevices}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndConsoleUpdateClientDevices(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUploadDataSetUpdates", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ConsoleUploadDataSetUpdates(string deviceId, System.Guid ConsultantUid, activiserDataSet consoleDataSet) {
            object[] results = this.Invoke("ConsoleUploadDataSetUpdates", new object[] {
                        deviceId,
                        ConsultantUid,
                        consoleDataSet});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleUploadDataSetUpdates(string deviceId, System.Guid ConsultantUid, activiserDataSet consoleDataSet, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleUploadDataSetUpdates", new object[] {
                        deviceId,
                        ConsultantUid,
                        consoleDataSet}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndConsoleUploadDataSetUpdates(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUploadDataSetUpdatesAsXml", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ConsoleUploadDataSetUpdatesAsXml(string deviceId, string ConsultantUid, System.Xml.XmlNode clientData) {
            object[] results = this.Invoke("ConsoleUploadDataSetUpdatesAsXml", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientData});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleUploadDataSetUpdatesAsXml(string deviceId, string ConsultantUid, System.Xml.XmlNode clientData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleUploadDataSetUpdatesAsXml", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientData}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndConsoleUploadDataSetUpdatesAsXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUploadataSetUpdatesCompressed", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ConsoleUploadataSetUpdatesCompressed(string deviceId, string consultantUid, [System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] clientData) {
            object[] results = this.Invoke("ConsoleUploadataSetUpdatesCompressed", new object[] {
                        deviceId,
                        consultantUid,
                        clientData});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleUploadataSetUpdatesCompressed(string deviceId, string consultantUid, byte[] clientData, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleUploadataSetUpdatesCompressed", new object[] {
                        deviceId,
                        consultantUid,
                        clientData}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndConsoleUploadataSetUpdatesCompressed(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleUpdateTerminology", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public LanguageDataSet ConsoleUpdateTerminology(string deviceId, System.Guid consultantUid, LanguageDataSet updates) {
            object[] results = this.Invoke("ConsoleUpdateTerminology", new object[] {
                        deviceId,
                        consultantUid,
                        updates});
            return ((LanguageDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleUpdateTerminology(string deviceId, System.Guid consultantUid, LanguageDataSet updates, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleUpdateTerminology", new object[] {
                        deviceId,
                        consultantUid,
                        updates}, callback, asyncState);
        }
        
        /// <remarks/>
        public LanguageDataSet EndConsoleUpdateTerminology(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((LanguageDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleLogonConsultant", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Utility.UserDataTable ConsoleLogonConsultant(string deviceId, string userName, string passPhrase) {
            object[] results = this.Invoke("ConsoleLogonConsultant", new object[] {
                        deviceId,
                        userName,
                        passPhrase});
            return ((Utility.UserDataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleLogonConsultant(string deviceId, string userName, string passPhrase, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleLogonConsultant", new object[] {
                        deviceId,
                        userName,
                        passPhrase}, callback, asyncState);
        }
        
        /// <remarks/>
        public Utility.UserDataTable EndConsoleLogonConsultant(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Utility.UserDataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/ConsoleLogonNetworkUser", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public Utility.UserDataTable ConsoleLogonNetworkUser(string deviceid) {
            object[] results = this.Invoke("ConsoleLogonNetworkUser", new object[] {
                        deviceid});
            return ((Utility.UserDataTable)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginConsoleLogonNetworkUser(string deviceid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ConsoleLogonNetworkUser", new object[] {
                        deviceid}, callback, asyncState);
        }
        
        /// <remarks/>
        public Utility.UserDataTable EndConsoleLogonNetworkUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((Utility.UserDataTable)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/SchemaUpdateRequired", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool SchemaUpdateRequired(string deviceId, System.Guid consultantUid, System.DateTime lastCheck) {
            object[] results = this.Invoke("SchemaUpdateRequired", new object[] {
                        deviceId,
                        consultantUid,
                        lastCheck});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSchemaUpdateRequired(string deviceId, System.Guid consultantUid, System.DateTime lastCheck, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SchemaUpdateRequired", new object[] {
                        deviceId,
                        consultantUid,
                        lastCheck}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndSchemaUpdateRequired(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSetSchema", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet GetClientDataSetSchema(string deviceId, System.Guid consultantUid) {
            object[] results = this.Invoke("GetClientDataSetSchema", new object[] {
                        deviceId,
                        consultantUid});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClientDataSetSchema(string deviceId, System.Guid consultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClientDataSetSchema", new object[] {
                        deviceId,
                        consultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndGetClientDataSetSchema(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetClientDataSetSchemaMasked", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet GetClientDataSetSchemaMasked(string deviceId, System.Guid consultantUid, int clientMask) {
            object[] results = this.Invoke("GetClientDataSetSchemaMasked", new object[] {
                        deviceId,
                        consultantUid,
                        clientMask});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetClientDataSetSchemaMasked(string deviceId, System.Guid consultantUid, int clientMask, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetClientDataSetSchemaMasked", new object[] {
                        deviceId,
                        consultantUid,
                        clientMask}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndGetClientDataSetSchemaMasked(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/FormUpdateRequired", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FormUpdateRequired(string deviceId, System.Guid consultantUid, System.DateTime lastCheck) {
            object[] results = this.Invoke("FormUpdateRequired", new object[] {
                        deviceId,
                        consultantUid,
                        lastCheck});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginFormUpdateRequired(string deviceId, System.Guid consultantUid, System.DateTime lastCheck, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("FormUpdateRequired", new object[] {
                        deviceId,
                        consultantUid,
                        lastCheck}, callback, asyncState);
        }
        
        /// <remarks/>
        public bool EndFormUpdateRequired(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetFormDefinitions", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FormDefinition GetFormDefinitions(string deviceId, System.Guid consultantUid) {
            object[] results = this.Invoke("GetFormDefinitions", new object[] {
                        deviceId,
                        consultantUid});
            return ((FormDefinition)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFormDefinitions(string deviceId, System.Guid consultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFormDefinitions", new object[] {
                        deviceId,
                        consultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public FormDefinition EndGetFormDefinitions(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FormDefinition)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/GetFormDefinitionsMasked", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public FormDefinition GetFormDefinitionsMasked(string deviceId, System.Guid consultantUid, int clientMask, [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)] System.Nullable<System.DateTime> since) {
            object[] results = this.Invoke("GetFormDefinitionsMasked", new object[] {
                        deviceId,
                        consultantUid,
                        clientMask,
                        since});
            return ((FormDefinition)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetFormDefinitionsMasked(string deviceId, System.Guid consultantUid, int clientMask, System.Nullable<System.DateTime> since, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetFormDefinitionsMasked", new object[] {
                        deviceId,
                        consultantUid,
                        clientMask,
                        since}, callback, asyncState);
        }
        
        /// <remarks/>
        public FormDefinition EndGetFormDefinitionsMasked(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((FormDefinition)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetClientDataSetSchema", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DebugGetClientDataSetSchema(string deviceId, string ConsultantUid) {
            object[] results = this.Invoke("DebugGetClientDataSetSchema", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugGetClientDataSetSchema(string deviceId, string ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugGetClientDataSetSchema", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndDebugGetClientDataSetSchema(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetClientDataSetUpdates", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DebugGetClientDataSetUpdates(string deviceId, string ConsultantUid, string Since) {
            object[] results = this.Invoke("DebugGetClientDataSetUpdates", new object[] {
                        deviceId,
                        ConsultantUid,
                        Since});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugGetClientDataSetUpdates(string deviceId, string ConsultantUid, string Since, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugGetClientDataSetUpdates", new object[] {
                        deviceId,
                        ConsultantUid,
                        Since}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndDebugGetClientDataSetUpdates(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugUploadClientDataSetUpdates", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public UploadResults DebugUploadClientDataSetUpdates(string deviceId, string ConsultantUid, string activiserDataSet, string CustomDataSet) {
            object[] results = this.Invoke("DebugUploadClientDataSetUpdates", new object[] {
                        deviceId,
                        ConsultantUid,
                        activiserDataSet,
                        CustomDataSet});
            return ((UploadResults)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugUploadClientDataSetUpdates(string deviceId, string ConsultantUid, string activiserDataSet, string CustomDataSet, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugUploadClientDataSetUpdates", new object[] {
                        deviceId,
                        ConsultantUid,
                        activiserDataSet,
                        CustomDataSet}, callback, asyncState);
        }
        
        /// <remarks/>
        public UploadResults EndDebugUploadClientDataSetUpdates(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((UploadResults)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugUploadClientDataSetUpdatesAsXml", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DebugUploadClientDataSetUpdatesAsXml(string deviceId, string consultantUid, string clientDataXml) {
            object[] results = this.Invoke("DebugUploadClientDataSetUpdatesAsXml", new object[] {
                        deviceId,
                        consultantUid,
                        clientDataXml});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugUploadClientDataSetUpdatesAsXml(string deviceId, string consultantUid, string clientDataXml, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugUploadClientDataSetUpdatesAsXml", new object[] {
                        deviceId,
                        consultantUid,
                        clientDataXml}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndDebugUploadClientDataSetUpdatesAsXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetSchemaMasked", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet DebugGetSchemaMasked(string deviceId, string ConsultantUid, int clientMask) {
            object[] results = this.Invoke("DebugGetSchemaMasked", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientMask});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugGetSchemaMasked(string deviceId, string ConsultantUid, int clientMask, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugGetSchemaMasked", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientMask}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndDebugGetSchemaMasked(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetSchema", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet DebugGetSchema(string deviceId, string ConsultantUid) {
            object[] results = this.Invoke("DebugGetSchema", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugGetSchema(string deviceId, string ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugGetSchema", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndDebugGetSchema(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetClientDataSet", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet DebugGetClientDataSet(string deviceId, string ConsultantUid) {
            object[] results = this.Invoke("DebugGetClientDataSet", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugGetClientDataSet(string deviceId, string ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugGetClientDataSet", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndDebugGetClientDataSet(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetClientDataSetAsXml", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DebugGetClientDataSetAsXml(string deviceId, string ConsultantUid) {
            object[] results = this.Invoke("DebugGetClientDataSetAsXml", new object[] {
                        deviceId,
                        ConsultantUid});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugGetClientDataSetAsXml(string deviceId, string ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugGetClientDataSetAsXml", new object[] {
                        deviceId,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndDebugGetClientDataSetAsXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetClientDataSetUpdatesAsXml", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DebugGetClientDataSetUpdatesAsXml(string deviceId, string ConsultantUid, string ModifiedSince) {
            object[] results = this.Invoke("DebugGetClientDataSetUpdatesAsXml", new object[] {
                        deviceId,
                        ConsultantUid,
                        ModifiedSince});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugGetClientDataSetUpdatesAsXml(string deviceId, string ConsultantUid, string ModifiedSince, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugGetClientDataSetUpdatesAsXml", new object[] {
                        deviceId,
                        ConsultantUid,
                        ModifiedSince}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndDebugGetClientDataSetUpdatesAsXml(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetClientSiteDetails", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Xml.XmlNode DebugGetClientSiteDetails(string deviceId, string ConsultantUid, string clientSiteUid) {
            object[] results = this.Invoke("DebugGetClientSiteDetails", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientSiteUid});
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugGetClientSiteDetails(string deviceId, string ConsultantUid, string clientSiteUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugGetClientSiteDetails", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientSiteUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Xml.XmlNode EndDebugGetClientSiteDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Xml.XmlNode)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetClientSiteDetails2", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DebugGetClientSiteDetails2(string deviceId, string ConsultantUid, string clientSiteUid) {
            object[] results = this.Invoke("DebugGetClientSiteDetails2", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientSiteUid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugGetClientSiteDetails2(string deviceId, string ConsultantUid, string clientSiteUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugGetClientSiteDetails2", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientSiteUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndDebugGetClientSiteDetails2(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetConsultantDetails", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet DebugGetConsultantDetails(string deviceId, string UserUid, string ConsultantUid) {
            object[] results = this.Invoke("DebugGetConsultantDetails", new object[] {
                        deviceId,
                        UserUid,
                        ConsultantUid});
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugGetConsultantDetails(string deviceId, string UserUid, string ConsultantUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugGetConsultantDetails", new object[] {
                        deviceId,
                        UserUid,
                        ConsultantUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndDebugGetConsultantDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetCustomDataSchema", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public activiserDataSet DebugGetCustomDataSchema() {
            object[] results = this.Invoke("DebugGetCustomDataSchema", new object[0]);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugGetCustomDataSchema(System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugGetCustomDataSchema", new object[0], callback, asyncState);
        }
        
        /// <remarks/>
        public activiserDataSet EndDebugGetCustomDataSchema(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((activiserDataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetRequestDetails", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DebugGetRequestDetails(string deviceId, string UserUid, string requestUid) {
            object[] results = this.Invoke("DebugGetRequestDetails", new object[] {
                        deviceId,
                        UserUid,
                        requestUid});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugGetRequestDetails(string deviceId, string UserUid, string requestUid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugGetRequestDetails", new object[] {
                        deviceId,
                        UserUid,
                        requestUid}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndDebugGetRequestDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetJobHistory", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DebugGetJobHistory(string deviceId, string ConsultantUid, string clientSiteUid, int jobLimit, int ageLimitDays) {
            object[] results = this.Invoke("DebugGetJobHistory", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientSiteUid,
                        jobLimit,
                        ageLimitDays});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugGetJobHistory(string deviceId, string ConsultantUid, string clientSiteUid, int jobLimit, int ageLimitDays, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugGetJobHistory", new object[] {
                        deviceId,
                        ConsultantUid,
                        clientSiteUid,
                        jobLimit,
                        ageLimitDays}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndDebugGetJobHistory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugGetTerminology", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet DebugGetTerminology(string deviceId, string ConsultantUid, int ClientKey, int LanguageId, System.DateTime ModifiedSince) {
            object[] results = this.Invoke("DebugGetTerminology", new object[] {
                        deviceId,
                        ConsultantUid,
                        ClientKey,
                        LanguageId,
                        ModifiedSince});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugGetTerminology(string deviceId, string ConsultantUid, int ClientKey, int LanguageId, System.DateTime ModifiedSince, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugGetTerminology", new object[] {
                        deviceId,
                        ConsultantUid,
                        ClientKey,
                        LanguageId,
                        ModifiedSince}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndDebugGetTerminology(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://www.activiser.com/activiser/DebugConsoleLogonNetworkUser", RequestNamespace="http://www.activiser.com/activiser", ResponseNamespace="http://www.activiser.com/activiser", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string DebugConsoleLogonNetworkUser(string deviceid) {
            object[] results = this.Invoke("DebugConsoleLogonNetworkUser", new object[] {
                        deviceid});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDebugConsoleLogonNetworkUser(string deviceid, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DebugConsoleLogonNetworkUser", new object[] {
                        deviceid}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndDebugConsoleLogonNetworkUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("EventLogDataSet")]
    public partial class EventLogDataSet : global::System.Data.DataSet {
        
        private EventLogDataTable tableEventLog;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EventLogDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public EventLogDataTable EventLog {
            get {
                return this.tableEventLog;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            EventLogDataSet cln = ((EventLogDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["EventLog"] != null)) {
                    base.Tables.Add(new EventLogDataTable(ds.Tables["EventLog"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableEventLog = ((EventLogDataTable)(base.Tables["EventLog"]));
            if ((initTable == true)) {
                if ((this.tableEventLog != null)) {
                    this.tableEventLog.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "EventLogDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.activiser.com/Schemas/EventLogDataSet.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("en-NZ");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableEventLog = new EventLogDataTable();
            base.Tables.Add(this.tableEventLog);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeEventLog() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            EventLogDataSet ds = new EventLogDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void EventLogRowChangeEventHandler(object sender, EventLogRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class EventLogDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnEventLogID;
            
            private global::System.Data.DataColumn columnLogDateTime;
            
            private global::System.Data.DataColumn columnEventDateTime;
            
            private global::System.Data.DataColumn columnEventClass;
            
            private global::System.Data.DataColumn columnSystemId;
            
            private global::System.Data.DataColumn columnSource;
            
            private global::System.Data.DataColumn columnHostName;
            
            private global::System.Data.DataColumn columnLoggedBy;
            
            private global::System.Data.DataColumn columnMessage;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnEventData;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnModified;
            
            private global::System.Data.DataColumn columnModifiedBy;
            
            private global::System.Data.DataColumn columnrowversion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventLogDataTable() {
                this.TableName = "EventLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventLogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventLogIDColumn {
                get {
                    return this.columnEventLogID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LogDateTimeColumn {
                get {
                    return this.columnLogDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDateTimeColumn {
                get {
                    return this.columnEventDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventClassColumn {
                get {
                    return this.columnEventClass;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SystemIdColumn {
                get {
                    return this.columnSystemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SourceColumn {
                get {
                    return this.columnSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HostNameColumn {
                get {
                    return this.columnHostName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LoggedByColumn {
                get {
                    return this.columnLoggedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageColumn {
                get {
                    return this.columnMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EventDataColumn {
                get {
                    return this.columnEventData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedColumn {
                get {
                    return this.columnModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByColumn {
                get {
                    return this.columnModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn rowversionColumn {
                get {
                    return this.columnrowversion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventLogRow this[int index] {
                get {
                    return ((EventLogRow)(this.Rows[index]));
                }
            }
            
            public event EventLogRowChangeEventHandler EventLogRowChanging;
            
            public event EventLogRowChangeEventHandler EventLogRowChanged;
            
            public event EventLogRowChangeEventHandler EventLogRowDeleting;
            
            public event EventLogRowChangeEventHandler EventLogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddEventLogRow(EventLogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventLogRow AddEventLogRow(
                        System.Guid EventLogID, 
                        System.DateTime LogDateTime, 
                        System.DateTime EventDateTime, 
                        int EventClass, 
                        string SystemId, 
                        string Source, 
                        string HostName, 
                        string LoggedBy, 
                        string Message, 
                        string Status, 
                        string Notes, 
                        string EventData, 
                        System.DateTime Created, 
                        string CreatedBy, 
                        System.DateTime Modified, 
                        string ModifiedBy, 
                        byte[] rowversion) {
                EventLogRow rowEventLogRow = ((EventLogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        EventLogID,
                        LogDateTime,
                        EventDateTime,
                        EventClass,
                        SystemId,
                        Source,
                        HostName,
                        LoggedBy,
                        Message,
                        Status,
                        Notes,
                        EventData,
                        Created,
                        CreatedBy,
                        Modified,
                        ModifiedBy,
                        rowversion};
                rowEventLogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowEventLogRow);
                return rowEventLogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventLogRow FindByEventLogID(System.Guid EventLogID) {
                return ((EventLogRow)(this.Rows.Find(new object[] {
                            EventLogID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                EventLogDataTable cln = ((EventLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new EventLogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnEventLogID = base.Columns["EventLogID"];
                this.columnLogDateTime = base.Columns["LogDateTime"];
                this.columnEventDateTime = base.Columns["EventDateTime"];
                this.columnEventClass = base.Columns["EventClass"];
                this.columnSystemId = base.Columns["SystemId"];
                this.columnSource = base.Columns["Source"];
                this.columnHostName = base.Columns["HostName"];
                this.columnLoggedBy = base.Columns["LoggedBy"];
                this.columnMessage = base.Columns["Message"];
                this.columnStatus = base.Columns["Status"];
                this.columnNotes = base.Columns["Notes"];
                this.columnEventData = base.Columns["EventData"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnModified = base.Columns["Modified"];
                this.columnModifiedBy = base.Columns["ModifiedBy"];
                this.columnrowversion = base.Columns["rowversion"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnEventLogID = new global::System.Data.DataColumn("EventLogID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventLogID);
                this.columnLogDateTime = new global::System.Data.DataColumn("LogDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLogDateTime);
                this.columnEventDateTime = new global::System.Data.DataColumn("EventDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventDateTime);
                this.columnEventClass = new global::System.Data.DataColumn("EventClass", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventClass);
                this.columnSystemId = new global::System.Data.DataColumn("SystemId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSystemId);
                this.columnSource = new global::System.Data.DataColumn("Source", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSource);
                this.columnHostName = new global::System.Data.DataColumn("HostName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHostName);
                this.columnLoggedBy = new global::System.Data.DataColumn("LoggedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLoggedBy);
                this.columnMessage = new global::System.Data.DataColumn("Message", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessage);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnEventData = new global::System.Data.DataColumn("EventData", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEventData);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnModified = new global::System.Data.DataColumn("Modified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModified);
                this.columnModifiedBy = new global::System.Data.DataColumn("ModifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedBy);
                this.columnrowversion = new global::System.Data.DataColumn("rowversion", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnrowversion);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnEventLogID}, true));
                this.columnEventLogID.AllowDBNull = false;
                this.columnEventLogID.Unique = true;
                this.columnLogDateTime.AllowDBNull = false;
                this.columnEventDateTime.AllowDBNull = false;
                this.columnEventClass.AllowDBNull = false;
                this.columnEventClass.DefaultValue = ((int)(0));
                this.columnSystemId.AllowDBNull = false;
                this.columnSystemId.MaxLength = 128;
                this.columnSource.AllowDBNull = false;
                this.columnSource.MaxLength = 256;
                this.columnHostName.AllowDBNull = false;
                this.columnHostName.MaxLength = 128;
                this.columnLoggedBy.AllowDBNull = false;
                this.columnLoggedBy.MaxLength = 258;
                this.columnMessage.AllowDBNull = false;
                this.columnMessage.MaxLength = 1000;
                this.columnStatus.MaxLength = 50;
                this.columnNotes.MaxLength = 2147483647;
                this.columnEventData.MaxLength = 2147483647;
                this.columnCreatedBy.MaxLength = 128;
                this.columnModifiedBy.MaxLength = 128;
                this.columnrowversion.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventLogRow NewEventLogRow() {
                return ((EventLogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new EventLogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(EventLogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.EventLogRowChanged != null)) {
                    this.EventLogRowChanged(this, new EventLogRowChangeEvent(((EventLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.EventLogRowChanging != null)) {
                    this.EventLogRowChanging(this, new EventLogRowChangeEvent(((EventLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.EventLogRowDeleted != null)) {
                    this.EventLogRowDeleted(this, new EventLogRowChangeEvent(((EventLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.EventLogRowDeleting != null)) {
                    this.EventLogRowDeleting(this, new EventLogRowChangeEvent(((EventLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveEventLogRow(EventLogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                EventLogDataSet ds = new EventLogDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "EventLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class EventLogRow : global::System.Data.DataRow {
            
            private EventLogDataTable tableEventLog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal EventLogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableEventLog = ((EventLogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid EventLogID {
                get {
                    return ((global::System.Guid)(this[this.tableEventLog.EventLogIDColumn]));
                }
                set {
                    this[this.tableEventLog.EventLogIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LogDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableEventLog.LogDateTimeColumn]));
                }
                set {
                    this[this.tableEventLog.LogDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EventDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableEventLog.EventDateTimeColumn]));
                }
                set {
                    this[this.tableEventLog.EventDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int EventClass {
                get {
                    return ((int)(this[this.tableEventLog.EventClassColumn]));
                }
                set {
                    this[this.tableEventLog.EventClassColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SystemId {
                get {
                    return ((string)(this[this.tableEventLog.SystemIdColumn]));
                }
                set {
                    this[this.tableEventLog.SystemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Source {
                get {
                    return ((string)(this[this.tableEventLog.SourceColumn]));
                }
                set {
                    this[this.tableEventLog.SourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string HostName {
                get {
                    return ((string)(this[this.tableEventLog.HostNameColumn]));
                }
                set {
                    this[this.tableEventLog.HostNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LoggedBy {
                get {
                    return ((string)(this[this.tableEventLog.LoggedByColumn]));
                }
                set {
                    this[this.tableEventLog.LoggedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Message {
                get {
                    return ((string)(this[this.tableEventLog.MessageColumn]));
                }
                set {
                    this[this.tableEventLog.MessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Status {
                get {
                    try {
                        return ((string)(this[this.tableEventLog.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'EventLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventLog.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableEventLog.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'EventLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventLog.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EventData {
                get {
                    try {
                        return ((string)(this[this.tableEventLog.EventDataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EventData\' in table \'EventLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventLog.EventDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEventLog.CreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Created\' in table \'EventLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventLog.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableEventLog.CreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedBy\' in table \'EventLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventLog.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Modified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableEventLog.ModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modified\' in table \'EventLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventLog.ModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableEventLog.ModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedBy\' in table \'EventLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventLog.ModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] rowversion {
                get {
                    try {
                        return ((byte[])(this[this.tableEventLog.rowversionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'rowversion\' in table \'EventLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableEventLog.rowversionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableEventLog.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableEventLog.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableEventLog.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableEventLog.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEventDataNull() {
                return this.IsNull(this.tableEventLog.EventDataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEventDataNull() {
                this[this.tableEventLog.EventDataColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableEventLog.CreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedNull() {
                this[this.tableEventLog.CreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableEventLog.CreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByNull() {
                this[this.tableEventLog.CreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedNull() {
                return this.IsNull(this.tableEventLog.ModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedNull() {
                this[this.tableEventLog.ModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNull() {
                return this.IsNull(this.tableEventLog.ModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNull() {
                this[this.tableEventLog.ModifiedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsrowversionNull() {
                return this.IsNull(this.tableEventLog.rowversionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetrowversionNull() {
                this[this.tableEventLog.rowversionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class EventLogRowChangeEvent : global::System.EventArgs {
            
            private EventLogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventLogRowChangeEvent(EventLogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public EventLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("DeviceTrackingDataSet")]
    public partial class DeviceTrackingDataSet : global::System.Data.DataSet {
        
        private DeviceTrackingDataTable tableDeviceTracking;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DeviceTrackingDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public DeviceTrackingDataTable DeviceTracking {
            get {
                return this.tableDeviceTracking;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            DeviceTrackingDataSet cln = ((DeviceTrackingDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["DeviceTracking"] != null)) {
                    base.Tables.Add(new DeviceTrackingDataTable(ds.Tables["DeviceTracking"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableDeviceTracking = ((DeviceTrackingDataTable)(base.Tables["DeviceTracking"]));
            if ((initTable == true)) {
                if ((this.tableDeviceTracking != null)) {
                    this.tableDeviceTracking.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "DeviceTrackingDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.activiser.com/schemas/DeviceTracking.XSD";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableDeviceTracking = new DeviceTrackingDataTable();
            base.Tables.Add(this.tableDeviceTracking);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeDeviceTracking() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            DeviceTrackingDataSet ds = new DeviceTrackingDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void DeviceTrackingRowChangeEventHandler(object sender, DeviceTrackingRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class DeviceTrackingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnDeviceTrackingUid;
            
            private global::System.Data.DataColumn columnTimeStamp;
            
            private global::System.Data.DataColumn columnUsername;
            
            private global::System.Data.DataColumn columnSystemId;
            
            private global::System.Data.DataColumn columnTrackingInfo;
            
            private global::System.Data.DataColumn columnConsultantUid;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceTrackingDataTable() {
                this.TableName = "DeviceTracking";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeviceTrackingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceTrackingUidColumn {
                get {
                    return this.columnDeviceTrackingUid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeStampColumn {
                get {
                    return this.columnTimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsernameColumn {
                get {
                    return this.columnUsername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SystemIdColumn {
                get {
                    return this.columnSystemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrackingInfoColumn {
                get {
                    return this.columnTrackingInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantUidColumn {
                get {
                    return this.columnConsultantUid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceTrackingRow this[int index] {
                get {
                    return ((DeviceTrackingRow)(this.Rows[index]));
                }
            }
            
            public event DeviceTrackingRowChangeEventHandler DeviceTrackingRowChanging;
            
            public event DeviceTrackingRowChangeEventHandler DeviceTrackingRowChanged;
            
            public event DeviceTrackingRowChangeEventHandler DeviceTrackingRowDeleting;
            
            public event DeviceTrackingRowChangeEventHandler DeviceTrackingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddDeviceTrackingRow(DeviceTrackingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceTrackingRow AddDeviceTrackingRow(System.Guid DeviceTrackingUid, System.DateTime TimeStamp, string Username, string SystemId, string TrackingInfo, System.Guid ConsultantUid) {
                DeviceTrackingRow rowDeviceTrackingRow = ((DeviceTrackingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        DeviceTrackingUid,
                        TimeStamp,
                        Username,
                        SystemId,
                        TrackingInfo,
                        ConsultantUid};
                rowDeviceTrackingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowDeviceTrackingRow);
                return rowDeviceTrackingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceTrackingRow FindByDeviceTrackingUid(System.Guid DeviceTrackingUid) {
                return ((DeviceTrackingRow)(this.Rows.Find(new object[] {
                            DeviceTrackingUid})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                DeviceTrackingDataTable cln = ((DeviceTrackingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new DeviceTrackingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnDeviceTrackingUid = base.Columns["DeviceTrackingUid"];
                this.columnTimeStamp = base.Columns["TimeStamp"];
                this.columnUsername = base.Columns["Username"];
                this.columnSystemId = base.Columns["SystemId"];
                this.columnTrackingInfo = base.Columns["TrackingInfo"];
                this.columnConsultantUid = base.Columns["ConsultantUid"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnDeviceTrackingUid = new global::System.Data.DataColumn("DeviceTrackingUid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceTrackingUid);
                this.columnTimeStamp = new global::System.Data.DataColumn("TimeStamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStamp);
                this.columnUsername = new global::System.Data.DataColumn("Username", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsername);
                this.columnSystemId = new global::System.Data.DataColumn("SystemId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSystemId);
                this.columnTrackingInfo = new global::System.Data.DataColumn("TrackingInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrackingInfo);
                this.columnConsultantUid = new global::System.Data.DataColumn("ConsultantUid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantUid);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnDeviceTrackingUid}, true));
                this.columnDeviceTrackingUid.AllowDBNull = false;
                this.columnDeviceTrackingUid.Unique = true;
                this.columnTimeStamp.AllowDBNull = false;
                this.columnTimeStamp.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnUsername.AllowDBNull = false;
                this.columnUsername.MaxLength = 128;
                this.columnSystemId.AllowDBNull = false;
                this.columnSystemId.MaxLength = 100;
                this.columnTrackingInfo.AllowDBNull = false;
                this.columnTrackingInfo.MaxLength = 128;
                this.columnConsultantUid.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceTrackingRow NewDeviceTrackingRow() {
                return ((DeviceTrackingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new DeviceTrackingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(DeviceTrackingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.DeviceTrackingRowChanged != null)) {
                    this.DeviceTrackingRowChanged(this, new DeviceTrackingRowChangeEvent(((DeviceTrackingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.DeviceTrackingRowChanging != null)) {
                    this.DeviceTrackingRowChanging(this, new DeviceTrackingRowChangeEvent(((DeviceTrackingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.DeviceTrackingRowDeleted != null)) {
                    this.DeviceTrackingRowDeleted(this, new DeviceTrackingRowChangeEvent(((DeviceTrackingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.DeviceTrackingRowDeleting != null)) {
                    this.DeviceTrackingRowDeleting(this, new DeviceTrackingRowChangeEvent(((DeviceTrackingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveDeviceTrackingRow(DeviceTrackingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                DeviceTrackingDataSet ds = new DeviceTrackingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "DeviceTrackingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class DeviceTrackingRow : global::System.Data.DataRow {
            
            private DeviceTrackingDataTable tableDeviceTracking;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal DeviceTrackingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableDeviceTracking = ((DeviceTrackingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid DeviceTrackingUid {
                get {
                    return ((global::System.Guid)(this[this.tableDeviceTracking.DeviceTrackingUidColumn]));
                }
                set {
                    this[this.tableDeviceTracking.DeviceTrackingUidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeStamp {
                get {
                    return ((global::System.DateTime)(this[this.tableDeviceTracking.TimeStampColumn]));
                }
                set {
                    this[this.tableDeviceTracking.TimeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Username {
                get {
                    return ((string)(this[this.tableDeviceTracking.UsernameColumn]));
                }
                set {
                    this[this.tableDeviceTracking.UsernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SystemId {
                get {
                    return ((string)(this[this.tableDeviceTracking.SystemIdColumn]));
                }
                set {
                    this[this.tableDeviceTracking.SystemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrackingInfo {
                get {
                    return ((string)(this[this.tableDeviceTracking.TrackingInfoColumn]));
                }
                set {
                    this[this.tableDeviceTracking.TrackingInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ConsultantUid {
                get {
                    return ((global::System.Guid)(this[this.tableDeviceTracking.ConsultantUidColumn]));
                }
                set {
                    this[this.tableDeviceTracking.ConsultantUidColumn] = value;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class DeviceTrackingRowChangeEvent : global::System.EventArgs {
            
            private DeviceTrackingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceTrackingRowChangeEvent(DeviceTrackingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public DeviceTrackingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("Utility")]
    public partial class Utility : global::System.Data.DataSet {
        
        private ActiveConsultantsDataTable tableActiveConsultants;
        
        private UserDataTable tableUser;
        
        private ServerSettingDataTable tableServerSetting;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public Utility() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ActiveConsultantsDataTable ActiveConsultants {
            get {
                return this.tableActiveConsultants;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UserDataTable User {
            get {
                return this.tableUser;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ServerSettingDataTable ServerSetting {
            get {
                return this.tableServerSetting;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            Utility cln = ((Utility)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ActiveConsultants"] != null)) {
                    base.Tables.Add(new ActiveConsultantsDataTable(ds.Tables["ActiveConsultants"]));
                }
                if ((ds.Tables["User"] != null)) {
                    base.Tables.Add(new UserDataTable(ds.Tables["User"]));
                }
                if ((ds.Tables["ServerSetting"] != null)) {
                    base.Tables.Add(new ServerSettingDataTable(ds.Tables["ServerSetting"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableActiveConsultants = ((ActiveConsultantsDataTable)(base.Tables["ActiveConsultants"]));
            if ((initTable == true)) {
                if ((this.tableActiveConsultants != null)) {
                    this.tableActiveConsultants.InitVars();
                }
            }
            this.tableUser = ((UserDataTable)(base.Tables["User"]));
            if ((initTable == true)) {
                if ((this.tableUser != null)) {
                    this.tableUser.InitVars();
                }
            }
            this.tableServerSetting = ((ServerSettingDataTable)(base.Tables["ServerSetting"]));
            if ((initTable == true)) {
                if ((this.tableServerSetting != null)) {
                    this.tableServerSetting.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "Utility";
            this.Prefix = "";
            this.Namespace = "http://www.activiser.com/schemas/Utilities.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableActiveConsultants = new ActiveConsultantsDataTable();
            base.Tables.Add(this.tableActiveConsultants);
            this.tableUser = new UserDataTable();
            base.Tables.Add(this.tableUser);
            this.tableServerSetting = new ServerSettingDataTable();
            base.Tables.Add(this.tableServerSetting);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeActiveConsultants() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeUser() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeServerSetting() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            Utility ds = new Utility();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ActiveConsultantsRowChangeEventHandler(object sender, ActiveConsultantsRowChangeEvent e);
        
        public delegate void UserRowChangeEventHandler(object sender, UserRowChangeEvent e);
        
        public delegate void ServerSettingRowChangeEventHandler(object sender, ServerSettingRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ActiveConsultantsDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnConsultantUID;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnUsername;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActiveConsultantsDataTable() {
                this.TableName = "ActiveConsultants";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActiveConsultantsDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantUIDColumn {
                get {
                    return this.columnConsultantUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsernameColumn {
                get {
                    return this.columnUsername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActiveConsultantsRow this[int index] {
                get {
                    return ((ActiveConsultantsRow)(this.Rows[index]));
                }
            }
            
            public event ActiveConsultantsRowChangeEventHandler ActiveConsultantsRowChanging;
            
            public event ActiveConsultantsRowChangeEventHandler ActiveConsultantsRowChanged;
            
            public event ActiveConsultantsRowChangeEventHandler ActiveConsultantsRowDeleting;
            
            public event ActiveConsultantsRowChangeEventHandler ActiveConsultantsRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddActiveConsultantsRow(ActiveConsultantsRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActiveConsultantsRow AddActiveConsultantsRow(System.Guid ConsultantUID, string Name, string Username) {
                ActiveConsultantsRow rowActiveConsultantsRow = ((ActiveConsultantsRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ConsultantUID,
                        Name,
                        Username};
                rowActiveConsultantsRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowActiveConsultantsRow);
                return rowActiveConsultantsRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActiveConsultantsRow FindByConsultantUID(System.Guid ConsultantUID) {
                return ((ActiveConsultantsRow)(this.Rows.Find(new object[] {
                            ConsultantUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ActiveConsultantsDataTable cln = ((ActiveConsultantsDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ActiveConsultantsDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConsultantUID = base.Columns["ConsultantUID"];
                this.columnName = base.Columns["Name"];
                this.columnUsername = base.Columns["Username"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConsultantUID = new global::System.Data.DataColumn("ConsultantUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantUID);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnUsername = new global::System.Data.DataColumn("Username", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsername);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnConsultantUID}, true));
                this.columnConsultantUID.AllowDBNull = false;
                this.columnConsultantUID.Unique = true;
                this.columnConsultantUID.Caption = "UID";
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 250;
                this.columnUsername.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActiveConsultantsRow NewActiveConsultantsRow() {
                return ((ActiveConsultantsRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ActiveConsultantsRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ActiveConsultantsRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ActiveConsultantsRowChanged != null)) {
                    this.ActiveConsultantsRowChanged(this, new ActiveConsultantsRowChangeEvent(((ActiveConsultantsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ActiveConsultantsRowChanging != null)) {
                    this.ActiveConsultantsRowChanging(this, new ActiveConsultantsRowChangeEvent(((ActiveConsultantsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ActiveConsultantsRowDeleted != null)) {
                    this.ActiveConsultantsRowDeleted(this, new ActiveConsultantsRowChangeEvent(((ActiveConsultantsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ActiveConsultantsRowDeleting != null)) {
                    this.ActiveConsultantsRowDeleting(this, new ActiveConsultantsRowChangeEvent(((ActiveConsultantsRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveActiveConsultantsRow(ActiveConsultantsRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Utility ds = new Utility();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ActiveConsultantsDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class UserDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnConsultantUID;
            
            private global::System.Data.DataColumn columnUsername;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDomainLogon;
            
            private global::System.Data.DataColumn columnManagement;
            
            private global::System.Data.DataColumn columnAdministration;
            
            private global::System.Data.DataColumn columnIsActiviserUser;
            
            private global::System.Data.DataColumn columnSyncTime;
            
            private global::System.Data.DataColumn columnLastSyncTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserDataTable() {
                this.TableName = "User";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantUIDColumn {
                get {
                    return this.columnConsultantUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsernameColumn {
                get {
                    return this.columnUsername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DomainLogonColumn {
                get {
                    return this.columnDomainLogon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManagementColumn {
                get {
                    return this.columnManagement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdministrationColumn {
                get {
                    return this.columnAdministration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiviserUserColumn {
                get {
                    return this.columnIsActiviserUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncTimeColumn {
                get {
                    return this.columnSyncTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastSyncTimeColumn {
                get {
                    return this.columnLastSyncTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow this[int index] {
                get {
                    return ((UserRow)(this.Rows[index]));
                }
            }
            
            public event UserRowChangeEventHandler UserRowChanging;
            
            public event UserRowChangeEventHandler UserRowChanged;
            
            public event UserRowChangeEventHandler UserRowDeleting;
            
            public event UserRowChangeEventHandler UserRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddUserRow(UserRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow AddUserRow(System.Guid ConsultantUID, string Username, string Name, string DomainLogon, bool Management, bool Administration, bool IsActiviserUser, System.DateTime SyncTime, System.DateTime LastSyncTime) {
                UserRow rowUserRow = ((UserRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ConsultantUID,
                        Username,
                        Name,
                        DomainLogon,
                        Management,
                        Administration,
                        IsActiviserUser,
                        SyncTime,
                        LastSyncTime};
                rowUserRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowUserRow);
                return rowUserRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow FindByConsultantUID(System.Guid ConsultantUID) {
                return ((UserRow)(this.Rows.Find(new object[] {
                            ConsultantUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                UserDataTable cln = ((UserDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new UserDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConsultantUID = base.Columns["ConsultantUID"];
                this.columnUsername = base.Columns["Username"];
                this.columnName = base.Columns["Name"];
                this.columnDomainLogon = base.Columns["DomainLogon"];
                this.columnManagement = base.Columns["Management"];
                this.columnAdministration = base.Columns["Administration"];
                this.columnIsActiviserUser = base.Columns["IsActiviserUser"];
                this.columnSyncTime = base.Columns["SyncTime"];
                this.columnLastSyncTime = base.Columns["LastSyncTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConsultantUID = new global::System.Data.DataColumn("ConsultantUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantUID);
                this.columnUsername = new global::System.Data.DataColumn("Username", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsername);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDomainLogon = new global::System.Data.DataColumn("DomainLogon", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDomainLogon);
                this.columnManagement = new global::System.Data.DataColumn("Management", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManagement);
                this.columnAdministration = new global::System.Data.DataColumn("Administration", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdministration);
                this.columnIsActiviserUser = new global::System.Data.DataColumn("IsActiviserUser", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActiviserUser);
                this.columnSyncTime = new global::System.Data.DataColumn("SyncTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncTime);
                this.columnLastSyncTime = new global::System.Data.DataColumn("LastSyncTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastSyncTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_User", new global::System.Data.DataColumn[] {
                                this.columnConsultantUID}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("UC_Username", new global::System.Data.DataColumn[] {
                                this.columnUsername}, false));
                this.columnConsultantUID.AllowDBNull = false;
                this.columnConsultantUID.Unique = true;
                this.columnUsername.Unique = true;
                this.columnUsername.MaxLength = 50;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 250;
                this.columnDomainLogon.MaxLength = 250;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow NewUserRow() {
                return ((UserRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new UserRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(UserRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.UserRowChanged != null)) {
                    this.UserRowChanged(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.UserRowChanging != null)) {
                    this.UserRowChanging(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.UserRowDeleted != null)) {
                    this.UserRowDeleted(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.UserRowDeleting != null)) {
                    this.UserRowDeleting(this, new UserRowChangeEvent(((UserRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveUserRow(UserRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Utility ds = new Utility();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "UserDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ServerSettingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnServerSettingId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnLongValue;
            
            private global::System.Data.DataColumn columnValidAfter;
            
            private global::System.Data.DataColumn columnValidBefore;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnModified;
            
            private global::System.Data.DataColumn columnModifiedBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerSettingDataTable() {
                this.TableName = "ServerSetting";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerSettingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ServerSettingIdColumn {
                get {
                    return this.columnServerSettingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongValueColumn {
                get {
                    return this.columnLongValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidAfterColumn {
                get {
                    return this.columnValidAfter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidBeforeColumn {
                get {
                    return this.columnValidBefore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedColumn {
                get {
                    return this.columnModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByColumn {
                get {
                    return this.columnModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerSettingRow this[int index] {
                get {
                    return ((ServerSettingRow)(this.Rows[index]));
                }
            }
            
            public event ServerSettingRowChangeEventHandler ServerSettingRowChanging;
            
            public event ServerSettingRowChangeEventHandler ServerSettingRowChanged;
            
            public event ServerSettingRowChangeEventHandler ServerSettingRowDeleting;
            
            public event ServerSettingRowChangeEventHandler ServerSettingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddServerSettingRow(ServerSettingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerSettingRow AddServerSettingRow(System.Guid ServerSettingId, string Name, int Status, string Value, string LongValue, System.DateTime ValidAfter, System.DateTime ValidBefore, System.DateTime Created, string CreatedBy, System.DateTime Modified, string ModifiedBy) {
                ServerSettingRow rowServerSettingRow = ((ServerSettingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ServerSettingId,
                        Name,
                        Status,
                        Value,
                        LongValue,
                        ValidAfter,
                        ValidBefore,
                        Created,
                        CreatedBy,
                        Modified,
                        ModifiedBy};
                rowServerSettingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowServerSettingRow);
                return rowServerSettingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerSettingRow FindByServerSettingId(System.Guid ServerSettingId) {
                return ((ServerSettingRow)(this.Rows.Find(new object[] {
                            ServerSettingId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ServerSettingDataTable cln = ((ServerSettingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ServerSettingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnServerSettingId = base.Columns["ServerSettingId"];
                this.columnName = base.Columns["Name"];
                this.columnStatus = base.Columns["Status"];
                this.columnValue = base.Columns["Value"];
                this.columnLongValue = base.Columns["LongValue"];
                this.columnValidAfter = base.Columns["ValidAfter"];
                this.columnValidBefore = base.Columns["ValidBefore"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnModified = base.Columns["Modified"];
                this.columnModifiedBy = base.Columns["ModifiedBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnServerSettingId = new global::System.Data.DataColumn("ServerSettingId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnServerSettingId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnLongValue = new global::System.Data.DataColumn("LongValue", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongValue);
                this.columnValidAfter = new global::System.Data.DataColumn("ValidAfter", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidAfter);
                this.columnValidBefore = new global::System.Data.DataColumn("ValidBefore", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidBefore);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnModified = new global::System.Data.DataColumn("Modified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModified);
                this.columnModifiedBy = new global::System.Data.DataColumn("ModifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedBy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ServerSetting_UC", new global::System.Data.DataColumn[] {
                                this.columnName,
                                this.columnStatus}, false));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("ServerSettingPK", new global::System.Data.DataColumn[] {
                                this.columnServerSettingId}, true));
                this.columnServerSettingId.AllowDBNull = false;
                this.columnServerSettingId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 128;
                this.columnStatus.AllowDBNull = false;
                this.columnValue.MaxLength = 1000;
                this.columnLongValue.MaxLength = 2147483647;
                this.columnCreatedBy.MaxLength = 128;
                this.columnModifiedBy.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerSettingRow NewServerSettingRow() {
                return ((ServerSettingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ServerSettingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ServerSettingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ServerSettingRowChanged != null)) {
                    this.ServerSettingRowChanged(this, new ServerSettingRowChangeEvent(((ServerSettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ServerSettingRowChanging != null)) {
                    this.ServerSettingRowChanging(this, new ServerSettingRowChangeEvent(((ServerSettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ServerSettingRowDeleted != null)) {
                    this.ServerSettingRowDeleted(this, new ServerSettingRowChangeEvent(((ServerSettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ServerSettingRowDeleting != null)) {
                    this.ServerSettingRowDeleting(this, new ServerSettingRowChangeEvent(((ServerSettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveServerSettingRow(ServerSettingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                Utility ds = new Utility();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ServerSettingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ActiveConsultantsRow : global::System.Data.DataRow {
            
            private ActiveConsultantsDataTable tableActiveConsultants;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ActiveConsultantsRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableActiveConsultants = ((ActiveConsultantsDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ConsultantUID {
                get {
                    return ((global::System.Guid)(this[this.tableActiveConsultants.ConsultantUIDColumn]));
                }
                set {
                    this[this.tableActiveConsultants.ConsultantUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableActiveConsultants.NameColumn]));
                }
                set {
                    this[this.tableActiveConsultants.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Username {
                get {
                    try {
                        return ((string)(this[this.tableActiveConsultants.UsernameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Username\' in table \'ActiveConsultants\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableActiveConsultants.UsernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsernameNull() {
                return this.IsNull(this.tableActiveConsultants.UsernameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsernameNull() {
                this[this.tableActiveConsultants.UsernameColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class UserRow : global::System.Data.DataRow {
            
            private UserDataTable tableUser;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal UserRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableUser = ((UserDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ConsultantUID {
                get {
                    return ((global::System.Guid)(this[this.tableUser.ConsultantUIDColumn]));
                }
                set {
                    this[this.tableUser.ConsultantUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Username {
                get {
                    try {
                        return ((string)(this[this.tableUser.UsernameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Username\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.UsernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableUser.NameColumn]));
                }
                set {
                    this[this.tableUser.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DomainLogon {
                get {
                    try {
                        return ((string)(this[this.tableUser.DomainLogonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DomainLogon\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.DomainLogonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Management {
                get {
                    try {
                        return ((bool)(this[this.tableUser.ManagementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Management\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.ManagementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Administration {
                get {
                    try {
                        return ((bool)(this[this.tableUser.AdministrationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Administration\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.AdministrationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActiviserUser {
                get {
                    try {
                        return ((bool)(this[this.tableUser.IsActiviserUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActiviserUser\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.IsActiviserUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SyncTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUser.SyncTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncTime\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.SyncTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastSyncTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableUser.LastSyncTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastSyncTime\' in table \'User\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableUser.LastSyncTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsernameNull() {
                return this.IsNull(this.tableUser.UsernameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsernameNull() {
                this[this.tableUser.UsernameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDomainLogonNull() {
                return this.IsNull(this.tableUser.DomainLogonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDomainLogonNull() {
                this[this.tableUser.DomainLogonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManagementNull() {
                return this.IsNull(this.tableUser.ManagementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManagementNull() {
                this[this.tableUser.ManagementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdministrationNull() {
                return this.IsNull(this.tableUser.AdministrationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdministrationNull() {
                this[this.tableUser.AdministrationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiviserUserNull() {
                return this.IsNull(this.tableUser.IsActiviserUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiviserUserNull() {
                this[this.tableUser.IsActiviserUserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncTimeNull() {
                return this.IsNull(this.tableUser.SyncTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncTimeNull() {
                this[this.tableUser.SyncTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastSyncTimeNull() {
                return this.IsNull(this.tableUser.LastSyncTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastSyncTimeNull() {
                this[this.tableUser.LastSyncTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ServerSettingRow : global::System.Data.DataRow {
            
            private ServerSettingDataTable tableServerSetting;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ServerSettingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableServerSetting = ((ServerSettingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ServerSettingId {
                get {
                    return ((global::System.Guid)(this[this.tableServerSetting.ServerSettingIdColumn]));
                }
                set {
                    this[this.tableServerSetting.ServerSettingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableServerSetting.NameColumn]));
                }
                set {
                    this[this.tableServerSetting.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Status {
                get {
                    return ((int)(this[this.tableServerSetting.StatusColumn]));
                }
                set {
                    this[this.tableServerSetting.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableServerSetting.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'ServerSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerSetting.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LongValue {
                get {
                    try {
                        return ((string)(this[this.tableServerSetting.LongValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LongValue\' in table \'ServerSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerSetting.LongValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ValidAfter {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableServerSetting.ValidAfterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidAfter\' in table \'ServerSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerSetting.ValidAfterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ValidBefore {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableServerSetting.ValidBeforeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidBefore\' in table \'ServerSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerSetting.ValidBeforeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableServerSetting.CreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Created\' in table \'ServerSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerSetting.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableServerSetting.CreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedBy\' in table \'ServerSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerSetting.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Modified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableServerSetting.ModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modified\' in table \'ServerSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerSetting.ModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableServerSetting.ModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedBy\' in table \'ServerSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableServerSetting.ModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableServerSetting.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableServerSetting.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongValueNull() {
                return this.IsNull(this.tableServerSetting.LongValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongValueNull() {
                this[this.tableServerSetting.LongValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidAfterNull() {
                return this.IsNull(this.tableServerSetting.ValidAfterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidAfterNull() {
                this[this.tableServerSetting.ValidAfterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidBeforeNull() {
                return this.IsNull(this.tableServerSetting.ValidBeforeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidBeforeNull() {
                this[this.tableServerSetting.ValidBeforeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableServerSetting.CreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedNull() {
                this[this.tableServerSetting.CreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableServerSetting.CreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByNull() {
                this[this.tableServerSetting.CreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedNull() {
                return this.IsNull(this.tableServerSetting.ModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedNull() {
                this[this.tableServerSetting.ModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNull() {
                return this.IsNull(this.tableServerSetting.ModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNull() {
                this[this.tableServerSetting.ModifiedByColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ActiveConsultantsRowChangeEvent : global::System.EventArgs {
            
            private ActiveConsultantsRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActiveConsultantsRowChangeEvent(ActiveConsultantsRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ActiveConsultantsRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class UserRowChangeEvent : global::System.EventArgs {
            
            private UserRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRowChangeEvent(UserRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public UserRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ServerSettingRowChangeEvent : global::System.EventArgs {
            
            private ServerSettingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerSettingRowChangeEvent(ServerSettingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ServerSettingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("activiserDataSet")]
    public partial class activiserDataSet : global::System.Data.DataSet {
        
        private ConsultantDataTable tableConsultant;
        
        private ClientSiteStatusDataTable tableClientSiteStatus;
        
        private ClientSiteDataTable tableClientSite;
        
        private RequestStatusDataTable tableRequestStatus;
        
        private RequestDataTable tableRequest;
        
        private JobStatusDataTable tableJobStatus;
        
        private JobDataTable tableJob;
        
        private global::System.Data.DataRelation relationFK_Job_Consultant;
        
        private global::System.Data.DataRelation relationFK_Job_ClientSite;
        
        private global::System.Data.DataRelation relationFK_Job_Request;
        
        private global::System.Data.DataRelation relationFK_Request_ClientSite;
        
        private global::System.Data.DataRelation relationFK_JobStatus_Job;
        
        private global::System.Data.DataRelation relationFK_ClientSite_ClientSiteStatus;
        
        private global::System.Data.DataRelation relationFK_Request_Consultant;
        
        private global::System.Data.DataRelation relationFK_Request_ConsultantStatus;
        
        private global::System.Data.DataRelation relationFK_Request_RequestStatus;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public activiserDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
            this.InitExpressions();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConsultantDataTable Consultant {
            get {
                return this.tableConsultant;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClientSiteStatusDataTable ClientSiteStatus {
            get {
                return this.tableClientSiteStatus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClientSiteDataTable ClientSite {
            get {
                return this.tableClientSite;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RequestStatusDataTable RequestStatus {
            get {
                return this.tableRequestStatus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public RequestDataTable Request {
            get {
                return this.tableRequest;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public JobStatusDataTable JobStatus {
            get {
                return this.tableJobStatus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public JobDataTable Job {
            get {
                return this.tableJob;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            activiserDataSet cln = ((activiserDataSet)(base.Clone()));
            cln.InitVars();
            cln.InitExpressions();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Consultant"] != null)) {
                    base.Tables.Add(new ConsultantDataTable(ds.Tables["Consultant"]));
                }
                if ((ds.Tables["ClientSiteStatus"] != null)) {
                    base.Tables.Add(new ClientSiteStatusDataTable(ds.Tables["ClientSiteStatus"]));
                }
                if ((ds.Tables["ClientSite"] != null)) {
                    base.Tables.Add(new ClientSiteDataTable(ds.Tables["ClientSite"]));
                }
                if ((ds.Tables["RequestStatus"] != null)) {
                    base.Tables.Add(new RequestStatusDataTable(ds.Tables["RequestStatus"]));
                }
                if ((ds.Tables["Request"] != null)) {
                    base.Tables.Add(new RequestDataTable(ds.Tables["Request"]));
                }
                if ((ds.Tables["JobStatus"] != null)) {
                    base.Tables.Add(new JobStatusDataTable(ds.Tables["JobStatus"]));
                }
                if ((ds.Tables["Job"] != null)) {
                    base.Tables.Add(new JobDataTable(ds.Tables["Job"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableConsultant = ((ConsultantDataTable)(base.Tables["Consultant"]));
            if ((initTable == true)) {
                if ((this.tableConsultant != null)) {
                    this.tableConsultant.InitVars();
                }
            }
            this.tableClientSiteStatus = ((ClientSiteStatusDataTable)(base.Tables["ClientSiteStatus"]));
            if ((initTable == true)) {
                if ((this.tableClientSiteStatus != null)) {
                    this.tableClientSiteStatus.InitVars();
                }
            }
            this.tableClientSite = ((ClientSiteDataTable)(base.Tables["ClientSite"]));
            if ((initTable == true)) {
                if ((this.tableClientSite != null)) {
                    this.tableClientSite.InitVars();
                }
            }
            this.tableRequestStatus = ((RequestStatusDataTable)(base.Tables["RequestStatus"]));
            if ((initTable == true)) {
                if ((this.tableRequestStatus != null)) {
                    this.tableRequestStatus.InitVars();
                }
            }
            this.tableRequest = ((RequestDataTable)(base.Tables["Request"]));
            if ((initTable == true)) {
                if ((this.tableRequest != null)) {
                    this.tableRequest.InitVars();
                }
            }
            this.tableJobStatus = ((JobStatusDataTable)(base.Tables["JobStatus"]));
            if ((initTable == true)) {
                if ((this.tableJobStatus != null)) {
                    this.tableJobStatus.InitVars();
                }
            }
            this.tableJob = ((JobDataTable)(base.Tables["Job"]));
            if ((initTable == true)) {
                if ((this.tableJob != null)) {
                    this.tableJob.InitVars();
                }
            }
            this.relationFK_Job_Consultant = this.Relations["FK_Job_Consultant"];
            this.relationFK_Job_ClientSite = this.Relations["FK_Job_ClientSite"];
            this.relationFK_Job_Request = this.Relations["FK_Job_Request"];
            this.relationFK_Request_ClientSite = this.Relations["FK_Request_ClientSite"];
            this.relationFK_JobStatus_Job = this.Relations["FK_JobStatus_Job"];
            this.relationFK_ClientSite_ClientSiteStatus = this.Relations["FK_ClientSite_ClientSiteStatus"];
            this.relationFK_Request_Consultant = this.Relations["FK_Request_Consultant"];
            this.relationFK_Request_ConsultantStatus = this.Relations["FK_Request_ConsultantStatus"];
            this.relationFK_Request_RequestStatus = this.Relations["FK_Request_RequestStatus"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "activiserDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.activiser.com/schemas/activiserDataSet.XSD";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableConsultant = new ConsultantDataTable();
            base.Tables.Add(this.tableConsultant);
            this.tableClientSiteStatus = new ClientSiteStatusDataTable();
            base.Tables.Add(this.tableClientSiteStatus);
            this.tableClientSite = new ClientSiteDataTable();
            base.Tables.Add(this.tableClientSite);
            this.tableRequestStatus = new RequestStatusDataTable();
            base.Tables.Add(this.tableRequestStatus);
            this.tableRequest = new RequestDataTable(false);
            base.Tables.Add(this.tableRequest);
            this.tableJobStatus = new JobStatusDataTable();
            base.Tables.Add(this.tableJobStatus);
            this.tableJob = new JobDataTable(false);
            base.Tables.Add(this.tableJob);
            this.relationFK_Job_Consultant = new global::System.Data.DataRelation("FK_Job_Consultant", new global::System.Data.DataColumn[] {
                        this.tableConsultant.ConsultantUIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableJob.ConsultantUIDColumn}, false);
            this.Relations.Add(this.relationFK_Job_Consultant);
            this.relationFK_Job_ClientSite = new global::System.Data.DataRelation("FK_Job_ClientSite", new global::System.Data.DataColumn[] {
                        this.tableClientSite.ClientSiteUIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableJob.ClientSiteUIDColumn}, false);
            this.Relations.Add(this.relationFK_Job_ClientSite);
            this.relationFK_Job_Request = new global::System.Data.DataRelation("FK_Job_Request", new global::System.Data.DataColumn[] {
                        this.tableRequest.RequestUIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableJob.RequestUIDColumn}, false);
            this.Relations.Add(this.relationFK_Job_Request);
            this.relationFK_Request_ClientSite = new global::System.Data.DataRelation("FK_Request_ClientSite", new global::System.Data.DataColumn[] {
                        this.tableClientSite.ClientSiteUIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRequest.ClientSiteUIDColumn}, false);
            this.Relations.Add(this.relationFK_Request_ClientSite);
            this.relationFK_JobStatus_Job = new global::System.Data.DataRelation("FK_JobStatus_Job", new global::System.Data.DataColumn[] {
                        this.tableJobStatus.JobStatusIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableJob.JobStatusIDColumn}, false);
            this.Relations.Add(this.relationFK_JobStatus_Job);
            this.relationFK_ClientSite_ClientSiteStatus = new global::System.Data.DataRelation("FK_ClientSite_ClientSiteStatus", new global::System.Data.DataColumn[] {
                        this.tableClientSiteStatus.ClientSiteStatusIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableClientSite.ClientSiteStatusIDColumn}, false);
            this.Relations.Add(this.relationFK_ClientSite_ClientSiteStatus);
            this.relationFK_Request_Consultant = new global::System.Data.DataRelation("FK_Request_Consultant", new global::System.Data.DataColumn[] {
                        this.tableConsultant.ConsultantUIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRequest.AssignedToUIDColumn}, false);
            this.Relations.Add(this.relationFK_Request_Consultant);
            this.relationFK_Request_ConsultantStatus = new global::System.Data.DataRelation("FK_Request_ConsultantStatus", new global::System.Data.DataColumn[] {
                        this.tableRequestStatus.RequestStatusIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRequest.ConsultantStatusIDColumn}, false);
            this.Relations.Add(this.relationFK_Request_ConsultantStatus);
            this.relationFK_Request_RequestStatus = new global::System.Data.DataRelation("FK_Request_RequestStatus", new global::System.Data.DataColumn[] {
                        this.tableRequestStatus.RequestStatusIDColumn}, new global::System.Data.DataColumn[] {
                        this.tableRequest.RequestStatusIDColumn}, false);
            this.Relations.Add(this.relationFK_Request_RequestStatus);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsultant() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientSiteStatus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientSite() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRequestStatus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeRequest() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJobStatus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeJob() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            activiserDataSet ds = new activiserDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitExpressions() {
            this.Request.ClientSiteNameColumn.Expression = "Parent(FK_Request_ClientSite).SiteName";
            this.Request.JobsColumn.Expression = "COUNT(CHILD(FK_Job_Request).JobStatusID)";
            this.Request.AssignedToNameColumn.Expression = "Parent(FK_Request_Consultant).Name";
            this.Request.RequestStatusDescriptionColumn.Expression = "Parent(FK_Request_RequestStatus).Description";
            this.Request.RequestStatusOrderColumn.Expression = "Parent(FK_Request_RequestStatus).DisplayOrder";
            this.Request.ConsultantStatusDescriptionColumn.Expression = "ISNULL(Parent(FK_Request_ConsultantStatus).Description,Parent(FK_Request_RequestS" +
                "tatus).Description)";
            this.Request.ConsultantStatusOrderColumn.Expression = "ISNULL(Parent(FK_Request_ConsultantStatus).DisplayOrder, Parent(FK_Request_Reques" +
                "tStatus).DisplayOrder)";
            this.Job.ConsultantNameColumn.Expression = "Parent(FK_Job_Consultant).Name";
            this.Job.RequestNumberColumn.Expression = "Parent(FK_Job_Request).RequestNumber";
            this.Job.ClientSiteNameColumn.Expression = "Parent(FK_Job_ClientSite).SiteName";
        }
        
        public delegate void ConsultantRowChangeEventHandler(object sender, ConsultantRowChangeEvent e);
        
        public delegate void ClientSiteStatusRowChangeEventHandler(object sender, ClientSiteStatusRowChangeEvent e);
        
        public delegate void ClientSiteRowChangeEventHandler(object sender, ClientSiteRowChangeEvent e);
        
        public delegate void RequestStatusRowChangeEventHandler(object sender, RequestStatusRowChangeEvent e);
        
        public delegate void RequestRowChangeEventHandler(object sender, RequestRowChangeEvent e);
        
        public delegate void JobStatusRowChangeEventHandler(object sender, JobStatusRowChangeEvent e);
        
        public delegate void JobRowChangeEventHandler(object sender, JobRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsultantDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnConsultantNumber;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnUsername;
            
            private global::System.Data.DataColumn columnEmailAddress;
            
            private global::System.Data.DataColumn columnMobilePhone;
            
            private global::System.Data.DataColumn columnConsultantUID;
            
            private global::System.Data.DataColumn columnConsultantID;
            
            private global::System.Data.DataColumn columnCreatedDateTime;
            
            private global::System.Data.DataColumn columnModifiedDateTime;
            
            private global::System.Data.DataColumn columnMinSyncTime;
            
            private global::System.Data.DataColumn columnLastSyncTime;
            
            private global::System.Data.DataColumn columnSyncTime;
            
            private global::System.Data.DataColumn columnMobileAlert;
            
            private global::System.Data.DataColumn columnIsActiviserUser;
            
            private global::System.Data.DataColumn columnManagement;
            
            private global::System.Data.DataColumn columnAdministration;
            
            private global::System.Data.DataColumn columnDomainLogon;
            
            private global::System.Data.DataColumn columnTrackingTimestamp;
            
            private global::System.Data.DataColumn columnTrackingInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantDataTable() {
                this.TableName = "Consultant";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantNumberColumn {
                get {
                    return this.columnConsultantNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn UsernameColumn {
                get {
                    return this.columnUsername;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailAddressColumn {
                get {
                    return this.columnEmailAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MobilePhoneColumn {
                get {
                    return this.columnMobilePhone;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantUIDColumn {
                get {
                    return this.columnConsultantUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantIDColumn {
                get {
                    return this.columnConsultantID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDateTimeColumn {
                get {
                    return this.columnCreatedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDateTimeColumn {
                get {
                    return this.columnModifiedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinSyncTimeColumn {
                get {
                    return this.columnMinSyncTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastSyncTimeColumn {
                get {
                    return this.columnLastSyncTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncTimeColumn {
                get {
                    return this.columnSyncTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MobileAlertColumn {
                get {
                    return this.columnMobileAlert;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiviserUserColumn {
                get {
                    return this.columnIsActiviserUser;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ManagementColumn {
                get {
                    return this.columnManagement;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AdministrationColumn {
                get {
                    return this.columnAdministration;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DomainLogonColumn {
                get {
                    return this.columnDomainLogon;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrackingTimestampColumn {
                get {
                    return this.columnTrackingTimestamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrackingInfoColumn {
                get {
                    return this.columnTrackingInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantRow this[int index] {
                get {
                    return ((ConsultantRow)(this.Rows[index]));
                }
            }
            
            public event ConsultantRowChangeEventHandler ConsultantRowChanging;
            
            public event ConsultantRowChangeEventHandler ConsultantRowChanged;
            
            public event ConsultantRowChangeEventHandler ConsultantRowDeleting;
            
            public event ConsultantRowChangeEventHandler ConsultantRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsultantRow(ConsultantRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantRow AddConsultantRow(
                        string ConsultantNumber, 
                        string Name, 
                        string Username, 
                        string EmailAddress, 
                        string MobilePhone, 
                        System.Guid ConsultantUID, 
                        int ConsultantID, 
                        System.DateTime CreatedDateTime, 
                        System.DateTime ModifiedDateTime, 
                        int MinSyncTime, 
                        System.DateTime LastSyncTime, 
                        System.DateTime SyncTime, 
                        bool MobileAlert, 
                        bool IsActiviserUser, 
                        bool Management, 
                        bool Administration, 
                        string DomainLogon, 
                        System.DateTime TrackingTimestamp, 
                        string TrackingInfo) {
                ConsultantRow rowConsultantRow = ((ConsultantRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ConsultantNumber,
                        Name,
                        Username,
                        EmailAddress,
                        MobilePhone,
                        ConsultantUID,
                        ConsultantID,
                        CreatedDateTime,
                        ModifiedDateTime,
                        MinSyncTime,
                        LastSyncTime,
                        SyncTime,
                        MobileAlert,
                        IsActiviserUser,
                        Management,
                        Administration,
                        DomainLogon,
                        TrackingTimestamp,
                        TrackingInfo};
                rowConsultantRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsultantRow);
                return rowConsultantRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantRow FindByConsultantUID(System.Guid ConsultantUID) {
                return ((ConsultantRow)(this.Rows.Find(new object[] {
                            ConsultantUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsultantDataTable cln = ((ConsultantDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsultantDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConsultantNumber = base.Columns["ConsultantNumber"];
                this.columnName = base.Columns["Name"];
                this.columnUsername = base.Columns["Username"];
                this.columnEmailAddress = base.Columns["EmailAddress"];
                this.columnMobilePhone = base.Columns["MobilePhone"];
                this.columnConsultantUID = base.Columns["ConsultantUID"];
                this.columnConsultantID = base.Columns["ConsultantID"];
                this.columnCreatedDateTime = base.Columns["CreatedDateTime"];
                this.columnModifiedDateTime = base.Columns["ModifiedDateTime"];
                this.columnMinSyncTime = base.Columns["MinSyncTime"];
                this.columnLastSyncTime = base.Columns["LastSyncTime"];
                this.columnSyncTime = base.Columns["SyncTime"];
                this.columnMobileAlert = base.Columns["MobileAlert"];
                this.columnIsActiviserUser = base.Columns["IsActiviserUser"];
                this.columnManagement = base.Columns["Management"];
                this.columnAdministration = base.Columns["Administration"];
                this.columnDomainLogon = base.Columns["DomainLogon"];
                this.columnTrackingTimestamp = base.Columns["TrackingTimestamp"];
                this.columnTrackingInfo = base.Columns["TrackingInfo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConsultantNumber = new global::System.Data.DataColumn("ConsultantNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantNumber);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnUsername = new global::System.Data.DataColumn("Username", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnUsername);
                this.columnEmailAddress = new global::System.Data.DataColumn("EmailAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailAddress);
                this.columnMobilePhone = new global::System.Data.DataColumn("MobilePhone", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMobilePhone);
                this.columnConsultantUID = new global::System.Data.DataColumn("ConsultantUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantUID);
                this.columnConsultantID = new global::System.Data.DataColumn("ConsultantID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantID);
                this.columnCreatedDateTime = new global::System.Data.DataColumn("CreatedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDateTime);
                this.columnModifiedDateTime = new global::System.Data.DataColumn("ModifiedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDateTime);
                this.columnMinSyncTime = new global::System.Data.DataColumn("MinSyncTime", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinSyncTime);
                this.columnLastSyncTime = new global::System.Data.DataColumn("LastSyncTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastSyncTime);
                this.columnSyncTime = new global::System.Data.DataColumn("SyncTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncTime);
                this.columnMobileAlert = new global::System.Data.DataColumn("MobileAlert", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMobileAlert);
                this.columnIsActiviserUser = new global::System.Data.DataColumn("IsActiviserUser", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActiviserUser);
                this.columnManagement = new global::System.Data.DataColumn("Management", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnManagement);
                this.columnAdministration = new global::System.Data.DataColumn("Administration", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAdministration);
                this.columnDomainLogon = new global::System.Data.DataColumn("DomainLogon", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDomainLogon);
                this.columnTrackingTimestamp = new global::System.Data.DataColumn("TrackingTimestamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrackingTimestamp);
                this.columnTrackingInfo = new global::System.Data.DataColumn("TrackingInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrackingInfo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_Consultant", new global::System.Data.DataColumn[] {
                                this.columnConsultantUID}, true));
                this.Constraints.Add(new global::System.Data.UniqueConstraint("UX_Consultant_Username", new global::System.Data.DataColumn[] {
                                this.columnUsername}, false));
                this.columnConsultantNumber.MaxLength = 100;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 250;
                this.columnUsername.Unique = true;
                this.columnUsername.MaxLength = 50;
                this.columnEmailAddress.MaxLength = 100;
                this.columnMobilePhone.MaxLength = 50;
                this.columnConsultantUID.AllowDBNull = false;
                this.columnConsultantUID.Unique = true;
                this.columnCreatedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnModifiedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnMobileAlert.DefaultValue = ((bool)(false));
                this.columnIsActiviserUser.DefaultValue = ((bool)(true));
                this.columnManagement.DefaultValue = ((bool)(false));
                this.columnAdministration.DefaultValue = ((bool)(false));
                this.columnDomainLogon.MaxLength = 250;
                this.columnTrackingInfo.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantRow NewConsultantRow() {
                return ((ConsultantRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsultantRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsultantRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsultantRowChanged != null)) {
                    this.ConsultantRowChanged(this, new ConsultantRowChangeEvent(((ConsultantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsultantRowChanging != null)) {
                    this.ConsultantRowChanging(this, new ConsultantRowChangeEvent(((ConsultantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsultantRowDeleted != null)) {
                    this.ConsultantRowDeleted(this, new ConsultantRowChangeEvent(((ConsultantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsultantRowDeleting != null)) {
                    this.ConsultantRowDeleting(this, new ConsultantRowChangeEvent(((ConsultantRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsultantRow(ConsultantRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                activiserDataSet ds = new activiserDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsultantDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientSiteStatusDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientSiteStatusID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnCreatedDateTime;
            
            private global::System.Data.DataColumn columnModifiedDateTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteStatusDataTable() {
                this.TableName = "ClientSiteStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientSiteStatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientSiteStatusIDColumn {
                get {
                    return this.columnClientSiteStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDateTimeColumn {
                get {
                    return this.columnCreatedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDateTimeColumn {
                get {
                    return this.columnModifiedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteStatusRow this[int index] {
                get {
                    return ((ClientSiteStatusRow)(this.Rows[index]));
                }
            }
            
            public event ClientSiteStatusRowChangeEventHandler ClientSiteStatusRowChanging;
            
            public event ClientSiteStatusRowChangeEventHandler ClientSiteStatusRowChanged;
            
            public event ClientSiteStatusRowChangeEventHandler ClientSiteStatusRowDeleting;
            
            public event ClientSiteStatusRowChangeEventHandler ClientSiteStatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientSiteStatusRow(ClientSiteStatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteStatusRow AddClientSiteStatusRow(int ClientSiteStatusID, string Description, bool IsActive, System.DateTime CreatedDateTime, System.DateTime ModifiedDateTime) {
                ClientSiteStatusRow rowClientSiteStatusRow = ((ClientSiteStatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientSiteStatusID,
                        Description,
                        IsActive,
                        CreatedDateTime,
                        ModifiedDateTime};
                rowClientSiteStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientSiteStatusRow);
                return rowClientSiteStatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteStatusRow FindByClientSiteStatusID(int ClientSiteStatusID) {
                return ((ClientSiteStatusRow)(this.Rows.Find(new object[] {
                            ClientSiteStatusID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientSiteStatusDataTable cln = ((ClientSiteStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientSiteStatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientSiteStatusID = base.Columns["ClientSiteStatusID"];
                this.columnDescription = base.Columns["Description"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnCreatedDateTime = base.Columns["CreatedDateTime"];
                this.columnModifiedDateTime = base.Columns["ModifiedDateTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientSiteStatusID = new global::System.Data.DataColumn("ClientSiteStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientSiteStatusID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnCreatedDateTime = new global::System.Data.DataColumn("CreatedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDateTime);
                this.columnModifiedDateTime = new global::System.Data.DataColumn("ModifiedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDateTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_ClientSiteStatus", new global::System.Data.DataColumn[] {
                                this.columnClientSiteStatusID}, true));
                this.columnClientSiteStatusID.AllowDBNull = false;
                this.columnClientSiteStatusID.Unique = true;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 250;
                this.columnIsActive.AllowDBNull = false;
                this.columnCreatedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnModifiedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteStatusRow NewClientSiteStatusRow() {
                return ((ClientSiteStatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientSiteStatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientSiteStatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientSiteStatusRowChanged != null)) {
                    this.ClientSiteStatusRowChanged(this, new ClientSiteStatusRowChangeEvent(((ClientSiteStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientSiteStatusRowChanging != null)) {
                    this.ClientSiteStatusRowChanging(this, new ClientSiteStatusRowChangeEvent(((ClientSiteStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientSiteStatusRowDeleted != null)) {
                    this.ClientSiteStatusRowDeleted(this, new ClientSiteStatusRowChangeEvent(((ClientSiteStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientSiteStatusRowDeleting != null)) {
                    this.ClientSiteStatusRowDeleting(this, new ClientSiteStatusRowChangeEvent(((ClientSiteStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientSiteStatusRow(ClientSiteStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                activiserDataSet ds = new activiserDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientSiteStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientSiteDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientSiteUID;
            
            private global::System.Data.DataColumn columnClientSiteID;
            
            private global::System.Data.DataColumn columnClientSiteNumber;
            
            private global::System.Data.DataColumn columnSiteName;
            
            private global::System.Data.DataColumn columnSiteAddress;
            
            private global::System.Data.DataColumn columnSiteContactEmail;
            
            private global::System.Data.DataColumn columnSiteNotes;
            
            private global::System.Data.DataColumn columnContact;
            
            private global::System.Data.DataColumn columnContactPhone1;
            
            private global::System.Data.DataColumn columnContactPhone2;
            
            private global::System.Data.DataColumn columnHold;
            
            private global::System.Data.DataColumn columnClientSiteStatusID;
            
            private global::System.Data.DataColumn columnCreatedDateTime;
            
            private global::System.Data.DataColumn columnModifiedDateTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteDataTable() {
                this.TableName = "ClientSite";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientSiteDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientSiteUIDColumn {
                get {
                    return this.columnClientSiteUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientSiteIDColumn {
                get {
                    return this.columnClientSiteID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientSiteNumberColumn {
                get {
                    return this.columnClientSiteNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteNameColumn {
                get {
                    return this.columnSiteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteAddressColumn {
                get {
                    return this.columnSiteAddress;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteContactEmailColumn {
                get {
                    return this.columnSiteContactEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SiteNotesColumn {
                get {
                    return this.columnSiteNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactColumn {
                get {
                    return this.columnContact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactPhone1Column {
                get {
                    return this.columnContactPhone1;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactPhone2Column {
                get {
                    return this.columnContactPhone2;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HoldColumn {
                get {
                    return this.columnHold;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientSiteStatusIDColumn {
                get {
                    return this.columnClientSiteStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDateTimeColumn {
                get {
                    return this.columnCreatedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDateTimeColumn {
                get {
                    return this.columnModifiedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteRow this[int index] {
                get {
                    return ((ClientSiteRow)(this.Rows[index]));
                }
            }
            
            public event ClientSiteRowChangeEventHandler ClientSiteRowChanging;
            
            public event ClientSiteRowChangeEventHandler ClientSiteRowChanged;
            
            public event ClientSiteRowChangeEventHandler ClientSiteRowDeleting;
            
            public event ClientSiteRowChangeEventHandler ClientSiteRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientSiteRow(ClientSiteRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteRow AddClientSiteRow(System.Guid ClientSiteUID, int ClientSiteID, string ClientSiteNumber, string SiteName, string SiteAddress, string SiteContactEmail, string SiteNotes, string Contact, string ContactPhone1, string ContactPhone2, bool Hold, ClientSiteStatusRow parentClientSiteStatusRowByFK_ClientSite_ClientSiteStatus, System.DateTime CreatedDateTime, System.DateTime ModifiedDateTime) {
                ClientSiteRow rowClientSiteRow = ((ClientSiteRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientSiteUID,
                        ClientSiteID,
                        ClientSiteNumber,
                        SiteName,
                        SiteAddress,
                        SiteContactEmail,
                        SiteNotes,
                        Contact,
                        ContactPhone1,
                        ContactPhone2,
                        Hold,
                        null,
                        CreatedDateTime,
                        ModifiedDateTime};
                if ((parentClientSiteStatusRowByFK_ClientSite_ClientSiteStatus != null)) {
                    columnValuesArray[11] = parentClientSiteStatusRowByFK_ClientSite_ClientSiteStatus[0];
                }
                rowClientSiteRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientSiteRow);
                return rowClientSiteRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteRow FindByClientSiteUID(System.Guid ClientSiteUID) {
                return ((ClientSiteRow)(this.Rows.Find(new object[] {
                            ClientSiteUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientSiteDataTable cln = ((ClientSiteDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientSiteDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientSiteUID = base.Columns["ClientSiteUID"];
                this.columnClientSiteID = base.Columns["ClientSiteID"];
                this.columnClientSiteNumber = base.Columns["ClientSiteNumber"];
                this.columnSiteName = base.Columns["SiteName"];
                this.columnSiteAddress = base.Columns["SiteAddress"];
                this.columnSiteContactEmail = base.Columns["SiteContactEmail"];
                this.columnSiteNotes = base.Columns["SiteNotes"];
                this.columnContact = base.Columns["Contact"];
                this.columnContactPhone1 = base.Columns["ContactPhone1"];
                this.columnContactPhone2 = base.Columns["ContactPhone2"];
                this.columnHold = base.Columns["Hold"];
                this.columnClientSiteStatusID = base.Columns["ClientSiteStatusID"];
                this.columnCreatedDateTime = base.Columns["CreatedDateTime"];
                this.columnModifiedDateTime = base.Columns["ModifiedDateTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientSiteUID = new global::System.Data.DataColumn("ClientSiteUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientSiteUID);
                this.columnClientSiteID = new global::System.Data.DataColumn("ClientSiteID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientSiteID);
                this.columnClientSiteNumber = new global::System.Data.DataColumn("ClientSiteNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientSiteNumber);
                this.columnSiteName = new global::System.Data.DataColumn("SiteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteName);
                this.columnSiteAddress = new global::System.Data.DataColumn("SiteAddress", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteAddress);
                this.columnSiteContactEmail = new global::System.Data.DataColumn("SiteContactEmail", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteContactEmail);
                this.columnSiteNotes = new global::System.Data.DataColumn("SiteNotes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSiteNotes);
                this.columnContact = new global::System.Data.DataColumn("Contact", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContact);
                this.columnContactPhone1 = new global::System.Data.DataColumn("ContactPhone1", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactPhone1);
                this.columnContactPhone2 = new global::System.Data.DataColumn("ContactPhone2", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContactPhone2);
                this.columnHold = new global::System.Data.DataColumn("Hold", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHold);
                this.columnClientSiteStatusID = new global::System.Data.DataColumn("ClientSiteStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientSiteStatusID);
                this.columnCreatedDateTime = new global::System.Data.DataColumn("CreatedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDateTime);
                this.columnModifiedDateTime = new global::System.Data.DataColumn("ModifiedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDateTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_ClientSite", new global::System.Data.DataColumn[] {
                                this.columnClientSiteUID}, true));
                this.columnClientSiteUID.AllowDBNull = false;
                this.columnClientSiteUID.Unique = true;
                this.columnClientSiteUID.Caption = "UID";
                this.columnClientSiteID.Caption = "ID";
                this.columnClientSiteNumber.MaxLength = 100;
                this.columnSiteName.MaxLength = 250;
                this.columnSiteAddress.MaxLength = 250;
                this.columnSiteContactEmail.MaxLength = 100;
                this.columnSiteNotes.MaxLength = 2000;
                this.columnContact.MaxLength = 100;
                this.columnContactPhone1.MaxLength = 50;
                this.columnContactPhone2.MaxLength = 50;
                this.columnCreatedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnModifiedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteRow NewClientSiteRow() {
                return ((ClientSiteRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientSiteRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientSiteRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientSiteRowChanged != null)) {
                    this.ClientSiteRowChanged(this, new ClientSiteRowChangeEvent(((ClientSiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientSiteRowChanging != null)) {
                    this.ClientSiteRowChanging(this, new ClientSiteRowChangeEvent(((ClientSiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientSiteRowDeleted != null)) {
                    this.ClientSiteRowDeleted(this, new ClientSiteRowChangeEvent(((ClientSiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientSiteRowDeleting != null)) {
                    this.ClientSiteRowDeleting(this, new ClientSiteRowChangeEvent(((ClientSiteRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientSiteRow(ClientSiteRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                activiserDataSet ds = new activiserDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientSiteDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RequestStatusDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRequestStatusID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnDisplayOrder;
            
            private global::System.Data.DataColumn columnIsClientMenuItem;
            
            private global::System.Data.DataColumn columnIsReasonRequired;
            
            private global::System.Data.DataColumn columnIsNewStatus;
            
            private global::System.Data.DataColumn columnIsInProgressStatus;
            
            private global::System.Data.DataColumn columnIsCompleteStatus;
            
            private global::System.Data.DataColumn columnIsCancelledStatus;
            
            private global::System.Data.DataColumn columnCreatedDateTime;
            
            private global::System.Data.DataColumn columnModifiedDateTime;
            
            private global::System.Data.DataColumn columnColour;
            
            private global::System.Data.DataColumn columnBackColour;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusDataTable() {
                this.TableName = "RequestStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RequestStatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestStatusIDColumn {
                get {
                    return this.columnRequestStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisplayOrderColumn {
                get {
                    return this.columnDisplayOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsClientMenuItemColumn {
                get {
                    return this.columnIsClientMenuItem;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsReasonRequiredColumn {
                get {
                    return this.columnIsReasonRequired;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsNewStatusColumn {
                get {
                    return this.columnIsNewStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsInProgressStatusColumn {
                get {
                    return this.columnIsInProgressStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCompleteStatusColumn {
                get {
                    return this.columnIsCompleteStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCancelledStatusColumn {
                get {
                    return this.columnIsCancelledStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDateTimeColumn {
                get {
                    return this.columnCreatedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDateTimeColumn {
                get {
                    return this.columnModifiedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ColourColumn {
                get {
                    return this.columnColour;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn BackColourColumn {
                get {
                    return this.columnBackColour;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusRow this[int index] {
                get {
                    return ((RequestStatusRow)(this.Rows[index]));
                }
            }
            
            public event RequestStatusRowChangeEventHandler RequestStatusRowChanging;
            
            public event RequestStatusRowChangeEventHandler RequestStatusRowChanged;
            
            public event RequestStatusRowChangeEventHandler RequestStatusRowDeleting;
            
            public event RequestStatusRowChangeEventHandler RequestStatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRequestStatusRow(RequestStatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusRow AddRequestStatusRow(int RequestStatusID, string Description, int DisplayOrder, bool IsClientMenuItem, bool IsReasonRequired, bool IsNewStatus, bool IsInProgressStatus, bool IsCompleteStatus, bool IsCancelledStatus, System.DateTime CreatedDateTime, System.DateTime ModifiedDateTime, int Colour, int BackColour) {
                RequestStatusRow rowRequestStatusRow = ((RequestStatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RequestStatusID,
                        Description,
                        DisplayOrder,
                        IsClientMenuItem,
                        IsReasonRequired,
                        IsNewStatus,
                        IsInProgressStatus,
                        IsCompleteStatus,
                        IsCancelledStatus,
                        CreatedDateTime,
                        ModifiedDateTime,
                        Colour,
                        BackColour};
                rowRequestStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRequestStatusRow);
                return rowRequestStatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusRow FindByRequestStatusID(int RequestStatusID) {
                return ((RequestStatusRow)(this.Rows.Find(new object[] {
                            RequestStatusID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RequestStatusDataTable cln = ((RequestStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RequestStatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRequestStatusID = base.Columns["RequestStatusID"];
                this.columnDescription = base.Columns["Description"];
                this.columnDisplayOrder = base.Columns["DisplayOrder"];
                this.columnIsClientMenuItem = base.Columns["IsClientMenuItem"];
                this.columnIsReasonRequired = base.Columns["IsReasonRequired"];
                this.columnIsNewStatus = base.Columns["IsNewStatus"];
                this.columnIsInProgressStatus = base.Columns["IsInProgressStatus"];
                this.columnIsCompleteStatus = base.Columns["IsCompleteStatus"];
                this.columnIsCancelledStatus = base.Columns["IsCancelledStatus"];
                this.columnCreatedDateTime = base.Columns["CreatedDateTime"];
                this.columnModifiedDateTime = base.Columns["ModifiedDateTime"];
                this.columnColour = base.Columns["Colour"];
                this.columnBackColour = base.Columns["BackColour"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRequestStatusID = new global::System.Data.DataColumn("RequestStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestStatusID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnDisplayOrder = new global::System.Data.DataColumn("DisplayOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayOrder);
                this.columnIsClientMenuItem = new global::System.Data.DataColumn("IsClientMenuItem", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsClientMenuItem);
                this.columnIsReasonRequired = new global::System.Data.DataColumn("IsReasonRequired", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsReasonRequired);
                this.columnIsNewStatus = new global::System.Data.DataColumn("IsNewStatus", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsNewStatus);
                this.columnIsInProgressStatus = new global::System.Data.DataColumn("IsInProgressStatus", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsInProgressStatus);
                this.columnIsCompleteStatus = new global::System.Data.DataColumn("IsCompleteStatus", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCompleteStatus);
                this.columnIsCancelledStatus = new global::System.Data.DataColumn("IsCancelledStatus", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCancelledStatus);
                this.columnCreatedDateTime = new global::System.Data.DataColumn("CreatedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDateTime);
                this.columnModifiedDateTime = new global::System.Data.DataColumn("ModifiedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDateTime);
                this.columnColour = new global::System.Data.DataColumn("Colour", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnColour);
                this.columnBackColour = new global::System.Data.DataColumn("BackColour", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnBackColour);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_RequestStatus", new global::System.Data.DataColumn[] {
                                this.columnRequestStatusID}, true));
                this.columnRequestStatusID.AllowDBNull = false;
                this.columnRequestStatusID.Unique = true;
                this.columnRequestStatusID.Caption = "ID";
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 50;
                this.columnIsClientMenuItem.AllowDBNull = false;
                this.columnIsReasonRequired.AllowDBNull = false;
                this.columnIsNewStatus.AllowDBNull = false;
                this.columnIsInProgressStatus.AllowDBNull = false;
                this.columnIsCompleteStatus.AllowDBNull = false;
                this.columnIsCancelledStatus.AllowDBNull = false;
                this.columnCreatedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnModifiedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnColour.AllowDBNull = false;
                this.columnColour.DefaultValue = ((int)(0));
                this.columnBackColour.AllowDBNull = false;
                this.columnBackColour.DefaultValue = ((int)(-1));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusRow NewRequestStatusRow() {
                return ((RequestStatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RequestStatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RequestStatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RequestStatusRowChanged != null)) {
                    this.RequestStatusRowChanged(this, new RequestStatusRowChangeEvent(((RequestStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RequestStatusRowChanging != null)) {
                    this.RequestStatusRowChanging(this, new RequestStatusRowChangeEvent(((RequestStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RequestStatusRowDeleted != null)) {
                    this.RequestStatusRowDeleted(this, new RequestStatusRowChangeEvent(((RequestStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RequestStatusRowDeleting != null)) {
                    this.RequestStatusRowDeleting(this, new RequestStatusRowChangeEvent(((RequestStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRequestStatusRow(RequestStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                activiserDataSet ds = new activiserDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RequestStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class RequestDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnRequestUID;
            
            private global::System.Data.DataColumn columnRequestID;
            
            private global::System.Data.DataColumn columnRequestNumber;
            
            private global::System.Data.DataColumn columnConsultantRID;
            
            private global::System.Data.DataColumn columnConsultantStatusID;
            
            private global::System.Data.DataColumn columnClientSiteUID;
            
            private global::System.Data.DataColumn columnAssignedToUID;
            
            private global::System.Data.DataColumn columnRequestStatusID;
            
            private global::System.Data.DataColumn columnNextActionDate;
            
            private global::System.Data.DataColumn columnCompletedDate;
            
            private global::System.Data.DataColumn columnContact;
            
            private global::System.Data.DataColumn columnShortDescription;
            
            private global::System.Data.DataColumn columnLongDescription;
            
            private global::System.Data.DataColumn columnCreatedDateTime;
            
            private global::System.Data.DataColumn columnModifiedDateTime;
            
            private global::System.Data.DataColumn columnClientSiteName;
            
            private global::System.Data.DataColumn columnJobs;
            
            private global::System.Data.DataColumn columnAssignedToName;
            
            private global::System.Data.DataColumn columnRequestStatusDescription;
            
            private global::System.Data.DataColumn columnRequestStatusOrder;
            
            private global::System.Data.DataColumn columnConsultantStatusDescription;
            
            private global::System.Data.DataColumn columnConsultantStatusOrder;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestDataTable(bool initExpressions) {
                this.TableName = "Request";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RequestDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestUIDColumn {
                get {
                    return this.columnRequestUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestIDColumn {
                get {
                    return this.columnRequestID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestNumberColumn {
                get {
                    return this.columnRequestNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantRIDColumn {
                get {
                    return this.columnConsultantRID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantStatusIDColumn {
                get {
                    return this.columnConsultantStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientSiteUIDColumn {
                get {
                    return this.columnClientSiteUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignedToUIDColumn {
                get {
                    return this.columnAssignedToUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestStatusIDColumn {
                get {
                    return this.columnRequestStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NextActionDateColumn {
                get {
                    return this.columnNextActionDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CompletedDateColumn {
                get {
                    return this.columnCompletedDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ContactColumn {
                get {
                    return this.columnContact;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShortDescriptionColumn {
                get {
                    return this.columnShortDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LongDescriptionColumn {
                get {
                    return this.columnLongDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDateTimeColumn {
                get {
                    return this.columnCreatedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDateTimeColumn {
                get {
                    return this.columnModifiedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientSiteNameColumn {
                get {
                    return this.columnClientSiteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobsColumn {
                get {
                    return this.columnJobs;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignedToNameColumn {
                get {
                    return this.columnAssignedToName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestStatusDescriptionColumn {
                get {
                    return this.columnRequestStatusDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestStatusOrderColumn {
                get {
                    return this.columnRequestStatusOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantStatusDescriptionColumn {
                get {
                    return this.columnConsultantStatusDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantStatusOrderColumn {
                get {
                    return this.columnConsultantStatusOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestRow this[int index] {
                get {
                    return ((RequestRow)(this.Rows[index]));
                }
            }
            
            public event RequestRowChangeEventHandler RequestRowChanging;
            
            public event RequestRowChangeEventHandler RequestRowChanged;
            
            public event RequestRowChangeEventHandler RequestRowDeleting;
            
            public event RequestRowChangeEventHandler RequestRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddRequestRow(RequestRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestRow AddRequestRow(
                        System.Guid RequestUID, 
                        string RequestNumber, 
                        RequestStatusRow parentRequestStatusRowByFK_Request_ConsultantStatus, 
                        ClientSiteRow parentClientSiteRowByFK_Request_ClientSite, 
                        ConsultantRow parentConsultantRowByFK_Request_Consultant, 
                        RequestStatusRow parentRequestStatusRowByFK_Request_RequestStatus, 
                        System.DateTime NextActionDate, 
                        System.DateTime CompletedDate, 
                        string Contact, 
                        string ShortDescription, 
                        string LongDescription, 
                        System.DateTime CreatedDateTime, 
                        System.DateTime ModifiedDateTime, 
                        string ClientSiteName, 
                        int Jobs, 
                        string AssignedToName, 
                        string RequestStatusDescription, 
                        int RequestStatusOrder, 
                        string ConsultantStatusDescription, 
                        int ConsultantStatusOrder) {
                RequestRow rowRequestRow = ((RequestRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RequestUID,
                        null,
                        RequestNumber,
                        null,
                        null,
                        null,
                        null,
                        null,
                        NextActionDate,
                        CompletedDate,
                        Contact,
                        ShortDescription,
                        LongDescription,
                        CreatedDateTime,
                        ModifiedDateTime,
                        ClientSiteName,
                        Jobs,
                        AssignedToName,
                        RequestStatusDescription,
                        RequestStatusOrder,
                        ConsultantStatusDescription,
                        ConsultantStatusOrder};
                if ((parentRequestStatusRowByFK_Request_ConsultantStatus != null)) {
                    columnValuesArray[4] = parentRequestStatusRowByFK_Request_ConsultantStatus[0];
                }
                if ((parentClientSiteRowByFK_Request_ClientSite != null)) {
                    columnValuesArray[5] = parentClientSiteRowByFK_Request_ClientSite[0];
                }
                if ((parentConsultantRowByFK_Request_Consultant != null)) {
                    columnValuesArray[6] = parentConsultantRowByFK_Request_Consultant[5];
                }
                if ((parentRequestStatusRowByFK_Request_RequestStatus != null)) {
                    columnValuesArray[7] = parentRequestStatusRowByFK_Request_RequestStatus[0];
                }
                rowRequestRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRequestRow);
                return rowRequestRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestRow AddRequestRow(System.Guid RequestUID, string RequestNumber, RequestStatusRow parentRequestStatusRowByFK_Request_ConsultantStatus, ClientSiteRow parentClientSiteRowByFK_Request_ClientSite, ConsultantRow parentConsultantRowByFK_Request_Consultant, RequestStatusRow parentRequestStatusRowByFK_Request_RequestStatus, System.DateTime NextActionDate, System.DateTime CompletedDate, string Contact, string ShortDescription, string LongDescription, System.DateTime CreatedDateTime, System.DateTime ModifiedDateTime) {
                RequestRow rowRequestRow = ((RequestRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        RequestUID,
                        null,
                        RequestNumber,
                        null,
                        null,
                        null,
                        null,
                        null,
                        NextActionDate,
                        CompletedDate,
                        Contact,
                        ShortDescription,
                        LongDescription,
                        CreatedDateTime,
                        ModifiedDateTime,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null,
                        null};
                if ((parentRequestStatusRowByFK_Request_ConsultantStatus != null)) {
                    columnValuesArray[4] = parentRequestStatusRowByFK_Request_ConsultantStatus[0];
                }
                if ((parentClientSiteRowByFK_Request_ClientSite != null)) {
                    columnValuesArray[5] = parentClientSiteRowByFK_Request_ClientSite[0];
                }
                if ((parentConsultantRowByFK_Request_Consultant != null)) {
                    columnValuesArray[6] = parentConsultantRowByFK_Request_Consultant[5];
                }
                if ((parentRequestStatusRowByFK_Request_RequestStatus != null)) {
                    columnValuesArray[7] = parentRequestStatusRowByFK_Request_RequestStatus[0];
                }
                rowRequestRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowRequestRow);
                return rowRequestRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestRow FindByRequestUID(System.Guid RequestUID) {
                return ((RequestRow)(this.Rows.Find(new object[] {
                            RequestUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                RequestDataTable cln = ((RequestDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new RequestDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnRequestUID = base.Columns["RequestUID"];
                this.columnRequestID = base.Columns["RequestID"];
                this.columnRequestNumber = base.Columns["RequestNumber"];
                this.columnConsultantRID = base.Columns["ConsultantRID"];
                this.columnConsultantStatusID = base.Columns["ConsultantStatusID"];
                this.columnClientSiteUID = base.Columns["ClientSiteUID"];
                this.columnAssignedToUID = base.Columns["AssignedToUID"];
                this.columnRequestStatusID = base.Columns["RequestStatusID"];
                this.columnNextActionDate = base.Columns["NextActionDate"];
                this.columnCompletedDate = base.Columns["CompletedDate"];
                this.columnContact = base.Columns["Contact"];
                this.columnShortDescription = base.Columns["ShortDescription"];
                this.columnLongDescription = base.Columns["LongDescription"];
                this.columnCreatedDateTime = base.Columns["CreatedDateTime"];
                this.columnModifiedDateTime = base.Columns["ModifiedDateTime"];
                this.columnClientSiteName = base.Columns["ClientSiteName"];
                this.columnJobs = base.Columns["Jobs"];
                this.columnAssignedToName = base.Columns["AssignedToName"];
                this.columnRequestStatusDescription = base.Columns["RequestStatusDescription"];
                this.columnRequestStatusOrder = base.Columns["RequestStatusOrder"];
                this.columnConsultantStatusDescription = base.Columns["ConsultantStatusDescription"];
                this.columnConsultantStatusOrder = base.Columns["ConsultantStatusOrder"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnRequestUID = new global::System.Data.DataColumn("RequestUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestUID);
                this.columnRequestID = new global::System.Data.DataColumn("RequestID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestID);
                this.columnRequestNumber = new global::System.Data.DataColumn("RequestNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestNumber);
                this.columnConsultantRID = new global::System.Data.DataColumn("ConsultantRID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantRID);
                this.columnConsultantStatusID = new global::System.Data.DataColumn("ConsultantStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantStatusID);
                this.columnClientSiteUID = new global::System.Data.DataColumn("ClientSiteUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientSiteUID);
                this.columnAssignedToUID = new global::System.Data.DataColumn("AssignedToUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignedToUID);
                this.columnRequestStatusID = new global::System.Data.DataColumn("RequestStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestStatusID);
                this.columnNextActionDate = new global::System.Data.DataColumn("NextActionDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNextActionDate);
                this.columnCompletedDate = new global::System.Data.DataColumn("CompletedDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCompletedDate);
                this.columnContact = new global::System.Data.DataColumn("Contact", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnContact);
                this.columnShortDescription = new global::System.Data.DataColumn("ShortDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShortDescription);
                this.columnLongDescription = new global::System.Data.DataColumn("LongDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLongDescription);
                this.columnCreatedDateTime = new global::System.Data.DataColumn("CreatedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDateTime);
                this.columnModifiedDateTime = new global::System.Data.DataColumn("ModifiedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDateTime);
                this.columnClientSiteName = new global::System.Data.DataColumn("ClientSiteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientSiteName);
                this.columnJobs = new global::System.Data.DataColumn("Jobs", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobs);
                this.columnAssignedToName = new global::System.Data.DataColumn("AssignedToName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignedToName);
                this.columnRequestStatusDescription = new global::System.Data.DataColumn("RequestStatusDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestStatusDescription);
                this.columnRequestStatusOrder = new global::System.Data.DataColumn("RequestStatusOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestStatusOrder);
                this.columnConsultantStatusDescription = new global::System.Data.DataColumn("ConsultantStatusDescription", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantStatusDescription);
                this.columnConsultantStatusOrder = new global::System.Data.DataColumn("ConsultantStatusOrder", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantStatusOrder);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_Request", new global::System.Data.DataColumn[] {
                                this.columnRequestUID}, true));
                this.columnRequestUID.AllowDBNull = false;
                this.columnRequestUID.Unique = true;
                this.columnRequestUID.Caption = "UID";
                this.columnRequestID.AutoIncrement = true;
                this.columnRequestID.AutoIncrementSeed = -1;
                this.columnRequestID.AutoIncrementStep = -1;
                this.columnRequestID.Caption = "ID";
                this.columnRequestNumber.MaxLength = 100;
                this.columnConsultantRID.AutoIncrement = true;
                this.columnConsultantRID.AutoIncrementSeed = -1;
                this.columnConsultantRID.AutoIncrementStep = -1;
                this.columnNextActionDate.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnCompletedDate.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnContact.MaxLength = 100;
                this.columnShortDescription.MaxLength = 200;
                this.columnLongDescription.MaxLength = 3500;
                this.columnCreatedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnModifiedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnClientSiteName.ReadOnly = true;
                this.columnJobs.ReadOnly = true;
                this.columnAssignedToName.ReadOnly = true;
                this.columnRequestStatusDescription.ReadOnly = true;
                this.columnRequestStatusOrder.ReadOnly = true;
                this.columnConsultantStatusDescription.ReadOnly = true;
                this.columnConsultantStatusOrder.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestRow NewRequestRow() {
                return ((RequestRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new RequestRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(RequestRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.ClientSiteNameColumn.Expression = "Parent(FK_Request_ClientSite).SiteName";
                this.JobsColumn.Expression = "COUNT(CHILD(FK_Job_Request).JobStatusID)";
                this.AssignedToNameColumn.Expression = "Parent(FK_Request_Consultant).Name";
                this.RequestStatusDescriptionColumn.Expression = "Parent(FK_Request_RequestStatus).Description";
                this.RequestStatusOrderColumn.Expression = "Parent(FK_Request_RequestStatus).DisplayOrder";
                this.ConsultantStatusDescriptionColumn.Expression = "ISNULL(Parent(FK_Request_ConsultantStatus).Description,Parent(FK_Request_RequestS" +
                    "tatus).Description)";
                this.ConsultantStatusOrderColumn.Expression = "ISNULL(Parent(FK_Request_ConsultantStatus).DisplayOrder, Parent(FK_Request_Reques" +
                    "tStatus).DisplayOrder)";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.RequestRowChanged != null)) {
                    this.RequestRowChanged(this, new RequestRowChangeEvent(((RequestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.RequestRowChanging != null)) {
                    this.RequestRowChanging(this, new RequestRowChangeEvent(((RequestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.RequestRowDeleted != null)) {
                    this.RequestRowDeleted(this, new RequestRowChangeEvent(((RequestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.RequestRowDeleting != null)) {
                    this.RequestRowDeleting(this, new RequestRowChangeEvent(((RequestRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveRequestRow(RequestRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                activiserDataSet ds = new activiserDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "RequestDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JobStatusDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnJobStatusID;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnCreatedDateTime;
            
            private global::System.Data.DataColumn columnModifiedDateTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusDataTable() {
                this.TableName = "JobStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JobStatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobStatusIDColumn {
                get {
                    return this.columnJobStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDateTimeColumn {
                get {
                    return this.columnCreatedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDateTimeColumn {
                get {
                    return this.columnModifiedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusRow this[int index] {
                get {
                    return ((JobStatusRow)(this.Rows[index]));
                }
            }
            
            public event JobStatusRowChangeEventHandler JobStatusRowChanging;
            
            public event JobStatusRowChangeEventHandler JobStatusRowChanged;
            
            public event JobStatusRowChangeEventHandler JobStatusRowDeleting;
            
            public event JobStatusRowChangeEventHandler JobStatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJobStatusRow(JobStatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusRow AddJobStatusRow(int JobStatusID, string Description, System.DateTime CreatedDateTime, System.DateTime ModifiedDateTime) {
                JobStatusRow rowJobStatusRow = ((JobStatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        JobStatusID,
                        Description,
                        CreatedDateTime,
                        ModifiedDateTime};
                rowJobStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJobStatusRow);
                return rowJobStatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusRow FindByJobStatusID(int JobStatusID) {
                return ((JobStatusRow)(this.Rows.Find(new object[] {
                            JobStatusID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JobStatusDataTable cln = ((JobStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JobStatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnJobStatusID = base.Columns["JobStatusID"];
                this.columnDescription = base.Columns["Description"];
                this.columnCreatedDateTime = base.Columns["CreatedDateTime"];
                this.columnModifiedDateTime = base.Columns["ModifiedDateTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnJobStatusID = new global::System.Data.DataColumn("JobStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobStatusID);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnCreatedDateTime = new global::System.Data.DataColumn("CreatedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDateTime);
                this.columnModifiedDateTime = new global::System.Data.DataColumn("ModifiedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDateTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_JobStatus", new global::System.Data.DataColumn[] {
                                this.columnJobStatusID}, true));
                this.columnJobStatusID.AllowDBNull = false;
                this.columnJobStatusID.Unique = true;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 50;
                this.columnCreatedDateTime.AllowDBNull = false;
                this.columnCreatedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnModifiedDateTime.AllowDBNull = false;
                this.columnModifiedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusRow NewJobStatusRow() {
                return ((JobStatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JobStatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JobStatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JobStatusRowChanged != null)) {
                    this.JobStatusRowChanged(this, new JobStatusRowChangeEvent(((JobStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JobStatusRowChanging != null)) {
                    this.JobStatusRowChanging(this, new JobStatusRowChangeEvent(((JobStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JobStatusRowDeleted != null)) {
                    this.JobStatusRowDeleted(this, new JobStatusRowChangeEvent(((JobStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JobStatusRowDeleting != null)) {
                    this.JobStatusRowDeleting(this, new JobStatusRowChangeEvent(((JobStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJobStatusRow(JobStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                activiserDataSet ds = new activiserDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JobStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class JobDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnJobUID;
            
            private global::System.Data.DataColumn columnJobID;
            
            private global::System.Data.DataColumn columnJobNumber;
            
            private global::System.Data.DataColumn columnConsultantJobID;
            
            private global::System.Data.DataColumn columnConsultantUID;
            
            private global::System.Data.DataColumn columnClientSiteUID;
            
            private global::System.Data.DataColumn columnRequestUID;
            
            private global::System.Data.DataColumn columnJobDate;
            
            private global::System.Data.DataColumn columnStartTime;
            
            private global::System.Data.DataColumn columnFinishTime;
            
            private global::System.Data.DataColumn columnJobDetails;
            
            private global::System.Data.DataColumn columnJobNotes;
            
            private global::System.Data.DataColumn columnEquipment;
            
            private global::System.Data.DataColumn columnJobStatusID;
            
            private global::System.Data.DataColumn columnReturnDate;
            
            private global::System.Data.DataColumn columnSignatory;
            
            private global::System.Data.DataColumn columnSignature;
            
            private global::System.Data.DataColumn columnEmail;
            
            private global::System.Data.DataColumn columnEmailStatus;
            
            private global::System.Data.DataColumn columnMinutesTravelled;
            
            private global::System.Data.DataColumn columnCreatedDateTime;
            
            private global::System.Data.DataColumn columnModifiedDateTime;
            
            private global::System.Data.DataColumn columnFlag;
            
            private global::System.Data.DataColumn columnConsultantName;
            
            private global::System.Data.DataColumn columnRequestNumber;
            
            private global::System.Data.DataColumn columnClientSiteName;
            
            private global::System.Data.DataColumn columnTrackingTimeStamp;
            
            private global::System.Data.DataColumn columnTrackingInfo;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobDataTable() : 
                    this(false) {
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobDataTable(bool initExpressions) {
                this.TableName = "Job";
                this.BeginInit();
                this.InitClass();
                if ((initExpressions == true)) {
                    this.InitExpressions();
                }
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JobDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobUIDColumn {
                get {
                    return this.columnJobUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobIDColumn {
                get {
                    return this.columnJobID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobNumberColumn {
                get {
                    return this.columnJobNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantJobIDColumn {
                get {
                    return this.columnConsultantJobID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantUIDColumn {
                get {
                    return this.columnConsultantUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientSiteUIDColumn {
                get {
                    return this.columnClientSiteUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestUIDColumn {
                get {
                    return this.columnRequestUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobDateColumn {
                get {
                    return this.columnJobDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartTimeColumn {
                get {
                    return this.columnStartTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FinishTimeColumn {
                get {
                    return this.columnFinishTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobDetailsColumn {
                get {
                    return this.columnJobDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobNotesColumn {
                get {
                    return this.columnJobNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EquipmentColumn {
                get {
                    return this.columnEquipment;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobStatusIDColumn {
                get {
                    return this.columnJobStatusID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ReturnDateColumn {
                get {
                    return this.columnReturnDate;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SignatoryColumn {
                get {
                    return this.columnSignatory;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SignatureColumn {
                get {
                    return this.columnSignature;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailColumn {
                get {
                    return this.columnEmail;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EmailStatusColumn {
                get {
                    return this.columnEmailStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinutesTravelledColumn {
                get {
                    return this.columnMinutesTravelled;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDateTimeColumn {
                get {
                    return this.columnCreatedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDateTimeColumn {
                get {
                    return this.columnModifiedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FlagColumn {
                get {
                    return this.columnFlag;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantNameColumn {
                get {
                    return this.columnConsultantName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RequestNumberColumn {
                get {
                    return this.columnRequestNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientSiteNameColumn {
                get {
                    return this.columnClientSiteName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrackingTimeStampColumn {
                get {
                    return this.columnTrackingTimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TrackingInfoColumn {
                get {
                    return this.columnTrackingInfo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow this[int index] {
                get {
                    return ((JobRow)(this.Rows[index]));
                }
            }
            
            public event JobRowChangeEventHandler JobRowChanging;
            
            public event JobRowChangeEventHandler JobRowChanged;
            
            public event JobRowChangeEventHandler JobRowDeleting;
            
            public event JobRowChangeEventHandler JobRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddJobRow(JobRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow AddJobRow(
                        System.Guid JobUID, 
                        string JobNumber, 
                        ConsultantRow parentConsultantRowByFK_Job_Consultant, 
                        ClientSiteRow parentClientSiteRowByFK_Job_ClientSite, 
                        RequestRow parentRequestRowByFK_Job_Request, 
                        System.DateTime JobDate, 
                        System.DateTime StartTime, 
                        System.DateTime FinishTime, 
                        string JobDetails, 
                        string JobNotes, 
                        string Equipment, 
                        JobStatusRow parentJobStatusRowByFK_JobStatus_Job, 
                        System.DateTime ReturnDate, 
                        string Signatory, 
                        string Signature, 
                        string Email, 
                        byte EmailStatus, 
                        int MinutesTravelled, 
                        System.DateTime CreatedDateTime, 
                        System.DateTime ModifiedDateTime, 
                        int Flag, 
                        string ConsultantName, 
                        string RequestNumber, 
                        string ClientSiteName, 
                        System.DateTime TrackingTimeStamp, 
                        string TrackingInfo) {
                JobRow rowJobRow = ((JobRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        JobUID,
                        null,
                        JobNumber,
                        null,
                        null,
                        null,
                        null,
                        JobDate,
                        StartTime,
                        FinishTime,
                        JobDetails,
                        JobNotes,
                        Equipment,
                        null,
                        ReturnDate,
                        Signatory,
                        Signature,
                        Email,
                        EmailStatus,
                        MinutesTravelled,
                        CreatedDateTime,
                        ModifiedDateTime,
                        Flag,
                        ConsultantName,
                        RequestNumber,
                        ClientSiteName,
                        TrackingTimeStamp,
                        TrackingInfo};
                if ((parentConsultantRowByFK_Job_Consultant != null)) {
                    columnValuesArray[4] = parentConsultantRowByFK_Job_Consultant[5];
                }
                if ((parentClientSiteRowByFK_Job_ClientSite != null)) {
                    columnValuesArray[5] = parentClientSiteRowByFK_Job_ClientSite[0];
                }
                if ((parentRequestRowByFK_Job_Request != null)) {
                    columnValuesArray[6] = parentRequestRowByFK_Job_Request[0];
                }
                if ((parentJobStatusRowByFK_JobStatus_Job != null)) {
                    columnValuesArray[13] = parentJobStatusRowByFK_JobStatus_Job[0];
                }
                rowJobRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJobRow);
                return rowJobRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow AddJobRow(
                        System.Guid JobUID, 
                        string JobNumber, 
                        ConsultantRow parentConsultantRowByFK_Job_Consultant, 
                        ClientSiteRow parentClientSiteRowByFK_Job_ClientSite, 
                        RequestRow parentRequestRowByFK_Job_Request, 
                        System.DateTime JobDate, 
                        System.DateTime StartTime, 
                        System.DateTime FinishTime, 
                        string JobDetails, 
                        string JobNotes, 
                        string Equipment, 
                        JobStatusRow parentJobStatusRowByFK_JobStatus_Job, 
                        System.DateTime ReturnDate, 
                        string Signatory, 
                        string Signature, 
                        string Email, 
                        byte EmailStatus, 
                        int MinutesTravelled, 
                        System.DateTime CreatedDateTime, 
                        System.DateTime ModifiedDateTime, 
                        int Flag, 
                        System.DateTime TrackingTimeStamp, 
                        string TrackingInfo) {
                JobRow rowJobRow = ((JobRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        JobUID,
                        null,
                        JobNumber,
                        null,
                        null,
                        null,
                        null,
                        JobDate,
                        StartTime,
                        FinishTime,
                        JobDetails,
                        JobNotes,
                        Equipment,
                        null,
                        ReturnDate,
                        Signatory,
                        Signature,
                        Email,
                        EmailStatus,
                        MinutesTravelled,
                        CreatedDateTime,
                        ModifiedDateTime,
                        Flag,
                        null,
                        null,
                        null,
                        TrackingTimeStamp,
                        TrackingInfo};
                if ((parentConsultantRowByFK_Job_Consultant != null)) {
                    columnValuesArray[4] = parentConsultantRowByFK_Job_Consultant[5];
                }
                if ((parentClientSiteRowByFK_Job_ClientSite != null)) {
                    columnValuesArray[5] = parentClientSiteRowByFK_Job_ClientSite[0];
                }
                if ((parentRequestRowByFK_Job_Request != null)) {
                    columnValuesArray[6] = parentRequestRowByFK_Job_Request[0];
                }
                if ((parentJobStatusRowByFK_JobStatus_Job != null)) {
                    columnValuesArray[13] = parentJobStatusRowByFK_JobStatus_Job[0];
                }
                rowJobRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowJobRow);
                return rowJobRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow FindByJobUID(System.Guid JobUID) {
                return ((JobRow)(this.Rows.Find(new object[] {
                            JobUID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                JobDataTable cln = ((JobDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new JobDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnJobUID = base.Columns["JobUID"];
                this.columnJobID = base.Columns["JobID"];
                this.columnJobNumber = base.Columns["JobNumber"];
                this.columnConsultantJobID = base.Columns["ConsultantJobID"];
                this.columnConsultantUID = base.Columns["ConsultantUID"];
                this.columnClientSiteUID = base.Columns["ClientSiteUID"];
                this.columnRequestUID = base.Columns["RequestUID"];
                this.columnJobDate = base.Columns["JobDate"];
                this.columnStartTime = base.Columns["StartTime"];
                this.columnFinishTime = base.Columns["FinishTime"];
                this.columnJobDetails = base.Columns["JobDetails"];
                this.columnJobNotes = base.Columns["JobNotes"];
                this.columnEquipment = base.Columns["Equipment"];
                this.columnJobStatusID = base.Columns["JobStatusID"];
                this.columnReturnDate = base.Columns["ReturnDate"];
                this.columnSignatory = base.Columns["Signatory"];
                this.columnSignature = base.Columns["Signature"];
                this.columnEmail = base.Columns["Email"];
                this.columnEmailStatus = base.Columns["EmailStatus"];
                this.columnMinutesTravelled = base.Columns["MinutesTravelled"];
                this.columnCreatedDateTime = base.Columns["CreatedDateTime"];
                this.columnModifiedDateTime = base.Columns["ModifiedDateTime"];
                this.columnFlag = base.Columns["Flag"];
                this.columnConsultantName = base.Columns["ConsultantName"];
                this.columnRequestNumber = base.Columns["RequestNumber"];
                this.columnClientSiteName = base.Columns["ClientSiteName"];
                this.columnTrackingTimeStamp = base.Columns["TrackingTimeStamp"];
                this.columnTrackingInfo = base.Columns["TrackingInfo"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnJobUID = new global::System.Data.DataColumn("JobUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobUID);
                this.columnJobID = new global::System.Data.DataColumn("JobID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobID);
                this.columnJobNumber = new global::System.Data.DataColumn("JobNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobNumber);
                this.columnConsultantJobID = new global::System.Data.DataColumn("ConsultantJobID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantJobID);
                this.columnConsultantUID = new global::System.Data.DataColumn("ConsultantUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantUID);
                this.columnClientSiteUID = new global::System.Data.DataColumn("ClientSiteUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientSiteUID);
                this.columnRequestUID = new global::System.Data.DataColumn("RequestUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestUID);
                this.columnJobDate = new global::System.Data.DataColumn("JobDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobDate);
                this.columnStartTime = new global::System.Data.DataColumn("StartTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartTime);
                this.columnFinishTime = new global::System.Data.DataColumn("FinishTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFinishTime);
                this.columnJobDetails = new global::System.Data.DataColumn("JobDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobDetails);
                this.columnJobNotes = new global::System.Data.DataColumn("JobNotes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobNotes);
                this.columnEquipment = new global::System.Data.DataColumn("Equipment", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEquipment);
                this.columnJobStatusID = new global::System.Data.DataColumn("JobStatusID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobStatusID);
                this.columnReturnDate = new global::System.Data.DataColumn("ReturnDate", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnReturnDate);
                this.columnSignatory = new global::System.Data.DataColumn("Signatory", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSignatory);
                this.columnSignature = new global::System.Data.DataColumn("Signature", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSignature);
                this.columnEmail = new global::System.Data.DataColumn("Email", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmail);
                this.columnEmailStatus = new global::System.Data.DataColumn("EmailStatus", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEmailStatus);
                this.columnMinutesTravelled = new global::System.Data.DataColumn("MinutesTravelled", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinutesTravelled);
                this.columnCreatedDateTime = new global::System.Data.DataColumn("CreatedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDateTime);
                this.columnModifiedDateTime = new global::System.Data.DataColumn("ModifiedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDateTime);
                this.columnFlag = new global::System.Data.DataColumn("Flag", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFlag);
                this.columnConsultantName = new global::System.Data.DataColumn("ConsultantName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantName);
                this.columnRequestNumber = new global::System.Data.DataColumn("RequestNumber", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRequestNumber);
                this.columnClientSiteName = new global::System.Data.DataColumn("ClientSiteName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientSiteName);
                this.columnTrackingTimeStamp = new global::System.Data.DataColumn("TrackingTimeStamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrackingTimeStamp);
                this.columnTrackingInfo = new global::System.Data.DataColumn("TrackingInfo", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTrackingInfo);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("PK_Job", new global::System.Data.DataColumn[] {
                                this.columnJobUID}, true));
                this.columnJobUID.AllowDBNull = false;
                this.columnJobUID.Unique = true;
                this.columnJobID.AutoIncrement = true;
                this.columnJobID.AutoIncrementSeed = -1;
                this.columnJobID.AutoIncrementStep = -1;
                this.columnJobNumber.MaxLength = 100;
                this.columnConsultantJobID.AutoIncrement = true;
                this.columnConsultantJobID.AutoIncrementSeed = -1;
                this.columnConsultantJobID.AutoIncrementStep = -1;
                this.columnJobDate.DateTimeMode = global::System.Data.DataSetDateTime.Local;
                this.columnStartTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnFinishTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnJobDetails.MaxLength = 3500;
                this.columnJobNotes.MaxLength = 1073741823;
                this.columnEquipment.MaxLength = 1073741823;
                this.columnJobStatusID.DefaultValue = ((int)(0));
                this.columnReturnDate.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnSignatory.MaxLength = 50;
                this.columnSignature.MaxLength = 2147483647;
                this.columnEmail.MaxLength = 100;
                this.columnEmailStatus.DefaultValue = ((byte)(0));
                this.columnCreatedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnModifiedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnFlag.DefaultValue = ((int)(0));
                this.columnConsultantName.ReadOnly = true;
                this.columnRequestNumber.ReadOnly = true;
                this.columnClientSiteName.ReadOnly = true;
                this.columnTrackingTimeStamp.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnTrackingInfo.DefaultValue = ((string)(""));
                this.columnTrackingInfo.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow NewJobRow() {
                return ((JobRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new JobRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(JobRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitExpressions() {
                this.ConsultantNameColumn.Expression = "Parent(FK_Job_Consultant).Name";
                this.RequestNumberColumn.Expression = "Parent(FK_Job_Request).RequestNumber";
                this.ClientSiteNameColumn.Expression = "Parent(FK_Job_ClientSite).SiteName";
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.JobRowChanged != null)) {
                    this.JobRowChanged(this, new JobRowChangeEvent(((JobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.JobRowChanging != null)) {
                    this.JobRowChanging(this, new JobRowChangeEvent(((JobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.JobRowDeleted != null)) {
                    this.JobRowDeleted(this, new JobRowChangeEvent(((JobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.JobRowDeleting != null)) {
                    this.JobRowDeleting(this, new JobRowChangeEvent(((JobRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveJobRow(JobRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                activiserDataSet ds = new activiserDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "JobDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ConsultantRow : global::System.Data.DataRow {
            
            private ConsultantDataTable tableConsultant;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsultant = ((ConsultantDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsultantNumber {
                get {
                    try {
                        return ((string)(this[this.tableConsultant.ConsultantNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantNumber\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.ConsultantNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableConsultant.NameColumn]));
                }
                set {
                    this[this.tableConsultant.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Username {
                get {
                    try {
                        return ((string)(this[this.tableConsultant.UsernameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Username\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.UsernameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EmailAddress {
                get {
                    try {
                        return ((string)(this[this.tableConsultant.EmailAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmailAddress\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.EmailAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string MobilePhone {
                get {
                    try {
                        return ((string)(this[this.tableConsultant.MobilePhoneColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MobilePhone\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.MobilePhoneColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ConsultantUID {
                get {
                    return ((global::System.Guid)(this[this.tableConsultant.ConsultantUIDColumn]));
                }
                set {
                    this[this.tableConsultant.ConsultantUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantID {
                get {
                    try {
                        return ((int)(this[this.tableConsultant.ConsultantIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantID\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.ConsultantIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableConsultant.CreatedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedDateTime\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.CreatedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ModifiedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableConsultant.ModifiedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedDateTime\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.ModifiedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinSyncTime {
                get {
                    try {
                        return ((int)(this[this.tableConsultant.MinSyncTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinSyncTime\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.MinSyncTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastSyncTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableConsultant.LastSyncTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastSyncTime\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.LastSyncTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SyncTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableConsultant.SyncTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncTime\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.SyncTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool MobileAlert {
                get {
                    try {
                        return ((bool)(this[this.tableConsultant.MobileAlertColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MobileAlert\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.MobileAlertColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActiviserUser {
                get {
                    try {
                        return ((bool)(this[this.tableConsultant.IsActiviserUserColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsActiviserUser\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.IsActiviserUserColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Management {
                get {
                    try {
                        return ((bool)(this[this.tableConsultant.ManagementColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Management\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.ManagementColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Administration {
                get {
                    try {
                        return ((bool)(this[this.tableConsultant.AdministrationColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Administration\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.AdministrationColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DomainLogon {
                get {
                    try {
                        return ((string)(this[this.tableConsultant.DomainLogonColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DomainLogon\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.DomainLogonColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TrackingTimestamp {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableConsultant.TrackingTimestampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrackingTimestamp\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.TrackingTimestampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrackingInfo {
                get {
                    try {
                        return ((string)(this[this.tableConsultant.TrackingInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrackingInfo\' in table \'Consultant\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultant.TrackingInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantNumberNull() {
                return this.IsNull(this.tableConsultant.ConsultantNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantNumberNull() {
                this[this.tableConsultant.ConsultantNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsUsernameNull() {
                return this.IsNull(this.tableConsultant.UsernameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetUsernameNull() {
                this[this.tableConsultant.UsernameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailAddressNull() {
                return this.IsNull(this.tableConsultant.EmailAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailAddressNull() {
                this[this.tableConsultant.EmailAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMobilePhoneNull() {
                return this.IsNull(this.tableConsultant.MobilePhoneColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMobilePhoneNull() {
                this[this.tableConsultant.MobilePhoneColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantIDNull() {
                return this.IsNull(this.tableConsultant.ConsultantIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantIDNull() {
                this[this.tableConsultant.ConsultantIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedDateTimeNull() {
                return this.IsNull(this.tableConsultant.CreatedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedDateTimeNull() {
                this[this.tableConsultant.CreatedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedDateTimeNull() {
                return this.IsNull(this.tableConsultant.ModifiedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedDateTimeNull() {
                this[this.tableConsultant.ModifiedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinSyncTimeNull() {
                return this.IsNull(this.tableConsultant.MinSyncTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinSyncTimeNull() {
                this[this.tableConsultant.MinSyncTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastSyncTimeNull() {
                return this.IsNull(this.tableConsultant.LastSyncTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastSyncTimeNull() {
                this[this.tableConsultant.LastSyncTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncTimeNull() {
                return this.IsNull(this.tableConsultant.SyncTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncTimeNull() {
                this[this.tableConsultant.SyncTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMobileAlertNull() {
                return this.IsNull(this.tableConsultant.MobileAlertColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMobileAlertNull() {
                this[this.tableConsultant.MobileAlertColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsActiviserUserNull() {
                return this.IsNull(this.tableConsultant.IsActiviserUserColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsActiviserUserNull() {
                this[this.tableConsultant.IsActiviserUserColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsManagementNull() {
                return this.IsNull(this.tableConsultant.ManagementColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetManagementNull() {
                this[this.tableConsultant.ManagementColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAdministrationNull() {
                return this.IsNull(this.tableConsultant.AdministrationColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAdministrationNull() {
                this[this.tableConsultant.AdministrationColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDomainLogonNull() {
                return this.IsNull(this.tableConsultant.DomainLogonColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDomainLogonNull() {
                this[this.tableConsultant.DomainLogonColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrackingTimestampNull() {
                return this.IsNull(this.tableConsultant.TrackingTimestampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrackingTimestampNull() {
                this[this.tableConsultant.TrackingTimestampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrackingInfoNull() {
                return this.IsNull(this.tableConsultant.TrackingInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrackingInfoNull() {
                this[this.tableConsultant.TrackingInfoColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow[] GetJobRows() {
                if ((this.Table.ChildRelations["FK_Job_Consultant"] == null)) {
                    return new JobRow[0];
                }
                else {
                    return ((JobRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Job_Consultant"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestRow[] GetRequestRows() {
                if ((this.Table.ChildRelations["FK_Request_Consultant"] == null)) {
                    return new RequestRow[0];
                }
                else {
                    return ((RequestRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Request_Consultant"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ClientSiteStatusRow : global::System.Data.DataRow {
            
            private ClientSiteStatusDataTable tableClientSiteStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientSiteStatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientSiteStatus = ((ClientSiteStatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientSiteStatusID {
                get {
                    return ((int)(this[this.tableClientSiteStatus.ClientSiteStatusIDColumn]));
                }
                set {
                    this[this.tableClientSiteStatus.ClientSiteStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableClientSiteStatus.DescriptionColumn]));
                }
                set {
                    this[this.tableClientSiteStatus.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableClientSiteStatus.IsActiveColumn]));
                }
                set {
                    this[this.tableClientSiteStatus.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientSiteStatus.CreatedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedDateTime\' in table \'ClientSiteStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSiteStatus.CreatedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ModifiedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientSiteStatus.ModifiedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedDateTime\' in table \'ClientSiteStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSiteStatus.ModifiedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedDateTimeNull() {
                return this.IsNull(this.tableClientSiteStatus.CreatedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedDateTimeNull() {
                this[this.tableClientSiteStatus.CreatedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedDateTimeNull() {
                return this.IsNull(this.tableClientSiteStatus.ModifiedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedDateTimeNull() {
                this[this.tableClientSiteStatus.ModifiedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteRow[] GetClientSiteRows() {
                if ((this.Table.ChildRelations["FK_ClientSite_ClientSiteStatus"] == null)) {
                    return new ClientSiteRow[0];
                }
                else {
                    return ((ClientSiteRow[])(base.GetChildRows(this.Table.ChildRelations["FK_ClientSite_ClientSiteStatus"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ClientSiteRow : global::System.Data.DataRow {
            
            private ClientSiteDataTable tableClientSite;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientSiteRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientSite = ((ClientSiteDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ClientSiteUID {
                get {
                    return ((global::System.Guid)(this[this.tableClientSite.ClientSiteUIDColumn]));
                }
                set {
                    this[this.tableClientSite.ClientSiteUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientSiteID {
                get {
                    try {
                        return ((int)(this[this.tableClientSite.ClientSiteIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientSiteID\' in table \'ClientSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSite.ClientSiteIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientSiteNumber {
                get {
                    try {
                        return ((string)(this[this.tableClientSite.ClientSiteNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientSiteNumber\' in table \'ClientSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSite.ClientSiteNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SiteName {
                get {
                    try {
                        return ((string)(this[this.tableClientSite.SiteNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteName\' in table \'ClientSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSite.SiteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SiteAddress {
                get {
                    try {
                        return ((string)(this[this.tableClientSite.SiteAddressColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteAddress\' in table \'ClientSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSite.SiteAddressColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SiteContactEmail {
                get {
                    try {
                        return ((string)(this[this.tableClientSite.SiteContactEmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteContactEmail\' in table \'ClientSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSite.SiteContactEmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SiteNotes {
                get {
                    try {
                        return ((string)(this[this.tableClientSite.SiteNotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SiteNotes\' in table \'ClientSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSite.SiteNotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contact {
                get {
                    try {
                        return ((string)(this[this.tableClientSite.ContactColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Contact\' in table \'ClientSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSite.ContactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactPhone1 {
                get {
                    try {
                        return ((string)(this[this.tableClientSite.ContactPhone1Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContactPhone1\' in table \'ClientSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSite.ContactPhone1Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ContactPhone2 {
                get {
                    try {
                        return ((string)(this[this.tableClientSite.ContactPhone2Column]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ContactPhone2\' in table \'ClientSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSite.ContactPhone2Column] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool Hold {
                get {
                    try {
                        return ((bool)(this[this.tableClientSite.HoldColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Hold\' in table \'ClientSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSite.HoldColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientSiteStatusID {
                get {
                    try {
                        return ((int)(this[this.tableClientSite.ClientSiteStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientSiteStatusID\' in table \'ClientSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSite.ClientSiteStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientSite.CreatedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedDateTime\' in table \'ClientSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSite.CreatedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ModifiedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientSite.ModifiedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedDateTime\' in table \'ClientSite\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSite.ModifiedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteStatusRow ClientSiteStatusRow {
                get {
                    return ((ClientSiteStatusRow)(this.GetParentRow(this.Table.ParentRelations["FK_ClientSite_ClientSiteStatus"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_ClientSite_ClientSiteStatus"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientSiteIDNull() {
                return this.IsNull(this.tableClientSite.ClientSiteIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientSiteIDNull() {
                this[this.tableClientSite.ClientSiteIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientSiteNumberNull() {
                return this.IsNull(this.tableClientSite.ClientSiteNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientSiteNumberNull() {
                this[this.tableClientSite.ClientSiteNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteNameNull() {
                return this.IsNull(this.tableClientSite.SiteNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteNameNull() {
                this[this.tableClientSite.SiteNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteAddressNull() {
                return this.IsNull(this.tableClientSite.SiteAddressColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteAddressNull() {
                this[this.tableClientSite.SiteAddressColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteContactEmailNull() {
                return this.IsNull(this.tableClientSite.SiteContactEmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteContactEmailNull() {
                this[this.tableClientSite.SiteContactEmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSiteNotesNull() {
                return this.IsNull(this.tableClientSite.SiteNotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSiteNotesNull() {
                this[this.tableClientSite.SiteNotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactNull() {
                return this.IsNull(this.tableClientSite.ContactColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactNull() {
                this[this.tableClientSite.ContactColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactPhone1Null() {
                return this.IsNull(this.tableClientSite.ContactPhone1Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactPhone1Null() {
                this[this.tableClientSite.ContactPhone1Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactPhone2Null() {
                return this.IsNull(this.tableClientSite.ContactPhone2Column);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactPhone2Null() {
                this[this.tableClientSite.ContactPhone2Column] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHoldNull() {
                return this.IsNull(this.tableClientSite.HoldColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHoldNull() {
                this[this.tableClientSite.HoldColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientSiteStatusIDNull() {
                return this.IsNull(this.tableClientSite.ClientSiteStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientSiteStatusIDNull() {
                this[this.tableClientSite.ClientSiteStatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedDateTimeNull() {
                return this.IsNull(this.tableClientSite.CreatedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedDateTimeNull() {
                this[this.tableClientSite.CreatedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedDateTimeNull() {
                return this.IsNull(this.tableClientSite.ModifiedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedDateTimeNull() {
                this[this.tableClientSite.ModifiedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow[] GetJobRows() {
                if ((this.Table.ChildRelations["FK_Job_ClientSite"] == null)) {
                    return new JobRow[0];
                }
                else {
                    return ((JobRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Job_ClientSite"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestRow[] GetRequestRows() {
                if ((this.Table.ChildRelations["FK_Request_ClientSite"] == null)) {
                    return new RequestRow[0];
                }
                else {
                    return ((RequestRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Request_ClientSite"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class RequestStatusRow : global::System.Data.DataRow {
            
            private RequestStatusDataTable tableRequestStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RequestStatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRequestStatus = ((RequestStatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RequestStatusID {
                get {
                    return ((int)(this[this.tableRequestStatus.RequestStatusIDColumn]));
                }
                set {
                    this[this.tableRequestStatus.RequestStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableRequestStatus.DescriptionColumn]));
                }
                set {
                    this[this.tableRequestStatus.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int DisplayOrder {
                get {
                    try {
                        return ((int)(this[this.tableRequestStatus.DisplayOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DisplayOrder\' in table \'RequestStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequestStatus.DisplayOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientMenuItem {
                get {
                    return ((bool)(this[this.tableRequestStatus.IsClientMenuItemColumn]));
                }
                set {
                    this[this.tableRequestStatus.IsClientMenuItemColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReasonRequired {
                get {
                    return ((bool)(this[this.tableRequestStatus.IsReasonRequiredColumn]));
                }
                set {
                    this[this.tableRequestStatus.IsReasonRequiredColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNewStatus {
                get {
                    return ((bool)(this[this.tableRequestStatus.IsNewStatusColumn]));
                }
                set {
                    this[this.tableRequestStatus.IsNewStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsInProgressStatus {
                get {
                    return ((bool)(this[this.tableRequestStatus.IsInProgressStatusColumn]));
                }
                set {
                    this[this.tableRequestStatus.IsInProgressStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompleteStatus {
                get {
                    return ((bool)(this[this.tableRequestStatus.IsCompleteStatusColumn]));
                }
                set {
                    this[this.tableRequestStatus.IsCompleteStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCancelledStatus {
                get {
                    return ((bool)(this[this.tableRequestStatus.IsCancelledStatusColumn]));
                }
                set {
                    this[this.tableRequestStatus.IsCancelledStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRequestStatus.CreatedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedDateTime\' in table \'RequestStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequestStatus.CreatedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ModifiedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRequestStatus.ModifiedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedDateTime\' in table \'RequestStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequestStatus.ModifiedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Colour {
                get {
                    return ((int)(this[this.tableRequestStatus.ColourColumn]));
                }
                set {
                    this[this.tableRequestStatus.ColourColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int BackColour {
                get {
                    return ((int)(this[this.tableRequestStatus.BackColourColumn]));
                }
                set {
                    this[this.tableRequestStatus.BackColourColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDisplayOrderNull() {
                return this.IsNull(this.tableRequestStatus.DisplayOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDisplayOrderNull() {
                this[this.tableRequestStatus.DisplayOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedDateTimeNull() {
                return this.IsNull(this.tableRequestStatus.CreatedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedDateTimeNull() {
                this[this.tableRequestStatus.CreatedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedDateTimeNull() {
                return this.IsNull(this.tableRequestStatus.ModifiedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedDateTimeNull() {
                this[this.tableRequestStatus.ModifiedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestRow[] GetRequestRowsByFK_Request_ConsultantStatus() {
                if ((this.Table.ChildRelations["FK_Request_ConsultantStatus"] == null)) {
                    return new RequestRow[0];
                }
                else {
                    return ((RequestRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Request_ConsultantStatus"])));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestRow[] GetRequestRowsByFK_Request_RequestStatus() {
                if ((this.Table.ChildRelations["FK_Request_RequestStatus"] == null)) {
                    return new RequestRow[0];
                }
                else {
                    return ((RequestRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Request_RequestStatus"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class RequestRow : global::System.Data.DataRow {
            
            private RequestDataTable tableRequest;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal RequestRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableRequest = ((RequestDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid RequestUID {
                get {
                    return ((global::System.Guid)(this[this.tableRequest.RequestUIDColumn]));
                }
                set {
                    this[this.tableRequest.RequestUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RequestID {
                get {
                    try {
                        return ((int)(this[this.tableRequest.RequestIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestID\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.RequestIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RequestNumber {
                get {
                    try {
                        return ((string)(this[this.tableRequest.RequestNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestNumber\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.RequestNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantRID {
                get {
                    try {
                        return ((int)(this[this.tableRequest.ConsultantRIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantRID\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.ConsultantRIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantStatusID {
                get {
                    try {
                        return ((int)(this[this.tableRequest.ConsultantStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantStatusID\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.ConsultantStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ClientSiteUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableRequest.ClientSiteUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientSiteUID\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.ClientSiteUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid AssignedToUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableRequest.AssignedToUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignedToUID\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.AssignedToUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RequestStatusID {
                get {
                    try {
                        return ((int)(this[this.tableRequest.RequestStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestStatusID\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.RequestStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime NextActionDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRequest.NextActionDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NextActionDate\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.NextActionDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CompletedDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRequest.CompletedDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CompletedDate\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.CompletedDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Contact {
                get {
                    try {
                        return ((string)(this[this.tableRequest.ContactColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Contact\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.ContactColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ShortDescription {
                get {
                    try {
                        return ((string)(this[this.tableRequest.ShortDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ShortDescription\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.ShortDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string LongDescription {
                get {
                    try {
                        return ((string)(this[this.tableRequest.LongDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LongDescription\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.LongDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRequest.CreatedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedDateTime\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.CreatedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ModifiedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableRequest.ModifiedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedDateTime\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.ModifiedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientSiteName {
                get {
                    try {
                        return ((string)(this[this.tableRequest.ClientSiteNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientSiteName\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.ClientSiteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Jobs {
                get {
                    try {
                        return ((int)(this[this.tableRequest.JobsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Jobs\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.JobsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AssignedToName {
                get {
                    try {
                        return ((string)(this[this.tableRequest.AssignedToNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignedToName\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.AssignedToNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RequestStatusDescription {
                get {
                    try {
                        return ((string)(this[this.tableRequest.RequestStatusDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestStatusDescription\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.RequestStatusDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int RequestStatusOrder {
                get {
                    try {
                        return ((int)(this[this.tableRequest.RequestStatusOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestStatusOrder\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.RequestStatusOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsultantStatusDescription {
                get {
                    try {
                        return ((string)(this[this.tableRequest.ConsultantStatusDescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantStatusDescription\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.ConsultantStatusDescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantStatusOrder {
                get {
                    try {
                        return ((int)(this[this.tableRequest.ConsultantStatusOrderColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantStatusOrder\' in table \'Request\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableRequest.ConsultantStatusOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteRow ClientSiteRow {
                get {
                    return ((ClientSiteRow)(this.GetParentRow(this.Table.ParentRelations["FK_Request_ClientSite"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Request_ClientSite"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantRow ConsultantRow {
                get {
                    return ((ConsultantRow)(this.GetParentRow(this.Table.ParentRelations["FK_Request_Consultant"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Request_Consultant"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusRow RequestStatusRowByFK_Request_ConsultantStatus {
                get {
                    return ((RequestStatusRow)(this.GetParentRow(this.Table.ParentRelations["FK_Request_ConsultantStatus"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Request_ConsultantStatus"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusRow RequestStatusRowByFK_Request_RequestStatus {
                get {
                    return ((RequestStatusRow)(this.GetParentRow(this.Table.ParentRelations["FK_Request_RequestStatus"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Request_RequestStatus"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestIDNull() {
                return this.IsNull(this.tableRequest.RequestIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestIDNull() {
                this[this.tableRequest.RequestIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestNumberNull() {
                return this.IsNull(this.tableRequest.RequestNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestNumberNull() {
                this[this.tableRequest.RequestNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantRIDNull() {
                return this.IsNull(this.tableRequest.ConsultantRIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantRIDNull() {
                this[this.tableRequest.ConsultantRIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantStatusIDNull() {
                return this.IsNull(this.tableRequest.ConsultantStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantStatusIDNull() {
                this[this.tableRequest.ConsultantStatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientSiteUIDNull() {
                return this.IsNull(this.tableRequest.ClientSiteUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientSiteUIDNull() {
                this[this.tableRequest.ClientSiteUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignedToUIDNull() {
                return this.IsNull(this.tableRequest.AssignedToUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignedToUIDNull() {
                this[this.tableRequest.AssignedToUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestStatusIDNull() {
                return this.IsNull(this.tableRequest.RequestStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestStatusIDNull() {
                this[this.tableRequest.RequestStatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNextActionDateNull() {
                return this.IsNull(this.tableRequest.NextActionDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNextActionDateNull() {
                this[this.tableRequest.NextActionDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCompletedDateNull() {
                return this.IsNull(this.tableRequest.CompletedDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCompletedDateNull() {
                this[this.tableRequest.CompletedDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsContactNull() {
                return this.IsNull(this.tableRequest.ContactColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetContactNull() {
                this[this.tableRequest.ContactColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShortDescriptionNull() {
                return this.IsNull(this.tableRequest.ShortDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShortDescriptionNull() {
                this[this.tableRequest.ShortDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLongDescriptionNull() {
                return this.IsNull(this.tableRequest.LongDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLongDescriptionNull() {
                this[this.tableRequest.LongDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedDateTimeNull() {
                return this.IsNull(this.tableRequest.CreatedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedDateTimeNull() {
                this[this.tableRequest.CreatedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedDateTimeNull() {
                return this.IsNull(this.tableRequest.ModifiedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedDateTimeNull() {
                this[this.tableRequest.ModifiedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientSiteNameNull() {
                return this.IsNull(this.tableRequest.ClientSiteNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientSiteNameNull() {
                this[this.tableRequest.ClientSiteNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobsNull() {
                return this.IsNull(this.tableRequest.JobsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobsNull() {
                this[this.tableRequest.JobsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignedToNameNull() {
                return this.IsNull(this.tableRequest.AssignedToNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignedToNameNull() {
                this[this.tableRequest.AssignedToNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestStatusDescriptionNull() {
                return this.IsNull(this.tableRequest.RequestStatusDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestStatusDescriptionNull() {
                this[this.tableRequest.RequestStatusDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestStatusOrderNull() {
                return this.IsNull(this.tableRequest.RequestStatusOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestStatusOrderNull() {
                this[this.tableRequest.RequestStatusOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantStatusDescriptionNull() {
                return this.IsNull(this.tableRequest.ConsultantStatusDescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantStatusDescriptionNull() {
                this[this.tableRequest.ConsultantStatusDescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantStatusOrderNull() {
                return this.IsNull(this.tableRequest.ConsultantStatusOrderColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantStatusOrderNull() {
                this[this.tableRequest.ConsultantStatusOrderColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow[] GetJobRows() {
                if ((this.Table.ChildRelations["FK_Job_Request"] == null)) {
                    return new JobRow[0];
                }
                else {
                    return ((JobRow[])(base.GetChildRows(this.Table.ChildRelations["FK_Job_Request"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class JobStatusRow : global::System.Data.DataRow {
            
            private JobStatusDataTable tableJobStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JobStatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJobStatus = ((JobStatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobStatusID {
                get {
                    return ((int)(this[this.tableJobStatus.JobStatusIDColumn]));
                }
                set {
                    this[this.tableJobStatus.JobStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableJobStatus.DescriptionColumn]));
                }
                set {
                    this[this.tableJobStatus.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableJobStatus.CreatedDateTimeColumn]));
                }
                set {
                    this[this.tableJobStatus.CreatedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ModifiedDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableJobStatus.ModifiedDateTimeColumn]));
                }
                set {
                    this[this.tableJobStatus.ModifiedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow[] GetJobRows() {
                if ((this.Table.ChildRelations["FK_JobStatus_Job"] == null)) {
                    return new JobRow[0];
                }
                else {
                    return ((JobRow[])(base.GetChildRows(this.Table.ChildRelations["FK_JobStatus_Job"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class JobRow : global::System.Data.DataRow {
            
            private JobDataTable tableJob;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal JobRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableJob = ((JobDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid JobUID {
                get {
                    return ((global::System.Guid)(this[this.tableJob.JobUIDColumn]));
                }
                set {
                    this[this.tableJob.JobUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobID {
                get {
                    try {
                        return ((int)(this[this.tableJob.JobIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobID\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.JobIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobNumber {
                get {
                    try {
                        return ((string)(this[this.tableJob.JobNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobNumber\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.JobNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ConsultantJobID {
                get {
                    try {
                        return ((int)(this[this.tableJob.ConsultantJobIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantJobID\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.ConsultantJobIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ConsultantUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableJob.ConsultantUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantUID\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.ConsultantUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ClientSiteUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableJob.ClientSiteUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientSiteUID\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.ClientSiteUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid RequestUID {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableJob.RequestUIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestUID\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.RequestUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime JobDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJob.JobDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobDate\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.JobDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime StartTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJob.StartTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartTime\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.StartTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime FinishTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJob.FinishTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FinishTime\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.FinishTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobDetails {
                get {
                    try {
                        return ((string)(this[this.tableJob.JobDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobDetails\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.JobDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string JobNotes {
                get {
                    try {
                        return ((string)(this[this.tableJob.JobNotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobNotes\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.JobNotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Equipment {
                get {
                    try {
                        return ((string)(this[this.tableJob.EquipmentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Equipment\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.EquipmentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobStatusID {
                get {
                    try {
                        return ((int)(this[this.tableJob.JobStatusIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'JobStatusID\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.JobStatusIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ReturnDate {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJob.ReturnDateColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ReturnDate\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.ReturnDateColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Signatory {
                get {
                    try {
                        return ((string)(this[this.tableJob.SignatoryColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Signatory\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.SignatoryColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Signature {
                get {
                    try {
                        return ((string)(this[this.tableJob.SignatureColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Signature\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.SignatureColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Email {
                get {
                    try {
                        return ((string)(this[this.tableJob.EmailColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Email\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.EmailColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte EmailStatus {
                get {
                    try {
                        return ((byte)(this[this.tableJob.EmailStatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EmailStatus\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.EmailStatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinutesTravelled {
                get {
                    try {
                        return ((int)(this[this.tableJob.MinutesTravelledColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinutesTravelled\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.MinutesTravelledColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJob.CreatedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedDateTime\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.CreatedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ModifiedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJob.ModifiedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedDateTime\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.ModifiedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Flag {
                get {
                    try {
                        return ((int)(this[this.tableJob.FlagColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Flag\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.FlagColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ConsultantName {
                get {
                    try {
                        return ((string)(this[this.tableJob.ConsultantNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ConsultantName\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.ConsultantNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string RequestNumber {
                get {
                    try {
                        return ((string)(this[this.tableJob.RequestNumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RequestNumber\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.RequestNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ClientSiteName {
                get {
                    try {
                        return ((string)(this[this.tableJob.ClientSiteNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientSiteName\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.ClientSiteNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TrackingTimeStamp {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableJob.TrackingTimeStampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrackingTimeStamp\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.TrackingTimeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string TrackingInfo {
                get {
                    try {
                        return ((string)(this[this.tableJob.TrackingInfoColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TrackingInfo\' in table \'Job\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableJob.TrackingInfoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantRow ConsultantRow {
                get {
                    return ((ConsultantRow)(this.GetParentRow(this.Table.ParentRelations["FK_Job_Consultant"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Job_Consultant"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteRow ClientSiteRow {
                get {
                    return ((ClientSiteRow)(this.GetParentRow(this.Table.ParentRelations["FK_Job_ClientSite"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Job_ClientSite"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestRow RequestRow {
                get {
                    return ((RequestRow)(this.GetParentRow(this.Table.ParentRelations["FK_Job_Request"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_Job_Request"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusRow JobStatusRow {
                get {
                    return ((JobStatusRow)(this.GetParentRow(this.Table.ParentRelations["FK_JobStatus_Job"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_JobStatus_Job"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobIDNull() {
                return this.IsNull(this.tableJob.JobIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobIDNull() {
                this[this.tableJob.JobIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobNumberNull() {
                return this.IsNull(this.tableJob.JobNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobNumberNull() {
                this[this.tableJob.JobNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantJobIDNull() {
                return this.IsNull(this.tableJob.ConsultantJobIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantJobIDNull() {
                this[this.tableJob.ConsultantJobIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantUIDNull() {
                return this.IsNull(this.tableJob.ConsultantUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantUIDNull() {
                this[this.tableJob.ConsultantUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientSiteUIDNull() {
                return this.IsNull(this.tableJob.ClientSiteUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientSiteUIDNull() {
                this[this.tableJob.ClientSiteUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestUIDNull() {
                return this.IsNull(this.tableJob.RequestUIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestUIDNull() {
                this[this.tableJob.RequestUIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobDateNull() {
                return this.IsNull(this.tableJob.JobDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobDateNull() {
                this[this.tableJob.JobDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartTimeNull() {
                return this.IsNull(this.tableJob.StartTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartTimeNull() {
                this[this.tableJob.StartTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFinishTimeNull() {
                return this.IsNull(this.tableJob.FinishTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFinishTimeNull() {
                this[this.tableJob.FinishTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobDetailsNull() {
                return this.IsNull(this.tableJob.JobDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobDetailsNull() {
                this[this.tableJob.JobDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobNotesNull() {
                return this.IsNull(this.tableJob.JobNotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobNotesNull() {
                this[this.tableJob.JobNotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEquipmentNull() {
                return this.IsNull(this.tableJob.EquipmentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEquipmentNull() {
                this[this.tableJob.EquipmentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsJobStatusIDNull() {
                return this.IsNull(this.tableJob.JobStatusIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetJobStatusIDNull() {
                this[this.tableJob.JobStatusIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsReturnDateNull() {
                return this.IsNull(this.tableJob.ReturnDateColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetReturnDateNull() {
                this[this.tableJob.ReturnDateColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSignatoryNull() {
                return this.IsNull(this.tableJob.SignatoryColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSignatoryNull() {
                this[this.tableJob.SignatoryColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSignatureNull() {
                return this.IsNull(this.tableJob.SignatureColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSignatureNull() {
                this[this.tableJob.SignatureColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailNull() {
                return this.IsNull(this.tableJob.EmailColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailNull() {
                this[this.tableJob.EmailColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEmailStatusNull() {
                return this.IsNull(this.tableJob.EmailStatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEmailStatusNull() {
                this[this.tableJob.EmailStatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinutesTravelledNull() {
                return this.IsNull(this.tableJob.MinutesTravelledColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinutesTravelledNull() {
                this[this.tableJob.MinutesTravelledColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedDateTimeNull() {
                return this.IsNull(this.tableJob.CreatedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedDateTimeNull() {
                this[this.tableJob.CreatedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedDateTimeNull() {
                return this.IsNull(this.tableJob.ModifiedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedDateTimeNull() {
                this[this.tableJob.ModifiedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFlagNull() {
                return this.IsNull(this.tableJob.FlagColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFlagNull() {
                this[this.tableJob.FlagColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsConsultantNameNull() {
                return this.IsNull(this.tableJob.ConsultantNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetConsultantNameNull() {
                this[this.tableJob.ConsultantNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRequestNumberNull() {
                return this.IsNull(this.tableJob.RequestNumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRequestNumberNull() {
                this[this.tableJob.RequestNumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientSiteNameNull() {
                return this.IsNull(this.tableJob.ClientSiteNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientSiteNameNull() {
                this[this.tableJob.ClientSiteNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrackingTimeStampNull() {
                return this.IsNull(this.tableJob.TrackingTimeStampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrackingTimeStampNull() {
                this[this.tableJob.TrackingTimeStampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTrackingInfoNull() {
                return this.IsNull(this.tableJob.TrackingInfoColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTrackingInfoNull() {
                this[this.tableJob.TrackingInfoColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ConsultantRowChangeEvent : global::System.EventArgs {
            
            private ConsultantRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantRowChangeEvent(ConsultantRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ClientSiteStatusRowChangeEvent : global::System.EventArgs {
            
            private ClientSiteStatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteStatusRowChangeEvent(ClientSiteStatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ClientSiteRowChangeEvent : global::System.EventArgs {
            
            private ClientSiteRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteRowChangeEvent(ClientSiteRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSiteRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class RequestStatusRowChangeEvent : global::System.EventArgs {
            
            private RequestStatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusRowChangeEvent(RequestStatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class RequestRowChangeEvent : global::System.EventArgs {
            
            private RequestRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestRowChangeEvent(RequestRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public RequestRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class JobStatusRowChangeEvent : global::System.EventArgs {
            
            private JobStatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusRowChangeEvent(JobStatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class JobRowChangeEvent : global::System.EventArgs {
            
            private JobRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRowChangeEvent(JobRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public JobRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("LanguageDataSet")]
    public partial class LanguageDataSet : global::System.Data.DataSet {
        
        private StringValueDataTable tableStringValue;
        
        private LanguageDataTable tableLanguage;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LanguageDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public StringValueDataTable StringValue {
            get {
                return this.tableStringValue;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public LanguageDataTable Language {
            get {
                return this.tableLanguage;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            LanguageDataSet cln = ((LanguageDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["StringValue"] != null)) {
                    base.Tables.Add(new StringValueDataTable(ds.Tables["StringValue"]));
                }
                if ((ds.Tables["Language"] != null)) {
                    base.Tables.Add(new LanguageDataTable(ds.Tables["Language"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableStringValue = ((StringValueDataTable)(base.Tables["StringValue"]));
            if ((initTable == true)) {
                if ((this.tableStringValue != null)) {
                    this.tableStringValue.InitVars();
                }
            }
            this.tableLanguage = ((LanguageDataTable)(base.Tables["Language"]));
            if ((initTable == true)) {
                if ((this.tableLanguage != null)) {
                    this.tableLanguage.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "LanguageDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.activiser.com/schemas/Language.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableStringValue = new StringValueDataTable();
            base.Tables.Add(this.tableStringValue);
            this.tableLanguage = new LanguageDataTable();
            base.Tables.Add(this.tableLanguage);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeStringValue() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeLanguage() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            LanguageDataSet ds = new LanguageDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void StringValueRowChangeEventHandler(object sender, StringValueRowChangeEvent e);
        
        public delegate void LanguageRowChangeEventHandler(object sender, LanguageRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class StringValueDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnCustomStringID;
            
            private global::System.Data.DataColumn columnClientKey;
            
            private global::System.Data.DataColumn columnLanguageId;
            
            private global::System.Data.DataColumn columnModuleName;
            
            private global::System.Data.DataColumn columnStringName;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnCreatedDateTime;
            
            private global::System.Data.DataColumn columnModifiedDateTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StringValueDataTable() {
                this.TableName = "StringValue";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StringValueDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StringIDColumn {
                get {
                    return this.columnCustomStringID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientKeyColumn {
                get {
                    return this.columnClientKey;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LanguageIdColumn {
                get {
                    return this.columnLanguageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModuleNameColumn {
                get {
                    return this.columnModuleName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StringNameColumn {
                get {
                    return this.columnStringName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDateTimeColumn {
                get {
                    return this.columnCreatedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDateTimeColumn {
                get {
                    return this.columnModifiedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StringValueRow this[int index] {
                get {
                    return ((StringValueRow)(this.Rows[index]));
                }
            }
            
            public event StringValueRowChangeEventHandler StringValueRowChanging;
            
            public event StringValueRowChangeEventHandler StringValueRowChanged;
            
            public event StringValueRowChangeEventHandler StringValueRowDeleting;
            
            public event StringValueRowChangeEventHandler StringValueRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddStringValueRow(StringValueRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StringValueRow AddStringValueRow(int ClientKey, int LanguageId, string ModuleName, string StringName, string Value, System.DateTime CreatedDateTime, System.DateTime ModifiedDateTime) {
                StringValueRow rowStringValueRow = ((StringValueRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        null,
                        ClientKey,
                        LanguageId,
                        ModuleName,
                        StringName,
                        Value,
                        CreatedDateTime,
                        ModifiedDateTime};
                rowStringValueRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowStringValueRow);
                return rowStringValueRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StringValueRow FindByStringID(int StringID) {
                return ((StringValueRow)(this.Rows.Find(new object[] {
                            StringID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                StringValueDataTable cln = ((StringValueDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new StringValueDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnCustomStringID = base.Columns["StringID"];
                this.columnClientKey = base.Columns["ClientKey"];
                this.columnLanguageId = base.Columns["LanguageId"];
                this.columnModuleName = base.Columns["ModuleName"];
                this.columnStringName = base.Columns["StringName"];
                this.columnValue = base.Columns["Value"];
                this.columnCreatedDateTime = base.Columns["CreatedDateTime"];
                this.columnModifiedDateTime = base.Columns["ModifiedDateTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnCustomStringID = new global::System.Data.DataColumn("StringID", typeof(int), null, global::System.Data.MappingType.Element);
                this.columnCustomStringID.ExtendedProperties.Add("Generator_ColumnVarNameInTable", "columnCustomStringID");
                this.columnCustomStringID.ExtendedProperties.Add("Generator_UserColumnName", "StringID");
                base.Columns.Add(this.columnCustomStringID);
                this.columnClientKey = new global::System.Data.DataColumn("ClientKey", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientKey);
                this.columnLanguageId = new global::System.Data.DataColumn("LanguageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLanguageId);
                this.columnModuleName = new global::System.Data.DataColumn("ModuleName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModuleName);
                this.columnStringName = new global::System.Data.DataColumn("StringName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStringName);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnCreatedDateTime = new global::System.Data.DataColumn("CreatedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDateTime);
                this.columnModifiedDateTime = new global::System.Data.DataColumn("ModifiedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDateTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnCustomStringID}, true));
                this.columnCustomStringID.AutoIncrement = true;
                this.columnCustomStringID.AllowDBNull = false;
                this.columnCustomStringID.ReadOnly = true;
                this.columnCustomStringID.Unique = true;
                this.columnClientKey.AllowDBNull = false;
                this.columnClientKey.DefaultValue = ((int)(1));
                this.columnLanguageId.AllowDBNull = false;
                this.columnLanguageId.DefaultValue = ((int)(1));
                this.columnModuleName.AllowDBNull = false;
                this.columnModuleName.MaxLength = 50;
                this.columnStringName.AllowDBNull = false;
                this.columnStringName.MaxLength = 50;
                this.columnValue.MaxLength = 2000;
                this.columnCreatedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnModifiedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StringValueRow NewStringValueRow() {
                return ((StringValueRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new StringValueRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(StringValueRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.StringValueRowChanged != null)) {
                    this.StringValueRowChanged(this, new StringValueRowChangeEvent(((StringValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.StringValueRowChanging != null)) {
                    this.StringValueRowChanging(this, new StringValueRowChangeEvent(((StringValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.StringValueRowDeleted != null)) {
                    this.StringValueRowDeleted(this, new StringValueRowChangeEvent(((StringValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.StringValueRowDeleting != null)) {
                    this.StringValueRowDeleting(this, new StringValueRowChangeEvent(((StringValueRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveStringValueRow(StringValueRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LanguageDataSet ds = new LanguageDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "StringValueDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class LanguageDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnLanguageId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnCreatedDateTime;
            
            private global::System.Data.DataColumn columnModifiedDateTime;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageDataTable() {
                this.TableName = "Language";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LanguageDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LanguageIdColumn {
                get {
                    return this.columnLanguageId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedDateTimeColumn {
                get {
                    return this.columnCreatedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedDateTimeColumn {
                get {
                    return this.columnModifiedDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageRow this[int index] {
                get {
                    return ((LanguageRow)(this.Rows[index]));
                }
            }
            
            public event LanguageRowChangeEventHandler LanguageRowChanging;
            
            public event LanguageRowChangeEventHandler LanguageRowChanged;
            
            public event LanguageRowChangeEventHandler LanguageRowDeleting;
            
            public event LanguageRowChangeEventHandler LanguageRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddLanguageRow(LanguageRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageRow AddLanguageRow(int LanguageId, string Name, string Description, System.DateTime CreatedDateTime, System.DateTime ModifiedDateTime) {
                LanguageRow rowLanguageRow = ((LanguageRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        LanguageId,
                        Name,
                        Description,
                        CreatedDateTime,
                        ModifiedDateTime};
                rowLanguageRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowLanguageRow);
                return rowLanguageRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageRow FindByLanguageId(int LanguageId) {
                return ((LanguageRow)(this.Rows.Find(new object[] {
                            LanguageId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                LanguageDataTable cln = ((LanguageDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new LanguageDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnLanguageId = base.Columns["LanguageId"];
                this.columnName = base.Columns["Name"];
                this.columnDescription = base.Columns["Description"];
                this.columnCreatedDateTime = base.Columns["CreatedDateTime"];
                this.columnModifiedDateTime = base.Columns["ModifiedDateTime"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnLanguageId = new global::System.Data.DataColumn("LanguageId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLanguageId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnCreatedDateTime = new global::System.Data.DataColumn("CreatedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedDateTime);
                this.columnModifiedDateTime = new global::System.Data.DataColumn("ModifiedDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedDateTime);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnLanguageId}, true));
                this.columnLanguageId.AllowDBNull = false;
                this.columnLanguageId.Unique = true;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnDescription.MaxLength = 250;
                this.columnCreatedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
                this.columnModifiedDateTime.DateTimeMode = global::System.Data.DataSetDateTime.Utc;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageRow NewLanguageRow() {
                return ((LanguageRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new LanguageRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(LanguageRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.LanguageRowChanged != null)) {
                    this.LanguageRowChanged(this, new LanguageRowChangeEvent(((LanguageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.LanguageRowChanging != null)) {
                    this.LanguageRowChanging(this, new LanguageRowChangeEvent(((LanguageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.LanguageRowDeleted != null)) {
                    this.LanguageRowDeleted(this, new LanguageRowChangeEvent(((LanguageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.LanguageRowDeleting != null)) {
                    this.LanguageRowDeleting(this, new LanguageRowChangeEvent(((LanguageRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveLanguageRow(LanguageRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                LanguageDataSet ds = new LanguageDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "LanguageDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class StringValueRow : global::System.Data.DataRow {
            
            private StringValueDataTable tableStringValue;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal StringValueRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableStringValue = ((StringValueDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StringID {
                get {
                    return ((int)(this[this.tableStringValue.StringIDColumn]));
                }
                set {
                    this[this.tableStringValue.StringIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientKey {
                get {
                    return ((int)(this[this.tableStringValue.ClientKeyColumn]));
                }
                set {
                    this[this.tableStringValue.ClientKeyColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LanguageId {
                get {
                    return ((int)(this[this.tableStringValue.LanguageIdColumn]));
                }
                set {
                    this[this.tableStringValue.LanguageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModuleName {
                get {
                    return ((string)(this[this.tableStringValue.ModuleNameColumn]));
                }
                set {
                    this[this.tableStringValue.ModuleNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string StringName {
                get {
                    return ((string)(this[this.tableStringValue.StringNameColumn]));
                }
                set {
                    this[this.tableStringValue.StringNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableStringValue.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'StringValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStringValue.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableStringValue.CreatedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedDateTime\' in table \'StringValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStringValue.CreatedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ModifiedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableStringValue.ModifiedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedDateTime\' in table \'StringValue\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableStringValue.ModifiedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableStringValue.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableStringValue.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedDateTimeNull() {
                return this.IsNull(this.tableStringValue.CreatedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedDateTimeNull() {
                this[this.tableStringValue.CreatedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedDateTimeNull() {
                return this.IsNull(this.tableStringValue.ModifiedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedDateTimeNull() {
                this[this.tableStringValue.ModifiedDateTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class LanguageRow : global::System.Data.DataRow {
            
            private LanguageDataTable tableLanguage;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal LanguageRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableLanguage = ((LanguageDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int LanguageId {
                get {
                    return ((int)(this[this.tableLanguage.LanguageIdColumn]));
                }
                set {
                    this[this.tableLanguage.LanguageIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableLanguage.NameColumn]));
                }
                set {
                    this[this.tableLanguage.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    try {
                        return ((string)(this[this.tableLanguage.DescriptionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Description\' in table \'Language\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguage.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime CreatedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLanguage.CreatedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedDateTime\' in table \'Language\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguage.CreatedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ModifiedDateTime {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableLanguage.ModifiedDateTimeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedDateTime\' in table \'Language\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableLanguage.ModifiedDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDescriptionNull() {
                return this.IsNull(this.tableLanguage.DescriptionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDescriptionNull() {
                this[this.tableLanguage.DescriptionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedDateTimeNull() {
                return this.IsNull(this.tableLanguage.CreatedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedDateTimeNull() {
                this[this.tableLanguage.CreatedDateTimeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedDateTimeNull() {
                return this.IsNull(this.tableLanguage.ModifiedDateTimeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedDateTimeNull() {
                this[this.tableLanguage.ModifiedDateTimeColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class StringValueRowChangeEvent : global::System.EventArgs {
            
            private StringValueRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StringValueRowChangeEvent(StringValueRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public StringValueRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class LanguageRowChangeEvent : global::System.EventArgs {
            
            private LanguageRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageRowChangeEvent(LanguageRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public LanguageRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("UploadResults")]
    public partial class UploadResults : global::System.Data.DataSet {
        
        private ResultDataTable tableResult;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public UploadResults() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ResultDataTable Result {
            get {
                return this.tableResult;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            UploadResults cln = ((UploadResults)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Result"] != null)) {
                    base.Tables.Add(new ResultDataTable(ds.Tables["Result"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableResult = ((ResultDataTable)(base.Tables["Result"]));
            if ((initTable == true)) {
                if ((this.tableResult != null)) {
                    this.tableResult.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "UploadResults";
            this.Prefix = "";
            this.Namespace = "http://www.activiser.com/Schemas/UploadResults.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableResult = new ResultDataTable();
            base.Tables.Add(this.tableResult);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeResult() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            UploadResults ds = new UploadResults();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ResultRowChangeEventHandler(object sender, ResultRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ResultDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnType;
            
            private global::System.Data.DataColumn columnGUID;
            
            private global::System.Data.DataColumn columnID;
            
            private global::System.Data.DataColumn columnNumber;
            
            private global::System.Data.DataColumn columnTimeStamp;
            
            private global::System.Data.DataColumn columnChecksum;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultDataTable() {
                this.TableName = "Result";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResultDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TypeColumn {
                get {
                    return this.columnType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn GUIDColumn {
                get {
                    return this.columnGUID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IDColumn {
                get {
                    return this.columnID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NumberColumn {
                get {
                    return this.columnNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TimeStampColumn {
                get {
                    return this.columnTimeStamp;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ChecksumColumn {
                get {
                    return this.columnChecksum;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultRow this[int index] {
                get {
                    return ((ResultRow)(this.Rows[index]));
                }
            }
            
            public event ResultRowChangeEventHandler ResultRowChanging;
            
            public event ResultRowChangeEventHandler ResultRowChanged;
            
            public event ResultRowChangeEventHandler ResultRowDeleting;
            
            public event ResultRowChangeEventHandler ResultRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddResultRow(ResultRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultRow AddResultRow(string Type, System.Guid GUID, int ID, string Number, System.DateTime TimeStamp, string Checksum) {
                ResultRow rowResultRow = ((ResultRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        Type,
                        GUID,
                        ID,
                        Number,
                        TimeStamp,
                        Checksum};
                rowResultRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowResultRow);
                return rowResultRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ResultDataTable cln = ((ResultDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ResultDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnType = base.Columns["Type"];
                this.columnGUID = base.Columns["GUID"];
                this.columnID = base.Columns["ID"];
                this.columnNumber = base.Columns["Number"];
                this.columnTimeStamp = base.Columns["TimeStamp"];
                this.columnChecksum = base.Columns["Checksum"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnType = new global::System.Data.DataColumn("Type", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnType);
                this.columnGUID = new global::System.Data.DataColumn("GUID", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnGUID);
                this.columnID = new global::System.Data.DataColumn("ID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnID);
                this.columnNumber = new global::System.Data.DataColumn("Number", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNumber);
                this.columnTimeStamp = new global::System.Data.DataColumn("TimeStamp", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTimeStamp);
                this.columnChecksum = new global::System.Data.DataColumn("Checksum", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnChecksum);
                this.columnType.AllowDBNull = false;
                this.columnGUID.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultRow NewResultRow() {
                return ((ResultRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ResultRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ResultRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ResultRowChanged != null)) {
                    this.ResultRowChanged(this, new ResultRowChangeEvent(((ResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ResultRowChanging != null)) {
                    this.ResultRowChanging(this, new ResultRowChangeEvent(((ResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ResultRowDeleted != null)) {
                    this.ResultRowDeleted(this, new ResultRowChangeEvent(((ResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ResultRowDeleting != null)) {
                    this.ResultRowDeleting(this, new ResultRowChangeEvent(((ResultRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveResultRow(ResultRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                UploadResults ds = new UploadResults();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ResultDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ResultRow : global::System.Data.DataRow {
            
            private ResultDataTable tableResult;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ResultRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableResult = ((ResultDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Type {
                get {
                    return ((string)(this[this.tableResult.TypeColumn]));
                }
                set {
                    this[this.tableResult.TypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid GUID {
                get {
                    return ((global::System.Guid)(this[this.tableResult.GUIDColumn]));
                }
                set {
                    this[this.tableResult.GUIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ID {
                get {
                    try {
                        return ((int)(this[this.tableResult.IDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ID\' in table \'Result\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResult.IDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Number {
                get {
                    try {
                        return ((string)(this[this.tableResult.NumberColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Number\' in table \'Result\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResult.NumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime TimeStamp {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableResult.TimeStampColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'TimeStamp\' in table \'Result\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResult.TimeStampColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Checksum {
                get {
                    try {
                        return ((string)(this[this.tableResult.ChecksumColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Checksum\' in table \'Result\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableResult.ChecksumColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIDNull() {
                return this.IsNull(this.tableResult.IDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIDNull() {
                this[this.tableResult.IDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNumberNull() {
                return this.IsNull(this.tableResult.NumberColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNumberNull() {
                this[this.tableResult.NumberColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTimeStampNull() {
                return this.IsNull(this.tableResult.TimeStampColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTimeStampNull() {
                this[this.tableResult.TimeStampColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsChecksumNull() {
                return this.IsNull(this.tableResult.ChecksumColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetChecksumNull() {
                this[this.tableResult.ChecksumColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ResultRowChangeEvent : global::System.EventArgs {
            
            private ResultRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultRowChangeEvent(ResultRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ResultRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ClientSettingDataSet")]
    public partial class ClientSettingDataSet : global::System.Data.DataSet {
        
        private ClientSettingDataTable tableClientSetting;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClientSettingDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClientSettingDataTable ClientSetting {
            get {
                return this.tableClientSetting;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ClientSettingDataSet cln = ((ClientSettingDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ClientSetting"] != null)) {
                    base.Tables.Add(new ClientSettingDataTable(ds.Tables["ClientSetting"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableClientSetting = ((ClientSettingDataTable)(base.Tables["ClientSetting"]));
            if ((initTable == true)) {
                if ((this.tableClientSetting != null)) {
                    this.tableClientSetting.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ClientSettingDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.activiser.com/schemas/ClientSettingDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableClientSetting = new ClientSettingDataTable();
            base.Tables.Add(this.tableClientSetting);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientSetting() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ClientSettingDataSet ds = new ClientSettingDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ClientSettingRowChangeEventHandler(object sender, ClientSettingRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientSettingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientSettingId;
            
            private global::System.Data.DataColumn columnClientMask;
            
            private global::System.Data.DataColumn columnSystemId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnValue;
            
            private global::System.Data.DataColumn columnValidAfter;
            
            private global::System.Data.DataColumn columnValidBefore;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnModified;
            
            private global::System.Data.DataColumn columnModifiedBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSettingDataTable() {
                this.TableName = "ClientSetting";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientSettingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientSettingIdColumn {
                get {
                    return this.columnClientSettingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientMaskColumn {
                get {
                    return this.columnClientMask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SystemIdColumn {
                get {
                    return this.columnSystemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValueColumn {
                get {
                    return this.columnValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidAfterColumn {
                get {
                    return this.columnValidAfter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidBeforeColumn {
                get {
                    return this.columnValidBefore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedColumn {
                get {
                    return this.columnModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByColumn {
                get {
                    return this.columnModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSettingRow this[int index] {
                get {
                    return ((ClientSettingRow)(this.Rows[index]));
                }
            }
            
            public event ClientSettingRowChangeEventHandler ClientSettingRowChanging;
            
            public event ClientSettingRowChangeEventHandler ClientSettingRowChanged;
            
            public event ClientSettingRowChangeEventHandler ClientSettingRowDeleting;
            
            public event ClientSettingRowChangeEventHandler ClientSettingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientSettingRow(ClientSettingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSettingRow AddClientSettingRow(System.Guid ClientSettingId, int ClientMask, string SystemId, string Name, string Value, System.DateTime ValidAfter, System.DateTime ValidBefore, System.DateTime Created, string CreatedBy, System.DateTime Modified, string ModifiedBy) {
                ClientSettingRow rowClientSettingRow = ((ClientSettingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientSettingId,
                        ClientMask,
                        SystemId,
                        Name,
                        Value,
                        ValidAfter,
                        ValidBefore,
                        Created,
                        CreatedBy,
                        Modified,
                        ModifiedBy};
                rowClientSettingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientSettingRow);
                return rowClientSettingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSettingRow FindByClientSettingId(System.Guid ClientSettingId) {
                return ((ClientSettingRow)(this.Rows.Find(new object[] {
                            ClientSettingId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientSettingDataTable cln = ((ClientSettingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientSettingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientSettingId = base.Columns["ClientSettingId"];
                this.columnClientMask = base.Columns["ClientMask"];
                this.columnSystemId = base.Columns["SystemId"];
                this.columnName = base.Columns["Name"];
                this.columnValue = base.Columns["Value"];
                this.columnValidAfter = base.Columns["ValidAfter"];
                this.columnValidBefore = base.Columns["ValidBefore"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnModified = base.Columns["Modified"];
                this.columnModifiedBy = base.Columns["ModifiedBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientSettingId = new global::System.Data.DataColumn("ClientSettingId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientSettingId);
                this.columnClientMask = new global::System.Data.DataColumn("ClientMask", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientMask);
                this.columnSystemId = new global::System.Data.DataColumn("SystemId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSystemId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnValue = new global::System.Data.DataColumn("Value", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValue);
                this.columnValidAfter = new global::System.Data.DataColumn("ValidAfter", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidAfter);
                this.columnValidBefore = new global::System.Data.DataColumn("ValidBefore", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidBefore);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnModified = new global::System.Data.DataColumn("Modified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModified);
                this.columnModifiedBy = new global::System.Data.DataColumn("ModifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedBy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnClientSettingId}, true));
                this.columnClientSettingId.AllowDBNull = false;
                this.columnClientSettingId.Unique = true;
                this.columnClientMask.AllowDBNull = false;
                this.columnSystemId.MaxLength = 128;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 50;
                this.columnValue.MaxLength = 1000;
                this.columnCreatedBy.MaxLength = 128;
                this.columnModifiedBy.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSettingRow NewClientSettingRow() {
                return ((ClientSettingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientSettingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientSettingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientSettingRowChanged != null)) {
                    this.ClientSettingRowChanged(this, new ClientSettingRowChangeEvent(((ClientSettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientSettingRowChanging != null)) {
                    this.ClientSettingRowChanging(this, new ClientSettingRowChangeEvent(((ClientSettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientSettingRowDeleted != null)) {
                    this.ClientSettingRowDeleted(this, new ClientSettingRowChangeEvent(((ClientSettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientSettingRowDeleting != null)) {
                    this.ClientSettingRowDeleting(this, new ClientSettingRowChangeEvent(((ClientSettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientSettingRow(ClientSettingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ClientSettingDataSet ds = new ClientSettingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientSettingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ClientSettingRow : global::System.Data.DataRow {
            
            private ClientSettingDataTable tableClientSetting;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientSettingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientSetting = ((ClientSettingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ClientSettingId {
                get {
                    return ((global::System.Guid)(this[this.tableClientSetting.ClientSettingIdColumn]));
                }
                set {
                    this[this.tableClientSetting.ClientSettingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientMask {
                get {
                    return ((int)(this[this.tableClientSetting.ClientMaskColumn]));
                }
                set {
                    this[this.tableClientSetting.ClientMaskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SystemId {
                get {
                    try {
                        return ((string)(this[this.tableClientSetting.SystemIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SystemId\' in table \'ClientSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSetting.SystemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableClientSetting.NameColumn]));
                }
                set {
                    this[this.tableClientSetting.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Value {
                get {
                    try {
                        return ((string)(this[this.tableClientSetting.ValueColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Value\' in table \'ClientSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSetting.ValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ValidAfter {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientSetting.ValidAfterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidAfter\' in table \'ClientSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSetting.ValidAfterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ValidBefore {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientSetting.ValidBeforeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidBefore\' in table \'ClientSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSetting.ValidBeforeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientSetting.CreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Created\' in table \'ClientSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSetting.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableClientSetting.CreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedBy\' in table \'ClientSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSetting.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Modified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientSetting.ModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modified\' in table \'ClientSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSetting.ModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableClientSetting.ModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedBy\' in table \'ClientSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientSetting.ModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSystemIdNull() {
                return this.IsNull(this.tableClientSetting.SystemIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSystemIdNull() {
                this[this.tableClientSetting.SystemIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValueNull() {
                return this.IsNull(this.tableClientSetting.ValueColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValueNull() {
                this[this.tableClientSetting.ValueColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidAfterNull() {
                return this.IsNull(this.tableClientSetting.ValidAfterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidAfterNull() {
                this[this.tableClientSetting.ValidAfterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidBeforeNull() {
                return this.IsNull(this.tableClientSetting.ValidBeforeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidBeforeNull() {
                this[this.tableClientSetting.ValidBeforeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableClientSetting.CreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedNull() {
                this[this.tableClientSetting.CreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableClientSetting.CreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByNull() {
                this[this.tableClientSetting.CreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedNull() {
                return this.IsNull(this.tableClientSetting.ModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedNull() {
                this[this.tableClientSetting.ModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNull() {
                return this.IsNull(this.tableClientSetting.ModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNull() {
                this[this.tableClientSetting.ModifiedByColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ClientSettingRowChangeEvent : global::System.EventArgs {
            
            private ClientSettingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSettingRowChangeEvent(ClientSettingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientSettingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ConsultantItemDataSet")]
    public partial class ConsultantItemDataSet : global::System.Data.DataSet {
        
        private ConsultantItemDataTable tableConsultantItem;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConsultantItemDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConsultantItemDataTable ConsultantItem {
            get {
                return this.tableConsultantItem;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ConsultantItemDataSet cln = ((ConsultantItemDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ConsultantItem"] != null)) {
                    base.Tables.Add(new ConsultantItemDataTable(ds.Tables["ConsultantItem"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableConsultantItem = ((ConsultantItemDataTable)(base.Tables["ConsultantItem"]));
            if ((initTable == true)) {
                if ((this.tableConsultantItem != null)) {
                    this.tableConsultantItem.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ConsultantItemDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.activiser.com/Schemas/ConsultantItemDataSet.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableConsultantItem = new ConsultantItemDataTable();
            base.Tables.Add(this.tableConsultantItem);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsultantItem() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ConsultantItemDataSet ds = new ConsultantItemDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ConsultantItemRowChangeEventHandler(object sender, ConsultantItemRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsultantItemDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnConsultantItemId;
            
            private global::System.Data.DataColumn columnConsultantUid;
            
            private global::System.Data.DataColumn columnDeviceId;
            
            private global::System.Data.DataColumn columnEntity;
            
            private global::System.Data.DataColumn columnEntityId;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnModified;
            
            private global::System.Data.DataColumn columnModifiedBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantItemDataTable() {
                this.TableName = "ConsultantItem";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantItemDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantItemIdColumn {
                get {
                    return this.columnConsultantItemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantUidColumn {
                get {
                    return this.columnConsultantUid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceIdColumn {
                get {
                    return this.columnDeviceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntityColumn {
                get {
                    return this.columnEntity;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntityIdColumn {
                get {
                    return this.columnEntityId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedColumn {
                get {
                    return this.columnModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByColumn {
                get {
                    return this.columnModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantItemRow this[int index] {
                get {
                    return ((ConsultantItemRow)(this.Rows[index]));
                }
            }
            
            public event ConsultantItemRowChangeEventHandler ConsultantItemRowChanging;
            
            public event ConsultantItemRowChangeEventHandler ConsultantItemRowChanged;
            
            public event ConsultantItemRowChangeEventHandler ConsultantItemRowDeleting;
            
            public event ConsultantItemRowChangeEventHandler ConsultantItemRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsultantItemRow(ConsultantItemRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantItemRow AddConsultantItemRow(System.Guid ConsultantItemId, System.Guid ConsultantUid, string DeviceId, string Entity, System.Guid EntityId, int Status, System.DateTime Created, string CreatedBy, System.DateTime Modified, string ModifiedBy) {
                ConsultantItemRow rowConsultantItemRow = ((ConsultantItemRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ConsultantItemId,
                        ConsultantUid,
                        DeviceId,
                        Entity,
                        EntityId,
                        Status,
                        Created,
                        CreatedBy,
                        Modified,
                        ModifiedBy};
                rowConsultantItemRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsultantItemRow);
                return rowConsultantItemRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantItemRow FindByConsultantItemId(System.Guid ConsultantItemId) {
                return ((ConsultantItemRow)(this.Rows.Find(new object[] {
                            ConsultantItemId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsultantItemDataTable cln = ((ConsultantItemDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsultantItemDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConsultantItemId = base.Columns["ConsultantItemId"];
                this.columnConsultantUid = base.Columns["ConsultantUid"];
                this.columnDeviceId = base.Columns["DeviceId"];
                this.columnEntity = base.Columns["Entity"];
                this.columnEntityId = base.Columns["EntityId"];
                this.columnStatus = base.Columns["Status"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnModified = base.Columns["Modified"];
                this.columnModifiedBy = base.Columns["ModifiedBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConsultantItemId = new global::System.Data.DataColumn("ConsultantItemId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantItemId);
                this.columnConsultantUid = new global::System.Data.DataColumn("ConsultantUid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantUid);
                this.columnDeviceId = new global::System.Data.DataColumn("DeviceId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceId);
                this.columnEntity = new global::System.Data.DataColumn("Entity", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntity);
                this.columnEntityId = new global::System.Data.DataColumn("EntityId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntityId);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnModified = new global::System.Data.DataColumn("Modified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModified);
                this.columnModifiedBy = new global::System.Data.DataColumn("ModifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedBy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnConsultantItemId}, true));
                this.columnConsultantItemId.AllowDBNull = false;
                this.columnConsultantItemId.Unique = true;
                this.columnConsultantUid.AllowDBNull = false;
                this.columnDeviceId.MaxLength = 128;
                this.columnEntity.AllowDBNull = false;
                this.columnEntity.MaxLength = 128;
                this.columnEntityId.AllowDBNull = false;
                this.columnStatus.AllowDBNull = false;
                this.columnCreatedBy.MaxLength = 128;
                this.columnModifiedBy.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantItemRow NewConsultantItemRow() {
                return ((ConsultantItemRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsultantItemRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsultantItemRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsultantItemRowChanged != null)) {
                    this.ConsultantItemRowChanged(this, new ConsultantItemRowChangeEvent(((ConsultantItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsultantItemRowChanging != null)) {
                    this.ConsultantItemRowChanging(this, new ConsultantItemRowChangeEvent(((ConsultantItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsultantItemRowDeleted != null)) {
                    this.ConsultantItemRowDeleted(this, new ConsultantItemRowChangeEvent(((ConsultantItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsultantItemRowDeleting != null)) {
                    this.ConsultantItemRowDeleting(this, new ConsultantItemRowChangeEvent(((ConsultantItemRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsultantItemRow(ConsultantItemRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ConsultantItemDataSet ds = new ConsultantItemDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsultantItemDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ConsultantItemRow : global::System.Data.DataRow {
            
            private ConsultantItemDataTable tableConsultantItem;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantItemRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsultantItem = ((ConsultantItemDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ConsultantItemId {
                get {
                    return ((global::System.Guid)(this[this.tableConsultantItem.ConsultantItemIdColumn]));
                }
                set {
                    this[this.tableConsultantItem.ConsultantItemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ConsultantUid {
                get {
                    return ((global::System.Guid)(this[this.tableConsultantItem.ConsultantUidColumn]));
                }
                set {
                    this[this.tableConsultantItem.ConsultantUidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceId {
                get {
                    try {
                        return ((string)(this[this.tableConsultantItem.DeviceIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeviceId\' in table \'ConsultantItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantItem.DeviceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Entity {
                get {
                    return ((string)(this[this.tableConsultantItem.EntityColumn]));
                }
                set {
                    this[this.tableConsultantItem.EntityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid EntityId {
                get {
                    return ((global::System.Guid)(this[this.tableConsultantItem.EntityIdColumn]));
                }
                set {
                    this[this.tableConsultantItem.EntityIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Status {
                get {
                    return ((int)(this[this.tableConsultantItem.StatusColumn]));
                }
                set {
                    this[this.tableConsultantItem.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableConsultantItem.CreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Created\' in table \'ConsultantItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantItem.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableConsultantItem.CreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedBy\' in table \'ConsultantItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantItem.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Modified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableConsultantItem.ModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modified\' in table \'ConsultantItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantItem.ModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableConsultantItem.ModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedBy\' in table \'ConsultantItem\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantItem.ModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeviceIdNull() {
                return this.IsNull(this.tableConsultantItem.DeviceIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeviceIdNull() {
                this[this.tableConsultantItem.DeviceIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableConsultantItem.CreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedNull() {
                this[this.tableConsultantItem.CreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableConsultantItem.CreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByNull() {
                this[this.tableConsultantItem.CreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedNull() {
                return this.IsNull(this.tableConsultantItem.ModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedNull() {
                this[this.tableConsultantItem.ModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNull() {
                return this.IsNull(this.tableConsultantItem.ModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNull() {
                this[this.tableConsultantItem.ModifiedByColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ConsultantItemRowChangeEvent : global::System.EventArgs {
            
            private ConsultantItemRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantItemRowChangeEvent(ConsultantItemRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantItemRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ConsultantSettingDataSet")]
    public partial class ConsultantSettingDataSet : global::System.Data.DataSet {
        
        private ConsultantSettingDataTable tableConsultantSetting;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConsultantSettingDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ConsultantSettingDataTable ConsultantSetting {
            get {
                return this.tableConsultantSetting;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ConsultantSettingDataSet cln = ((ConsultantSettingDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ConsultantSetting"] != null)) {
                    base.Tables.Add(new ConsultantSettingDataTable(ds.Tables["ConsultantSetting"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableConsultantSetting = ((ConsultantSettingDataTable)(base.Tables["ConsultantSetting"]));
            if ((initTable == true)) {
                if ((this.tableConsultantSetting != null)) {
                    this.tableConsultantSetting.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ConsultantSettingDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.activiser.com/Schemas/ConsultantSettingDataSet.xsd";
            this.Locale = new global::System.Globalization.CultureInfo("");
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableConsultantSetting = new ConsultantSettingDataTable();
            base.Tables.Add(this.tableConsultantSetting);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeConsultantSetting() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ConsultantSettingDataSet ds = new ConsultantSettingDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ConsultantSettingRowChangeEventHandler(object sender, ConsultantSettingRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ConsultantSettingDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnConsultantSettingId;
            
            private global::System.Data.DataColumn columnConsultantUid;
            
            private global::System.Data.DataColumn columnDeviceId;
            
            private global::System.Data.DataColumn columnName;
            
            private global::System.Data.DataColumn columnJobHistoryNumber;
            
            private global::System.Data.DataColumn columnJobHistoryAgeLimit;
            
            private global::System.Data.DataColumn columnShortcuts;
            
            private global::System.Data.DataColumn columnStatus;
            
            private global::System.Data.DataColumn columnLastSync;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnModified;
            
            private global::System.Data.DataColumn columnModifiedBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantSettingDataTable() {
                this.TableName = "ConsultantSetting";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantSettingDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantSettingIdColumn {
                get {
                    return this.columnConsultantSettingId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantUidColumn {
                get {
                    return this.columnConsultantUid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DeviceIdColumn {
                get {
                    return this.columnDeviceId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NameColumn {
                get {
                    return this.columnName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobHistoryNumberColumn {
                get {
                    return this.columnJobHistoryNumber;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn JobHistoryAgeLimitColumn {
                get {
                    return this.columnJobHistoryAgeLimit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ShortcutsColumn {
                get {
                    return this.columnShortcuts;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StatusColumn {
                get {
                    return this.columnStatus;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LastSyncColumn {
                get {
                    return this.columnLastSync;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedColumn {
                get {
                    return this.columnModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByColumn {
                get {
                    return this.columnModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantSettingRow this[int index] {
                get {
                    return ((ConsultantSettingRow)(this.Rows[index]));
                }
            }
            
            public event ConsultantSettingRowChangeEventHandler ConsultantSettingRowChanging;
            
            public event ConsultantSettingRowChangeEventHandler ConsultantSettingRowChanged;
            
            public event ConsultantSettingRowChangeEventHandler ConsultantSettingRowDeleting;
            
            public event ConsultantSettingRowChangeEventHandler ConsultantSettingRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddConsultantSettingRow(ConsultantSettingRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantSettingRow AddConsultantSettingRow(System.Guid ConsultantSettingId, System.Guid ConsultantUid, string DeviceId, string Name, int JobHistoryNumber, int JobHistoryAgeLimit, string Shortcuts, int Status, System.DateTime LastSync, System.DateTime Created, string CreatedBy, System.DateTime Modified, string ModifiedBy) {
                ConsultantSettingRow rowConsultantSettingRow = ((ConsultantSettingRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ConsultantSettingId,
                        ConsultantUid,
                        DeviceId,
                        Name,
                        JobHistoryNumber,
                        JobHistoryAgeLimit,
                        Shortcuts,
                        Status,
                        LastSync,
                        Created,
                        CreatedBy,
                        Modified,
                        ModifiedBy};
                rowConsultantSettingRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowConsultantSettingRow);
                return rowConsultantSettingRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantSettingRow FindByConsultantSettingId(System.Guid ConsultantSettingId) {
                return ((ConsultantSettingRow)(this.Rows.Find(new object[] {
                            ConsultantSettingId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ConsultantSettingDataTable cln = ((ConsultantSettingDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ConsultantSettingDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnConsultantSettingId = base.Columns["ConsultantSettingId"];
                this.columnConsultantUid = base.Columns["ConsultantUid"];
                this.columnDeviceId = base.Columns["DeviceId"];
                this.columnName = base.Columns["Name"];
                this.columnJobHistoryNumber = base.Columns["JobHistoryNumber"];
                this.columnJobHistoryAgeLimit = base.Columns["JobHistoryAgeLimit"];
                this.columnShortcuts = base.Columns["Shortcuts"];
                this.columnStatus = base.Columns["Status"];
                this.columnLastSync = base.Columns["LastSync"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnModified = base.Columns["Modified"];
                this.columnModifiedBy = base.Columns["ModifiedBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnConsultantSettingId = new global::System.Data.DataColumn("ConsultantSettingId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantSettingId);
                this.columnConsultantUid = new global::System.Data.DataColumn("ConsultantUid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantUid);
                this.columnDeviceId = new global::System.Data.DataColumn("DeviceId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDeviceId);
                this.columnName = new global::System.Data.DataColumn("Name", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnName);
                this.columnJobHistoryNumber = new global::System.Data.DataColumn("JobHistoryNumber", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobHistoryNumber);
                this.columnJobHistoryAgeLimit = new global::System.Data.DataColumn("JobHistoryAgeLimit", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnJobHistoryAgeLimit);
                this.columnShortcuts = new global::System.Data.DataColumn("Shortcuts", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnShortcuts);
                this.columnStatus = new global::System.Data.DataColumn("Status", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStatus);
                this.columnLastSync = new global::System.Data.DataColumn("LastSync", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLastSync);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnModified = new global::System.Data.DataColumn("Modified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModified);
                this.columnModifiedBy = new global::System.Data.DataColumn("ModifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedBy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnConsultantSettingId}, true));
                this.columnConsultantSettingId.AllowDBNull = false;
                this.columnConsultantSettingId.Unique = true;
                this.columnConsultantUid.AllowDBNull = false;
                this.columnDeviceId.MaxLength = 128;
                this.columnName.AllowDBNull = false;
                this.columnName.MaxLength = 128;
                this.columnJobHistoryNumber.AllowDBNull = false;
                this.columnJobHistoryAgeLimit.AllowDBNull = false;
                this.columnShortcuts.MaxLength = 4000;
                this.columnCreatedBy.MaxLength = 128;
                this.columnModifiedBy.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantSettingRow NewConsultantSettingRow() {
                return ((ConsultantSettingRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ConsultantSettingRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ConsultantSettingRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ConsultantSettingRowChanged != null)) {
                    this.ConsultantSettingRowChanged(this, new ConsultantSettingRowChangeEvent(((ConsultantSettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ConsultantSettingRowChanging != null)) {
                    this.ConsultantSettingRowChanging(this, new ConsultantSettingRowChangeEvent(((ConsultantSettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ConsultantSettingRowDeleted != null)) {
                    this.ConsultantSettingRowDeleted(this, new ConsultantSettingRowChangeEvent(((ConsultantSettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ConsultantSettingRowDeleting != null)) {
                    this.ConsultantSettingRowDeleting(this, new ConsultantSettingRowChangeEvent(((ConsultantSettingRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveConsultantSettingRow(ConsultantSettingRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ConsultantSettingDataSet ds = new ConsultantSettingDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ConsultantSettingDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ConsultantSettingRow : global::System.Data.DataRow {
            
            private ConsultantSettingDataTable tableConsultantSetting;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ConsultantSettingRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableConsultantSetting = ((ConsultantSettingDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ConsultantSettingId {
                get {
                    return ((global::System.Guid)(this[this.tableConsultantSetting.ConsultantSettingIdColumn]));
                }
                set {
                    this[this.tableConsultantSetting.ConsultantSettingIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ConsultantUid {
                get {
                    return ((global::System.Guid)(this[this.tableConsultantSetting.ConsultantUidColumn]));
                }
                set {
                    this[this.tableConsultantSetting.ConsultantUidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string DeviceId {
                get {
                    try {
                        return ((string)(this[this.tableConsultantSetting.DeviceIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'DeviceId\' in table \'ConsultantSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantSetting.DeviceIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Name {
                get {
                    return ((string)(this[this.tableConsultantSetting.NameColumn]));
                }
                set {
                    this[this.tableConsultantSetting.NameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobHistoryNumber {
                get {
                    return ((int)(this[this.tableConsultantSetting.JobHistoryNumberColumn]));
                }
                set {
                    this[this.tableConsultantSetting.JobHistoryNumberColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int JobHistoryAgeLimit {
                get {
                    return ((int)(this[this.tableConsultantSetting.JobHistoryAgeLimitColumn]));
                }
                set {
                    this[this.tableConsultantSetting.JobHistoryAgeLimitColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Shortcuts {
                get {
                    try {
                        return ((string)(this[this.tableConsultantSetting.ShortcutsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Shortcuts\' in table \'ConsultantSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantSetting.ShortcutsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Status {
                get {
                    try {
                        return ((int)(this[this.tableConsultantSetting.StatusColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Status\' in table \'ConsultantSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantSetting.StatusColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime LastSync {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableConsultantSetting.LastSyncColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'LastSync\' in table \'ConsultantSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantSetting.LastSyncColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableConsultantSetting.CreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Created\' in table \'ConsultantSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantSetting.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableConsultantSetting.CreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedBy\' in table \'ConsultantSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantSetting.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Modified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableConsultantSetting.ModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modified\' in table \'ConsultantSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantSetting.ModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableConsultantSetting.ModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedBy\' in table \'ConsultantSetting\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableConsultantSetting.ModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsDeviceIdNull() {
                return this.IsNull(this.tableConsultantSetting.DeviceIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetDeviceIdNull() {
                this[this.tableConsultantSetting.DeviceIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsShortcutsNull() {
                return this.IsNull(this.tableConsultantSetting.ShortcutsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetShortcutsNull() {
                this[this.tableConsultantSetting.ShortcutsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStatusNull() {
                return this.IsNull(this.tableConsultantSetting.StatusColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStatusNull() {
                this[this.tableConsultantSetting.StatusColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastSyncNull() {
                return this.IsNull(this.tableConsultantSetting.LastSyncColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLastSyncNull() {
                this[this.tableConsultantSetting.LastSyncColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableConsultantSetting.CreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedNull() {
                this[this.tableConsultantSetting.CreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableConsultantSetting.CreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByNull() {
                this[this.tableConsultantSetting.CreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedNull() {
                return this.IsNull(this.tableConsultantSetting.ModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedNull() {
                this[this.tableConsultantSetting.ModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNull() {
                return this.IsNull(this.tableConsultantSetting.ModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNull() {
                this[this.tableConsultantSetting.ModifiedByColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ConsultantSettingRowChangeEvent : global::System.EventArgs {
            
            private ConsultantSettingRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantSettingRowChangeEvent(ConsultantSettingRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ConsultantSettingRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("SyncLogDataSet")]
    public partial class SyncLogDataSet : global::System.Data.DataSet {
        
        private SyncLogDataTable tableSyncLog;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SyncLogDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public SyncLogDataTable SyncLog {
            get {
                return this.tableSyncLog;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            SyncLogDataSet cln = ((SyncLogDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["SyncLog"] != null)) {
                    base.Tables.Add(new SyncLogDataTable(ds.Tables["SyncLog"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableSyncLog = ((SyncLogDataTable)(base.Tables["SyncLog"]));
            if ((initTable == true)) {
                if ((this.tableSyncLog != null)) {
                    this.tableSyncLog.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "SyncLogDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.activiser.com/schemas/SyncLogDataSet.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableSyncLog = new SyncLogDataTable();
            base.Tables.Add(this.tableSyncLog);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeSyncLog() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            SyncLogDataSet ds = new SyncLogDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void SyncLogRowChangeEventHandler(object sender, SyncLogRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SyncLogDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnSyncLogId;
            
            private global::System.Data.DataColumn columnSyncDateTime;
            
            private global::System.Data.DataColumn columnConsultantUid;
            
            private global::System.Data.DataColumn columnMessage;
            
            private global::System.Data.DataColumn columnSyncDetails;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnModified;
            
            private global::System.Data.DataColumn columnModifiedBy;
            
            private global::System.Data.DataColumn columnRowVersion;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SyncLogDataTable() {
                this.TableName = "SyncLog";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SyncLogDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncLogIdColumn {
                get {
                    return this.columnSyncLogId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncDateTimeColumn {
                get {
                    return this.columnSyncDateTime;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ConsultantUidColumn {
                get {
                    return this.columnConsultantUid;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MessageColumn {
                get {
                    return this.columnMessage;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SyncDetailsColumn {
                get {
                    return this.columnSyncDetails;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedColumn {
                get {
                    return this.columnModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByColumn {
                get {
                    return this.columnModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn RowVersionColumn {
                get {
                    return this.columnRowVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SyncLogRow this[int index] {
                get {
                    return ((SyncLogRow)(this.Rows[index]));
                }
            }
            
            public event SyncLogRowChangeEventHandler SyncLogRowChanging;
            
            public event SyncLogRowChangeEventHandler SyncLogRowChanged;
            
            public event SyncLogRowChangeEventHandler SyncLogRowDeleting;
            
            public event SyncLogRowChangeEventHandler SyncLogRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddSyncLogRow(SyncLogRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SyncLogRow AddSyncLogRow(System.Guid SyncLogId, System.DateTime SyncDateTime, System.Guid ConsultantUid, string Message, string SyncDetails, System.DateTime Created, string CreatedBy, System.DateTime Modified, string ModifiedBy, byte[] RowVersion) {
                SyncLogRow rowSyncLogRow = ((SyncLogRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        SyncLogId,
                        SyncDateTime,
                        ConsultantUid,
                        Message,
                        SyncDetails,
                        Created,
                        CreatedBy,
                        Modified,
                        ModifiedBy,
                        RowVersion};
                rowSyncLogRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowSyncLogRow);
                return rowSyncLogRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SyncLogRow FindBySyncLogId(System.Guid SyncLogId) {
                return ((SyncLogRow)(this.Rows.Find(new object[] {
                            SyncLogId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                SyncLogDataTable cln = ((SyncLogDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new SyncLogDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnSyncLogId = base.Columns["SyncLogId"];
                this.columnSyncDateTime = base.Columns["SyncDateTime"];
                this.columnConsultantUid = base.Columns["ConsultantUid"];
                this.columnMessage = base.Columns["Message"];
                this.columnSyncDetails = base.Columns["SyncDetails"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnModified = base.Columns["Modified"];
                this.columnModifiedBy = base.Columns["ModifiedBy"];
                this.columnRowVersion = base.Columns["RowVersion"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnSyncLogId = new global::System.Data.DataColumn("SyncLogId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncLogId);
                this.columnSyncDateTime = new global::System.Data.DataColumn("SyncDateTime", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncDateTime);
                this.columnConsultantUid = new global::System.Data.DataColumn("ConsultantUid", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnConsultantUid);
                this.columnMessage = new global::System.Data.DataColumn("Message", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMessage);
                this.columnSyncDetails = new global::System.Data.DataColumn("SyncDetails", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSyncDetails);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnModified = new global::System.Data.DataColumn("Modified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModified);
                this.columnModifiedBy = new global::System.Data.DataColumn("ModifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedBy);
                this.columnRowVersion = new global::System.Data.DataColumn("RowVersion", typeof(byte[]), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnRowVersion);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnSyncLogId}, true));
                this.columnSyncLogId.AllowDBNull = false;
                this.columnSyncLogId.Unique = true;
                this.columnSyncDateTime.AllowDBNull = false;
                this.columnConsultantUid.AllowDBNull = false;
                this.columnMessage.MaxLength = 1000;
                this.columnSyncDetails.MaxLength = 2147483647;
                this.columnCreatedBy.MaxLength = 128;
                this.columnModifiedBy.MaxLength = 128;
                this.columnRowVersion.ReadOnly = true;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SyncLogRow NewSyncLogRow() {
                return ((SyncLogRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new SyncLogRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(SyncLogRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SyncLogRowChanged != null)) {
                    this.SyncLogRowChanged(this, new SyncLogRowChangeEvent(((SyncLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SyncLogRowChanging != null)) {
                    this.SyncLogRowChanging(this, new SyncLogRowChangeEvent(((SyncLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SyncLogRowDeleted != null)) {
                    this.SyncLogRowDeleted(this, new SyncLogRowChangeEvent(((SyncLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SyncLogRowDeleting != null)) {
                    this.SyncLogRowDeleting(this, new SyncLogRowChangeEvent(((SyncLogRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveSyncLogRow(SyncLogRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                SyncLogDataSet ds = new SyncLogDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SyncLogDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class SyncLogRow : global::System.Data.DataRow {
            
            private SyncLogDataTable tableSyncLog;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal SyncLogRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSyncLog = ((SyncLogDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid SyncLogId {
                get {
                    return ((global::System.Guid)(this[this.tableSyncLog.SyncLogIdColumn]));
                }
                set {
                    this[this.tableSyncLog.SyncLogIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime SyncDateTime {
                get {
                    return ((global::System.DateTime)(this[this.tableSyncLog.SyncDateTimeColumn]));
                }
                set {
                    this[this.tableSyncLog.SyncDateTimeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ConsultantUid {
                get {
                    return ((global::System.Guid)(this[this.tableSyncLog.ConsultantUidColumn]));
                }
                set {
                    this[this.tableSyncLog.ConsultantUidColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Message {
                get {
                    try {
                        return ((string)(this[this.tableSyncLog.MessageColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Message\' in table \'SyncLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSyncLog.MessageColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SyncDetails {
                get {
                    try {
                        return ((string)(this[this.tableSyncLog.SyncDetailsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'SyncDetails\' in table \'SyncLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSyncLog.SyncDetailsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSyncLog.CreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Created\' in table \'SyncLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSyncLog.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableSyncLog.CreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedBy\' in table \'SyncLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSyncLog.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Modified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableSyncLog.ModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modified\' in table \'SyncLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSyncLog.ModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableSyncLog.ModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedBy\' in table \'SyncLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSyncLog.ModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte[] RowVersion {
                get {
                    try {
                        return ((byte[])(this[this.tableSyncLog.RowVersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'RowVersion\' in table \'SyncLog\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableSyncLog.RowVersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMessageNull() {
                return this.IsNull(this.tableSyncLog.MessageColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMessageNull() {
                this[this.tableSyncLog.MessageColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsSyncDetailsNull() {
                return this.IsNull(this.tableSyncLog.SyncDetailsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetSyncDetailsNull() {
                this[this.tableSyncLog.SyncDetailsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableSyncLog.CreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedNull() {
                this[this.tableSyncLog.CreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableSyncLog.CreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByNull() {
                this[this.tableSyncLog.CreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedNull() {
                return this.IsNull(this.tableSyncLog.ModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedNull() {
                this[this.tableSyncLog.ModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNull() {
                return this.IsNull(this.tableSyncLog.ModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNull() {
                this[this.tableSyncLog.ModifiedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsRowVersionNull() {
                return this.IsNull(this.tableSyncLog.RowVersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetRowVersionNull() {
                this[this.tableSyncLog.RowVersionColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class SyncLogRowChangeEvent : global::System.EventArgs {
            
            private SyncLogRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SyncLogRowChangeEvent(SyncLogRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public SyncLogRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ClientRegistrationDataSet")]
    public partial class ClientRegistrationDataSet : global::System.Data.DataSet {
        
        private ClientStatusDataTable tableClientStatus;
        
        private ClientDataTable tableClient;
        
        private global::System.Data.DataRelation relationClientStatus_Client;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClientRegistrationDataSet() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClientStatusDataTable ClientStatus {
            get {
                return this.tableClientStatus;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ClientDataTable Client {
            get {
                return this.tableClient;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ClientRegistrationDataSet cln = ((ClientRegistrationDataSet)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ClientStatus"] != null)) {
                    base.Tables.Add(new ClientStatusDataTable(ds.Tables["ClientStatus"]));
                }
                if ((ds.Tables["Client"] != null)) {
                    base.Tables.Add(new ClientDataTable(ds.Tables["Client"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableClientStatus = ((ClientStatusDataTable)(base.Tables["ClientStatus"]));
            if ((initTable == true)) {
                if ((this.tableClientStatus != null)) {
                    this.tableClientStatus.InitVars();
                }
            }
            this.tableClient = ((ClientDataTable)(base.Tables["Client"]));
            if ((initTable == true)) {
                if ((this.tableClient != null)) {
                    this.tableClient.InitVars();
                }
            }
            this.relationClientStatus_Client = this.Relations["ClientStatus_Client"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ClientRegistrationDataSet";
            this.Prefix = "";
            this.Namespace = "http://www.activiser.com/schemas/ClientDevice.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableClientStatus = new ClientStatusDataTable();
            base.Tables.Add(this.tableClientStatus);
            this.tableClient = new ClientDataTable();
            base.Tables.Add(this.tableClient);
            this.relationClientStatus_Client = new global::System.Data.DataRelation("ClientStatus_Client", new global::System.Data.DataColumn[] {
                        this.tableClientStatus.ClientStatusIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableClient.ClientStatusIdColumn}, false);
            this.Relations.Add(this.relationClientStatus_Client);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClientStatus() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeClient() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ClientRegistrationDataSet ds = new ClientRegistrationDataSet();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ClientStatusRowChangeEventHandler(object sender, ClientStatusRowChangeEvent e);
        
        public delegate void ClientRowChangeEventHandler(object sender, ClientRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientStatusDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientStatusId;
            
            private global::System.Data.DataColumn columnDescription;
            
            private global::System.Data.DataColumn columnIsActive;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnModified;
            
            private global::System.Data.DataColumn columnModifiedBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientStatusDataTable() {
                this.TableName = "ClientStatus";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientStatusDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientStatusIdColumn {
                get {
                    return this.columnClientStatusId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DescriptionColumn {
                get {
                    return this.columnDescription;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsActiveColumn {
                get {
                    return this.columnIsActive;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedColumn {
                get {
                    return this.columnModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByColumn {
                get {
                    return this.columnModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientStatusRow this[int index] {
                get {
                    return ((ClientStatusRow)(this.Rows[index]));
                }
            }
            
            public event ClientStatusRowChangeEventHandler ClientStatusRowChanging;
            
            public event ClientStatusRowChangeEventHandler ClientStatusRowChanged;
            
            public event ClientStatusRowChangeEventHandler ClientStatusRowDeleting;
            
            public event ClientStatusRowChangeEventHandler ClientStatusRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientStatusRow(ClientStatusRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientStatusRow AddClientStatusRow(int ClientStatusId, string Description, bool IsActive, System.DateTime Created, string CreatedBy, System.DateTime Modified, string ModifiedBy) {
                ClientStatusRow rowClientStatusRow = ((ClientStatusRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientStatusId,
                        Description,
                        IsActive,
                        Created,
                        CreatedBy,
                        Modified,
                        ModifiedBy};
                rowClientStatusRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientStatusRow);
                return rowClientStatusRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientStatusRow FindByClientStatusId(int ClientStatusId) {
                return ((ClientStatusRow)(this.Rows.Find(new object[] {
                            ClientStatusId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientStatusDataTable cln = ((ClientStatusDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientStatusDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientStatusId = base.Columns["ClientStatusId"];
                this.columnDescription = base.Columns["Description"];
                this.columnIsActive = base.Columns["IsActive"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnModified = base.Columns["Modified"];
                this.columnModifiedBy = base.Columns["ModifiedBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientStatusId = new global::System.Data.DataColumn("ClientStatusId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientStatusId);
                this.columnDescription = new global::System.Data.DataColumn("Description", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDescription);
                this.columnIsActive = new global::System.Data.DataColumn("IsActive", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsActive);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnModified = new global::System.Data.DataColumn("Modified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModified);
                this.columnModifiedBy = new global::System.Data.DataColumn("ModifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedBy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnClientStatusId}, true));
                this.columnClientStatusId.AllowDBNull = false;
                this.columnClientStatusId.Unique = true;
                this.columnDescription.AllowDBNull = false;
                this.columnDescription.MaxLength = 50;
                this.columnIsActive.AllowDBNull = false;
                this.columnCreatedBy.MaxLength = 128;
                this.columnModifiedBy.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientStatusRow NewClientStatusRow() {
                return ((ClientStatusRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientStatusRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientStatusRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientStatusRowChanged != null)) {
                    this.ClientStatusRowChanged(this, new ClientStatusRowChangeEvent(((ClientStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientStatusRowChanging != null)) {
                    this.ClientStatusRowChanging(this, new ClientStatusRowChangeEvent(((ClientStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientStatusRowDeleted != null)) {
                    this.ClientStatusRowDeleted(this, new ClientStatusRowChangeEvent(((ClientStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientStatusRowDeleting != null)) {
                    this.ClientStatusRowDeleting(this, new ClientStatusRowChangeEvent(((ClientStatusRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientStatusRow(ClientStatusRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ClientRegistrationDataSet ds = new ClientRegistrationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientStatusDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ClientDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnClientId;
            
            private global::System.Data.DataColumn columnSystemId;
            
            private global::System.Data.DataColumn columnAssignedToId;
            
            private global::System.Data.DataColumn columnClientStatusId;
            
            private global::System.Data.DataColumn columnNotes;
            
            private global::System.Data.DataColumn columnValidAfter;
            
            private global::System.Data.DataColumn columnValidBefore;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnModified;
            
            private global::System.Data.DataColumn columnModifiedBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientDataTable() {
                this.TableName = "Client";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientIdColumn {
                get {
                    return this.columnClientId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SystemIdColumn {
                get {
                    return this.columnSystemId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssignedToIdColumn {
                get {
                    return this.columnAssignedToId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientStatusIdColumn {
                get {
                    return this.columnClientStatusId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NotesColumn {
                get {
                    return this.columnNotes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidAfterColumn {
                get {
                    return this.columnValidAfter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ValidBeforeColumn {
                get {
                    return this.columnValidBefore;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedColumn {
                get {
                    return this.columnModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByColumn {
                get {
                    return this.columnModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientRow this[int index] {
                get {
                    return ((ClientRow)(this.Rows[index]));
                }
            }
            
            public event ClientRowChangeEventHandler ClientRowChanging;
            
            public event ClientRowChangeEventHandler ClientRowChanged;
            
            public event ClientRowChangeEventHandler ClientRowDeleting;
            
            public event ClientRowChangeEventHandler ClientRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddClientRow(ClientRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientRow AddClientRow(System.Guid ClientId, string SystemId, System.Guid AssignedToId, ClientStatusRow parentClientStatusRowByClientStatus_Client, string Notes, System.DateTime ValidAfter, System.DateTime ValidBefore, System.DateTime Created, string CreatedBy, System.DateTime Modified, string ModifiedBy) {
                ClientRow rowClientRow = ((ClientRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        ClientId,
                        SystemId,
                        AssignedToId,
                        null,
                        Notes,
                        ValidAfter,
                        ValidBefore,
                        Created,
                        CreatedBy,
                        Modified,
                        ModifiedBy};
                if ((parentClientStatusRowByClientStatus_Client != null)) {
                    columnValuesArray[3] = parentClientStatusRowByClientStatus_Client[0];
                }
                rowClientRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowClientRow);
                return rowClientRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientRow FindByClientId(System.Guid ClientId) {
                return ((ClientRow)(this.Rows.Find(new object[] {
                            ClientId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ClientDataTable cln = ((ClientDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ClientDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnClientId = base.Columns["ClientId"];
                this.columnSystemId = base.Columns["SystemId"];
                this.columnAssignedToId = base.Columns["AssignedToId"];
                this.columnClientStatusId = base.Columns["ClientStatusId"];
                this.columnNotes = base.Columns["Notes"];
                this.columnValidAfter = base.Columns["ValidAfter"];
                this.columnValidBefore = base.Columns["ValidBefore"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnModified = base.Columns["Modified"];
                this.columnModifiedBy = base.Columns["ModifiedBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnClientId = new global::System.Data.DataColumn("ClientId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientId);
                this.columnSystemId = new global::System.Data.DataColumn("SystemId", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSystemId);
                this.columnAssignedToId = new global::System.Data.DataColumn("AssignedToId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssignedToId);
                this.columnClientStatusId = new global::System.Data.DataColumn("ClientStatusId", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientStatusId);
                this.columnNotes = new global::System.Data.DataColumn("Notes", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNotes);
                this.columnValidAfter = new global::System.Data.DataColumn("ValidAfter", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidAfter);
                this.columnValidBefore = new global::System.Data.DataColumn("ValidBefore", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnValidBefore);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnModified = new global::System.Data.DataColumn("Modified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModified);
                this.columnModifiedBy = new global::System.Data.DataColumn("ModifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedBy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnClientId}, true));
                this.columnClientId.AllowDBNull = false;
                this.columnClientId.Unique = true;
                this.columnSystemId.AllowDBNull = false;
                this.columnSystemId.MaxLength = 128;
                this.columnNotes.MaxLength = 400;
                this.columnCreatedBy.MaxLength = 128;
                this.columnModifiedBy.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientRow NewClientRow() {
                return ((ClientRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ClientRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ClientRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ClientRowChanged != null)) {
                    this.ClientRowChanged(this, new ClientRowChangeEvent(((ClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ClientRowChanging != null)) {
                    this.ClientRowChanging(this, new ClientRowChangeEvent(((ClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ClientRowDeleted != null)) {
                    this.ClientRowDeleted(this, new ClientRowChangeEvent(((ClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ClientRowDeleting != null)) {
                    this.ClientRowDeleting(this, new ClientRowChangeEvent(((ClientRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveClientRow(ClientRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ClientRegistrationDataSet ds = new ClientRegistrationDataSet();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ClientDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ClientStatusRow : global::System.Data.DataRow {
            
            private ClientStatusDataTable tableClientStatus;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientStatusRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClientStatus = ((ClientStatusDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientStatusId {
                get {
                    return ((int)(this[this.tableClientStatus.ClientStatusIdColumn]));
                }
                set {
                    this[this.tableClientStatus.ClientStatusIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Description {
                get {
                    return ((string)(this[this.tableClientStatus.DescriptionColumn]));
                }
                set {
                    this[this.tableClientStatus.DescriptionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsActive {
                get {
                    return ((bool)(this[this.tableClientStatus.IsActiveColumn]));
                }
                set {
                    this[this.tableClientStatus.IsActiveColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientStatus.CreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Created\' in table \'ClientStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientStatus.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableClientStatus.CreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedBy\' in table \'ClientStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientStatus.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Modified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClientStatus.ModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modified\' in table \'ClientStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientStatus.ModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableClientStatus.ModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedBy\' in table \'ClientStatus\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClientStatus.ModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableClientStatus.CreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedNull() {
                this[this.tableClientStatus.CreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableClientStatus.CreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByNull() {
                this[this.tableClientStatus.CreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedNull() {
                return this.IsNull(this.tableClientStatus.ModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedNull() {
                this[this.tableClientStatus.ModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNull() {
                return this.IsNull(this.tableClientStatus.ModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNull() {
                this[this.tableClientStatus.ModifiedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientRow[] GetClientRows() {
                if ((this.Table.ChildRelations["ClientStatus_Client"] == null)) {
                    return new ClientRow[0];
                }
                else {
                    return ((ClientRow[])(base.GetChildRows(this.Table.ChildRelations["ClientStatus_Client"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class ClientRow : global::System.Data.DataRow {
            
            private ClientDataTable tableClient;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ClientRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableClient = ((ClientDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ClientId {
                get {
                    return ((global::System.Guid)(this[this.tableClient.ClientIdColumn]));
                }
                set {
                    this[this.tableClient.ClientIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string SystemId {
                get {
                    return ((string)(this[this.tableClient.SystemIdColumn]));
                }
                set {
                    this[this.tableClient.SystemIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid AssignedToId {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableClient.AssignedToIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssignedToId\' in table \'Client\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClient.AssignedToIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientStatusId {
                get {
                    try {
                        return ((int)(this[this.tableClient.ClientStatusIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ClientStatusId\' in table \'Client\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClient.ClientStatusIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Notes {
                get {
                    try {
                        return ((string)(this[this.tableClient.NotesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Notes\' in table \'Client\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClient.NotesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ValidAfter {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClient.ValidAfterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidAfter\' in table \'Client\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClient.ValidAfterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime ValidBefore {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClient.ValidBeforeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ValidBefore\' in table \'Client\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClient.ValidBeforeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClient.CreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Created\' in table \'Client\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClient.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableClient.CreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedBy\' in table \'Client\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClient.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Modified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableClient.ModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modified\' in table \'Client\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClient.ModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableClient.ModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedBy\' in table \'Client\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableClient.ModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientStatusRow ClientStatusRow {
                get {
                    return ((ClientStatusRow)(this.GetParentRow(this.Table.ParentRelations["ClientStatus_Client"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["ClientStatus_Client"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssignedToIdNull() {
                return this.IsNull(this.tableClient.AssignedToIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssignedToIdNull() {
                this[this.tableClient.AssignedToIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsClientStatusIdNull() {
                return this.IsNull(this.tableClient.ClientStatusIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetClientStatusIdNull() {
                this[this.tableClient.ClientStatusIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNotesNull() {
                return this.IsNull(this.tableClient.NotesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNotesNull() {
                this[this.tableClient.NotesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidAfterNull() {
                return this.IsNull(this.tableClient.ValidAfterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidAfterNull() {
                this[this.tableClient.ValidAfterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsValidBeforeNull() {
                return this.IsNull(this.tableClient.ValidBeforeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetValidBeforeNull() {
                this[this.tableClient.ValidBeforeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableClient.CreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedNull() {
                this[this.tableClient.CreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableClient.CreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByNull() {
                this[this.tableClient.CreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedNull() {
                return this.IsNull(this.tableClient.ModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedNull() {
                this[this.tableClient.ModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNull() {
                return this.IsNull(this.tableClient.ModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNull() {
                this[this.tableClient.ModifiedByColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ClientStatusRowChangeEvent : global::System.EventArgs {
            
            private ClientStatusRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientStatusRowChangeEvent(ClientStatusRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientStatusRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class ClientRowChangeEvent : global::System.EventArgs {
            
            private ClientRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientRowChangeEvent(ClientRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ClientRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    // This type definition was generated by System.Data.Design.TypedDataSetSchemaImporterExtension schema importer extension.
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("FormDefinition")]
    public partial class FormDefinition : global::System.Data.DataSet {
        
        private FormDataTable tableForm;
        
        private FormFieldDataTable tableFormField;
        
        private global::System.Data.DataRelation relationFK_FormField_Form;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FormDefinition() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FormDataTable Form {
            get {
                return this.tableForm;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public FormFieldDataTable FormField {
            get {
                return this.tableFormField;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            FormDefinition cln = ((FormDefinition)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["Form"] != null)) {
                    base.Tables.Add(new FormDataTable(ds.Tables["Form"]));
                }
                if ((ds.Tables["FormField"] != null)) {
                    base.Tables.Add(new FormFieldDataTable(ds.Tables["FormField"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableForm = ((FormDataTable)(base.Tables["Form"]));
            if ((initTable == true)) {
                if ((this.tableForm != null)) {
                    this.tableForm.InitVars();
                }
            }
            this.tableFormField = ((FormFieldDataTable)(base.Tables["FormField"]));
            if ((initTable == true)) {
                if ((this.tableFormField != null)) {
                    this.tableFormField.InitVars();
                }
            }
            this.relationFK_FormField_Form = this.Relations["FK_FormField_Form"];
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "FormDefinition";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FormDefinition.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableForm = new FormDataTable();
            base.Tables.Add(this.tableForm);
            this.tableFormField = new FormFieldDataTable();
            base.Tables.Add(this.tableFormField);
            this.relationFK_FormField_Form = new global::System.Data.DataRelation("FK_FormField_Form", new global::System.Data.DataColumn[] {
                        this.tableForm.FormIdColumn}, new global::System.Data.DataColumn[] {
                        this.tableFormField.FormIdColumn}, false);
            this.Relations.Add(this.relationFK_FormField_Form);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeForm() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeFormField() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            FormDefinition ds = new FormDefinition();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void FormRowChangeEventHandler(object sender, FormRowChangeEvent e);
        
        public delegate void FormFieldRowChangeEventHandler(object sender, FormFieldRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FormDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFormId;
            
            private global::System.Data.DataColumn columnClientMask;
            
            private global::System.Data.DataColumn columnFormName;
            
            private global::System.Data.DataColumn columnFormLabel;
            
            private global::System.Data.DataColumn columnEntityId;
            
            private global::System.Data.DataColumn columnEntityName;
            
            private global::System.Data.DataColumn columnEntityPK;
            
            private global::System.Data.DataColumn columnParentEntityId;
            
            private global::System.Data.DataColumn columnParentEntityName;
            
            private global::System.Data.DataColumn columnParentPK;
            
            private global::System.Data.DataColumn columnEntityParentFK;
            
            private global::System.Data.DataColumn columnMaxItems;
            
            private global::System.Data.DataColumn columnPriority;
            
            private global::System.Data.DataColumn columnLockCode;
            
            private global::System.Data.DataColumn columnParentFilter;
            
            private global::System.Data.DataColumn columnVersion;
            
            private global::System.Data.DataColumn columnEffectiveFrom;
            
            private global::System.Data.DataColumn columnEffectiveUntil;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnModified;
            
            private global::System.Data.DataColumn columnModifiedBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormDataTable() {
                this.TableName = "Form";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormIdColumn {
                get {
                    return this.columnFormId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientMaskColumn {
                get {
                    return this.columnClientMask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormNameColumn {
                get {
                    return this.columnFormName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormLabelColumn {
                get {
                    return this.columnFormLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntityIdColumn {
                get {
                    return this.columnEntityId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntityNameColumn {
                get {
                    return this.columnEntityName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntityPKColumn {
                get {
                    return this.columnEntityPK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentEntityIdColumn {
                get {
                    return this.columnParentEntityId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentEntityNameColumn {
                get {
                    return this.columnParentEntityName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentPKColumn {
                get {
                    return this.columnParentPK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EntityParentFKColumn {
                get {
                    return this.columnEntityParentFK;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxItemsColumn {
                get {
                    return this.columnMaxItems;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LockCodeColumn {
                get {
                    return this.columnLockCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentFilterColumn {
                get {
                    return this.columnParentFilter;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveFromColumn {
                get {
                    return this.columnEffectiveFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveUntilColumn {
                get {
                    return this.columnEffectiveUntil;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedColumn {
                get {
                    return this.columnModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByColumn {
                get {
                    return this.columnModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormRow this[int index] {
                get {
                    return ((FormRow)(this.Rows[index]));
                }
            }
            
            public event FormRowChangeEventHandler FormRowChanging;
            
            public event FormRowChangeEventHandler FormRowChanged;
            
            public event FormRowChangeEventHandler FormRowDeleting;
            
            public event FormRowChangeEventHandler FormRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFormRow(FormRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormRow AddFormRow(
                        System.Guid FormId, 
                        int ClientMask, 
                        string FormName, 
                        string FormLabel, 
                        System.Guid EntityId, 
                        string EntityName, 
                        string EntityPK, 
                        System.Guid ParentEntityId, 
                        string ParentEntityName, 
                        string ParentPK, 
                        string EntityParentFK, 
                        int MaxItems, 
                        int Priority, 
                        byte LockCode, 
                        string ParentFilter, 
                        float Version, 
                        System.DateTime EffectiveFrom, 
                        System.DateTime EffectiveUntil, 
                        System.DateTime Created, 
                        string CreatedBy, 
                        System.DateTime Modified, 
                        string ModifiedBy) {
                FormRow rowFormRow = ((FormRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FormId,
                        ClientMask,
                        FormName,
                        FormLabel,
                        EntityId,
                        EntityName,
                        EntityPK,
                        ParentEntityId,
                        ParentEntityName,
                        ParentPK,
                        EntityParentFK,
                        MaxItems,
                        Priority,
                        LockCode,
                        ParentFilter,
                        Version,
                        EffectiveFrom,
                        EffectiveUntil,
                        Created,
                        CreatedBy,
                        Modified,
                        ModifiedBy};
                rowFormRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFormRow);
                return rowFormRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormRow FindByFormId(System.Guid FormId) {
                return ((FormRow)(this.Rows.Find(new object[] {
                            FormId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FormDataTable cln = ((FormDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FormDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFormId = base.Columns["FormId"];
                this.columnClientMask = base.Columns["ClientMask"];
                this.columnFormName = base.Columns["FormName"];
                this.columnFormLabel = base.Columns["FormLabel"];
                this.columnEntityId = base.Columns["EntityId"];
                this.columnEntityName = base.Columns["EntityName"];
                this.columnEntityPK = base.Columns["EntityPK"];
                this.columnParentEntityId = base.Columns["ParentEntityId"];
                this.columnParentEntityName = base.Columns["ParentEntityName"];
                this.columnParentPK = base.Columns["ParentPK"];
                this.columnEntityParentFK = base.Columns["EntityParentFK"];
                this.columnMaxItems = base.Columns["MaxItems"];
                this.columnPriority = base.Columns["Priority"];
                this.columnLockCode = base.Columns["LockCode"];
                this.columnParentFilter = base.Columns["ParentFilter"];
                this.columnVersion = base.Columns["Version"];
                this.columnEffectiveFrom = base.Columns["EffectiveFrom"];
                this.columnEffectiveUntil = base.Columns["EffectiveUntil"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnModified = base.Columns["Modified"];
                this.columnModifiedBy = base.Columns["ModifiedBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFormId = new global::System.Data.DataColumn("FormId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormId);
                this.columnClientMask = new global::System.Data.DataColumn("ClientMask", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientMask);
                this.columnFormName = new global::System.Data.DataColumn("FormName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormName);
                this.columnFormLabel = new global::System.Data.DataColumn("FormLabel", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormLabel);
                this.columnEntityId = new global::System.Data.DataColumn("EntityId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntityId);
                this.columnEntityName = new global::System.Data.DataColumn("EntityName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntityName);
                this.columnEntityPK = new global::System.Data.DataColumn("EntityPK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntityPK);
                this.columnParentEntityId = new global::System.Data.DataColumn("ParentEntityId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentEntityId);
                this.columnParentEntityName = new global::System.Data.DataColumn("ParentEntityName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentEntityName);
                this.columnParentPK = new global::System.Data.DataColumn("ParentPK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentPK);
                this.columnEntityParentFK = new global::System.Data.DataColumn("EntityParentFK", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEntityParentFK);
                this.columnMaxItems = new global::System.Data.DataColumn("MaxItems", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxItems);
                this.columnPriority = new global::System.Data.DataColumn("Priority", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriority);
                this.columnLockCode = new global::System.Data.DataColumn("LockCode", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLockCode);
                this.columnParentFilter = new global::System.Data.DataColumn("ParentFilter", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentFilter);
                this.columnVersion = new global::System.Data.DataColumn("Version", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersion);
                this.columnEffectiveFrom = new global::System.Data.DataColumn("EffectiveFrom", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveFrom);
                this.columnEffectiveUntil = new global::System.Data.DataColumn("EffectiveUntil", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveUntil);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnModified = new global::System.Data.DataColumn("Modified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModified);
                this.columnModifiedBy = new global::System.Data.DataColumn("ModifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedBy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFormId}, true));
                this.columnFormId.AllowDBNull = false;
                this.columnFormId.ReadOnly = true;
                this.columnFormId.Unique = true;
                this.columnClientMask.AllowDBNull = false;
                this.columnFormName.AllowDBNull = false;
                this.columnFormName.MaxLength = 256;
                this.columnFormLabel.MaxLength = 32;
                this.columnEntityName.AllowDBNull = false;
                this.columnEntityName.MaxLength = 128;
                this.columnEntityPK.AllowDBNull = false;
                this.columnEntityPK.MaxLength = 128;
                this.columnParentEntityName.AllowDBNull = false;
                this.columnParentEntityName.MaxLength = 128;
                this.columnParentPK.AllowDBNull = false;
                this.columnParentPK.MaxLength = 128;
                this.columnEntityParentFK.AllowDBNull = false;
                this.columnEntityParentFK.MaxLength = 128;
                this.columnMaxItems.AllowDBNull = false;
                this.columnPriority.AllowDBNull = false;
                this.columnLockCode.AllowDBNull = false;
                this.columnParentFilter.MaxLength = 1000;
                this.columnCreatedBy.MaxLength = 128;
                this.columnModifiedBy.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormRow NewFormRow() {
                return ((FormRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FormRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FormRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FormRowChanged != null)) {
                    this.FormRowChanged(this, new FormRowChangeEvent(((FormRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FormRowChanging != null)) {
                    this.FormRowChanging(this, new FormRowChangeEvent(((FormRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FormRowDeleted != null)) {
                    this.FormRowDeleted(this, new FormRowChangeEvent(((FormRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FormRowDeleting != null)) {
                    this.FormRowDeleting(this, new FormRowChangeEvent(((FormRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFormRow(FormRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FormDefinition ds = new FormDefinition();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FormDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class FormFieldDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnFormFieldId;
            
            private global::System.Data.DataColumn columnFormId;
            
            private global::System.Data.DataColumn columnClientMask;
            
            private global::System.Data.DataColumn columnAttributeId;
            
            private global::System.Data.DataColumn columnAttributeName;
            
            private global::System.Data.DataColumn columnLabel;
            
            private global::System.Data.DataColumn columnSortPriority;
            
            private global::System.Data.DataColumn columnDisplayOrder;
            
            private global::System.Data.DataColumn columnFieldType;
            
            private global::System.Data.DataColumn columnLockCode;
            
            private global::System.Data.DataColumn columnMinimumValue;
            
            private global::System.Data.DataColumn columnMaximumValue;
            
            private global::System.Data.DataColumn columnDecimalPlaces;
            
            private global::System.Data.DataColumn columnLines;
            
            private global::System.Data.DataColumn columnPosition;
            
            private global::System.Data.DataColumn columnWidth;
            
            private global::System.Data.DataColumn columnLabelWidth;
            
            private global::System.Data.DataColumn columnListDataSource;
            
            private global::System.Data.DataColumn columnListValueColumn;
            
            private global::System.Data.DataColumn columnListDisplayColumn;
            
            private global::System.Data.DataColumn columnListData;
            
            private global::System.Data.DataColumn columnVersion;
            
            private global::System.Data.DataColumn columnEffectiveFrom;
            
            private global::System.Data.DataColumn columnEffectiveUntil;
            
            private global::System.Data.DataColumn columnCreated;
            
            private global::System.Data.DataColumn columnCreatedBy;
            
            private global::System.Data.DataColumn columnModified;
            
            private global::System.Data.DataColumn columnModifiedBy;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormFieldDataTable() {
                this.TableName = "FormField";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormFieldDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormFieldIdColumn {
                get {
                    return this.columnFormFieldId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormIdColumn {
                get {
                    return this.columnFormId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ClientMaskColumn {
                get {
                    return this.columnClientMask;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttributeIdColumn {
                get {
                    return this.columnAttributeId;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AttributeNameColumn {
                get {
                    return this.columnAttributeName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelColumn {
                get {
                    return this.columnLabel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SortPriorityColumn {
                get {
                    return this.columnSortPriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DisplayOrderColumn {
                get {
                    return this.columnDisplayOrder;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FieldTypeColumn {
                get {
                    return this.columnFieldType;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LockCodeColumn {
                get {
                    return this.columnLockCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinimumValueColumn {
                get {
                    return this.columnMinimumValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaximumValueColumn {
                get {
                    return this.columnMaximumValue;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn DecimalPlacesColumn {
                get {
                    return this.columnDecimalPlaces;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LinesColumn {
                get {
                    return this.columnLines;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PositionColumn {
                get {
                    return this.columnPosition;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WidthColumn {
                get {
                    return this.columnWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn LabelWidthColumn {
                get {
                    return this.columnLabelWidth;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ListDataSourceColumn {
                get {
                    return this.columnListDataSource;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ListValueColumnColumn {
                get {
                    return this.columnListValueColumn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ListDisplayColumnColumn {
                get {
                    return this.columnListDisplayColumn;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ListDataColumn {
                get {
                    return this.columnListData;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionColumn {
                get {
                    return this.columnVersion;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveFromColumn {
                get {
                    return this.columnEffectiveFrom;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn EffectiveUntilColumn {
                get {
                    return this.columnEffectiveUntil;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedColumn {
                get {
                    return this.columnCreated;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreatedByColumn {
                get {
                    return this.columnCreatedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedColumn {
                get {
                    return this.columnModified;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ModifiedByColumn {
                get {
                    return this.columnModifiedBy;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormFieldRow this[int index] {
                get {
                    return ((FormFieldRow)(this.Rows[index]));
                }
            }
            
            public event FormFieldRowChangeEventHandler FormFieldRowChanging;
            
            public event FormFieldRowChangeEventHandler FormFieldRowChanged;
            
            public event FormFieldRowChangeEventHandler FormFieldRowDeleting;
            
            public event FormFieldRowChangeEventHandler FormFieldRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddFormFieldRow(FormFieldRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormFieldRow AddFormFieldRow(
                        System.Guid FormFieldId, 
                        FormRow parentFormRowByFK_FormField_Form, 
                        int ClientMask, 
                        System.Guid AttributeId, 
                        string AttributeName, 
                        string Label, 
                        short SortPriority, 
                        byte DisplayOrder, 
                        byte FieldType, 
                        byte LockCode, 
                        decimal MinimumValue, 
                        decimal MaximumValue, 
                        byte DecimalPlaces, 
                        byte Lines, 
                        string Position, 
                        byte Width, 
                        byte LabelWidth, 
                        string ListDataSource, 
                        string ListValueColumn, 
                        string ListDisplayColumn, 
                        string ListData, 
                        float Version, 
                        System.DateTime EffectiveFrom, 
                        System.DateTime EffectiveUntil, 
                        System.DateTime Created, 
                        string CreatedBy, 
                        System.DateTime Modified, 
                        string ModifiedBy) {
                FormFieldRow rowFormFieldRow = ((FormFieldRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        FormFieldId,
                        null,
                        ClientMask,
                        AttributeId,
                        AttributeName,
                        Label,
                        SortPriority,
                        DisplayOrder,
                        FieldType,
                        LockCode,
                        MinimumValue,
                        MaximumValue,
                        DecimalPlaces,
                        Lines,
                        Position,
                        Width,
                        LabelWidth,
                        ListDataSource,
                        ListValueColumn,
                        ListDisplayColumn,
                        ListData,
                        Version,
                        EffectiveFrom,
                        EffectiveUntil,
                        Created,
                        CreatedBy,
                        Modified,
                        ModifiedBy};
                if ((parentFormRowByFK_FormField_Form != null)) {
                    columnValuesArray[1] = parentFormRowByFK_FormField_Form[0];
                }
                rowFormFieldRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowFormFieldRow);
                return rowFormFieldRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormFieldRow FindByFormFieldId(System.Guid FormFieldId) {
                return ((FormFieldRow)(this.Rows.Find(new object[] {
                            FormFieldId})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                FormFieldDataTable cln = ((FormFieldDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new FormFieldDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnFormFieldId = base.Columns["FormFieldId"];
                this.columnFormId = base.Columns["FormId"];
                this.columnClientMask = base.Columns["ClientMask"];
                this.columnAttributeId = base.Columns["AttributeId"];
                this.columnAttributeName = base.Columns["AttributeName"];
                this.columnLabel = base.Columns["Label"];
                this.columnSortPriority = base.Columns["SortPriority"];
                this.columnDisplayOrder = base.Columns["DisplayOrder"];
                this.columnFieldType = base.Columns["FieldType"];
                this.columnLockCode = base.Columns["LockCode"];
                this.columnMinimumValue = base.Columns["MinimumValue"];
                this.columnMaximumValue = base.Columns["MaximumValue"];
                this.columnDecimalPlaces = base.Columns["DecimalPlaces"];
                this.columnLines = base.Columns["Lines"];
                this.columnPosition = base.Columns["Position"];
                this.columnWidth = base.Columns["Width"];
                this.columnLabelWidth = base.Columns["LabelWidth"];
                this.columnListDataSource = base.Columns["ListDataSource"];
                this.columnListValueColumn = base.Columns["ListValueColumn"];
                this.columnListDisplayColumn = base.Columns["ListDisplayColumn"];
                this.columnListData = base.Columns["ListData"];
                this.columnVersion = base.Columns["Version"];
                this.columnEffectiveFrom = base.Columns["EffectiveFrom"];
                this.columnEffectiveUntil = base.Columns["EffectiveUntil"];
                this.columnCreated = base.Columns["Created"];
                this.columnCreatedBy = base.Columns["CreatedBy"];
                this.columnModified = base.Columns["Modified"];
                this.columnModifiedBy = base.Columns["ModifiedBy"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnFormFieldId = new global::System.Data.DataColumn("FormFieldId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormFieldId);
                this.columnFormId = new global::System.Data.DataColumn("FormId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormId);
                this.columnClientMask = new global::System.Data.DataColumn("ClientMask", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnClientMask);
                this.columnAttributeId = new global::System.Data.DataColumn("AttributeId", typeof(global::System.Guid), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttributeId);
                this.columnAttributeName = new global::System.Data.DataColumn("AttributeName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAttributeName);
                this.columnLabel = new global::System.Data.DataColumn("Label", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabel);
                this.columnSortPriority = new global::System.Data.DataColumn("SortPriority", typeof(short), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSortPriority);
                this.columnDisplayOrder = new global::System.Data.DataColumn("DisplayOrder", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDisplayOrder);
                this.columnFieldType = new global::System.Data.DataColumn("FieldType", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFieldType);
                this.columnLockCode = new global::System.Data.DataColumn("LockCode", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLockCode);
                this.columnMinimumValue = new global::System.Data.DataColumn("MinimumValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinimumValue);
                this.columnMaximumValue = new global::System.Data.DataColumn("MaximumValue", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaximumValue);
                this.columnDecimalPlaces = new global::System.Data.DataColumn("DecimalPlaces", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnDecimalPlaces);
                this.columnLines = new global::System.Data.DataColumn("Lines", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLines);
                this.columnPosition = new global::System.Data.DataColumn("Position", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPosition);
                this.columnWidth = new global::System.Data.DataColumn("Width", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWidth);
                this.columnLabelWidth = new global::System.Data.DataColumn("LabelWidth", typeof(byte), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnLabelWidth);
                this.columnListDataSource = new global::System.Data.DataColumn("ListDataSource", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnListDataSource);
                this.columnListValueColumn = new global::System.Data.DataColumn("ListValueColumn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnListValueColumn);
                this.columnListDisplayColumn = new global::System.Data.DataColumn("ListDisplayColumn", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnListDisplayColumn);
                this.columnListData = new global::System.Data.DataColumn("ListData", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnListData);
                this.columnVersion = new global::System.Data.DataColumn("Version", typeof(float), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersion);
                this.columnEffectiveFrom = new global::System.Data.DataColumn("EffectiveFrom", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveFrom);
                this.columnEffectiveUntil = new global::System.Data.DataColumn("EffectiveUntil", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnEffectiveUntil);
                this.columnCreated = new global::System.Data.DataColumn("Created", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreated);
                this.columnCreatedBy = new global::System.Data.DataColumn("CreatedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCreatedBy);
                this.columnModified = new global::System.Data.DataColumn("Modified", typeof(global::System.DateTime), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModified);
                this.columnModifiedBy = new global::System.Data.DataColumn("ModifiedBy", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnModifiedBy);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnFormFieldId}, true));
                this.columnFormFieldId.AllowDBNull = false;
                this.columnFormFieldId.ReadOnly = true;
                this.columnFormFieldId.Unique = true;
                this.columnFormId.AllowDBNull = false;
                this.columnFormId.ReadOnly = true;
                this.columnClientMask.AllowDBNull = false;
                this.columnAttributeName.AllowDBNull = false;
                this.columnAttributeName.MaxLength = 128;
                this.columnLabel.MaxLength = 256;
                this.columnSortPriority.AllowDBNull = false;
                this.columnDisplayOrder.AllowDBNull = false;
                this.columnFieldType.AllowDBNull = false;
                this.columnLockCode.AllowDBNull = false;
                this.columnMinimumValue.AllowDBNull = false;
                this.columnMaximumValue.AllowDBNull = false;
                this.columnDecimalPlaces.AllowDBNull = false;
                this.columnLines.AllowDBNull = false;
                this.columnPosition.AllowDBNull = false;
                this.columnPosition.MaxLength = 2;
                this.columnWidth.AllowDBNull = false;
                this.columnLabelWidth.AllowDBNull = false;
                this.columnListDataSource.MaxLength = 128;
                this.columnListValueColumn.MaxLength = 128;
                this.columnListDisplayColumn.MaxLength = 128;
                this.columnListData.MaxLength = 2147483647;
                this.columnCreatedBy.MaxLength = 128;
                this.columnModifiedBy.MaxLength = 128;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormFieldRow NewFormFieldRow() {
                return ((FormFieldRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new FormFieldRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(FormFieldRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.FormFieldRowChanged != null)) {
                    this.FormFieldRowChanged(this, new FormFieldRowChangeEvent(((FormFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.FormFieldRowChanging != null)) {
                    this.FormFieldRowChanging(this, new FormFieldRowChangeEvent(((FormFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.FormFieldRowDeleted != null)) {
                    this.FormFieldRowDeleted(this, new FormFieldRowChangeEvent(((FormFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.FormFieldRowDeleting != null)) {
                    this.FormFieldRowDeleting(this, new FormFieldRowChangeEvent(((FormFieldRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveFormFieldRow(FormFieldRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                FormDefinition ds = new FormDefinition();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "FormFieldDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class FormRow : global::System.Data.DataRow {
            
            private FormDataTable tableForm;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableForm = ((FormDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid FormId {
                get {
                    return ((global::System.Guid)(this[this.tableForm.FormIdColumn]));
                }
                set {
                    this[this.tableForm.FormIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientMask {
                get {
                    return ((int)(this[this.tableForm.ClientMaskColumn]));
                }
                set {
                    this[this.tableForm.ClientMaskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormName {
                get {
                    return ((string)(this[this.tableForm.FormNameColumn]));
                }
                set {
                    this[this.tableForm.FormNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormLabel {
                get {
                    try {
                        return ((string)(this[this.tableForm.FormLabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormLabel\' in table \'Form\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForm.FormLabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid EntityId {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableForm.EntityIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EntityId\' in table \'Form\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForm.EntityIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EntityName {
                get {
                    return ((string)(this[this.tableForm.EntityNameColumn]));
                }
                set {
                    this[this.tableForm.EntityNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EntityPK {
                get {
                    return ((string)(this[this.tableForm.EntityPKColumn]));
                }
                set {
                    this[this.tableForm.EntityPKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid ParentEntityId {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableForm.ParentEntityIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentEntityId\' in table \'Form\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForm.ParentEntityIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParentEntityName {
                get {
                    return ((string)(this[this.tableForm.ParentEntityNameColumn]));
                }
                set {
                    this[this.tableForm.ParentEntityNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParentPK {
                get {
                    return ((string)(this[this.tableForm.ParentPKColumn]));
                }
                set {
                    this[this.tableForm.ParentPKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string EntityParentFK {
                get {
                    return ((string)(this[this.tableForm.EntityParentFKColumn]));
                }
                set {
                    this[this.tableForm.EntityParentFKColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaxItems {
                get {
                    return ((int)(this[this.tableForm.MaxItemsColumn]));
                }
                set {
                    this[this.tableForm.MaxItemsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Priority {
                get {
                    return ((int)(this[this.tableForm.PriorityColumn]));
                }
                set {
                    this[this.tableForm.PriorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte LockCode {
                get {
                    return ((byte)(this[this.tableForm.LockCodeColumn]));
                }
                set {
                    this[this.tableForm.LockCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ParentFilter {
                get {
                    try {
                        return ((string)(this[this.tableForm.ParentFilterColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentFilter\' in table \'Form\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForm.ParentFilterColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Version {
                get {
                    try {
                        return ((float)(this[this.tableForm.VersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Version\' in table \'Form\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForm.VersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EffectiveFrom {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableForm.EffectiveFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EffectiveFrom\' in table \'Form\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForm.EffectiveFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EffectiveUntil {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableForm.EffectiveUntilColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EffectiveUntil\' in table \'Form\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForm.EffectiveUntilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableForm.CreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Created\' in table \'Form\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForm.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableForm.CreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedBy\' in table \'Form\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForm.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Modified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableForm.ModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modified\' in table \'Form\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForm.ModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableForm.ModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedBy\' in table \'Form\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableForm.ModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormLabelNull() {
                return this.IsNull(this.tableForm.FormLabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormLabelNull() {
                this[this.tableForm.FormLabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEntityIdNull() {
                return this.IsNull(this.tableForm.EntityIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEntityIdNull() {
                this[this.tableForm.EntityIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentEntityIdNull() {
                return this.IsNull(this.tableForm.ParentEntityIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentEntityIdNull() {
                this[this.tableForm.ParentEntityIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentFilterNull() {
                return this.IsNull(this.tableForm.ParentFilterColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentFilterNull() {
                this[this.tableForm.ParentFilterColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVersionNull() {
                return this.IsNull(this.tableForm.VersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVersionNull() {
                this[this.tableForm.VersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectiveFromNull() {
                return this.IsNull(this.tableForm.EffectiveFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectiveFromNull() {
                this[this.tableForm.EffectiveFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectiveUntilNull() {
                return this.IsNull(this.tableForm.EffectiveUntilColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectiveUntilNull() {
                this[this.tableForm.EffectiveUntilColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableForm.CreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedNull() {
                this[this.tableForm.CreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableForm.CreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByNull() {
                this[this.tableForm.CreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedNull() {
                return this.IsNull(this.tableForm.ModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedNull() {
                this[this.tableForm.ModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNull() {
                return this.IsNull(this.tableForm.ModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNull() {
                this[this.tableForm.ModifiedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormFieldRow[] GetFormFieldRows() {
                if ((this.Table.ChildRelations["FK_FormField_Form"] == null)) {
                    return new FormFieldRow[0];
                }
                else {
                    return ((FormFieldRow[])(base.GetChildRows(this.Table.ChildRelations["FK_FormField_Form"])));
                }
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        public partial class FormFieldRow : global::System.Data.DataRow {
            
            private FormFieldDataTable tableFormField;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal FormFieldRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableFormField = ((FormFieldDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid FormFieldId {
                get {
                    return ((global::System.Guid)(this[this.tableFormField.FormFieldIdColumn]));
                }
                set {
                    this[this.tableFormField.FormFieldIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid FormId {
                get {
                    return ((global::System.Guid)(this[this.tableFormField.FormIdColumn]));
                }
                set {
                    this[this.tableFormField.FormIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ClientMask {
                get {
                    return ((int)(this[this.tableFormField.ClientMaskColumn]));
                }
                set {
                    this[this.tableFormField.ClientMaskColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.Guid AttributeId {
                get {
                    try {
                        return ((global::System.Guid)(this[this.tableFormField.AttributeIdColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AttributeId\' in table \'FormField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormField.AttributeIdColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string AttributeName {
                get {
                    return ((string)(this[this.tableFormField.AttributeNameColumn]));
                }
                set {
                    this[this.tableFormField.AttributeNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Label {
                get {
                    try {
                        return ((string)(this[this.tableFormField.LabelColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Label\' in table \'FormField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormField.LabelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public short SortPriority {
                get {
                    return ((short)(this[this.tableFormField.SortPriorityColumn]));
                }
                set {
                    this[this.tableFormField.SortPriorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DisplayOrder {
                get {
                    return ((byte)(this[this.tableFormField.DisplayOrderColumn]));
                }
                set {
                    this[this.tableFormField.DisplayOrderColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte FieldType {
                get {
                    return ((byte)(this[this.tableFormField.FieldTypeColumn]));
                }
                set {
                    this[this.tableFormField.FieldTypeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte LockCode {
                get {
                    return ((byte)(this[this.tableFormField.LockCodeColumn]));
                }
                set {
                    this[this.tableFormField.LockCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinimumValue {
                get {
                    return ((decimal)(this[this.tableFormField.MinimumValueColumn]));
                }
                set {
                    this[this.tableFormField.MinimumValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaximumValue {
                get {
                    return ((decimal)(this[this.tableFormField.MaximumValueColumn]));
                }
                set {
                    this[this.tableFormField.MaximumValueColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte DecimalPlaces {
                get {
                    return ((byte)(this[this.tableFormField.DecimalPlacesColumn]));
                }
                set {
                    this[this.tableFormField.DecimalPlacesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Lines {
                get {
                    return ((byte)(this[this.tableFormField.LinesColumn]));
                }
                set {
                    this[this.tableFormField.LinesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Position {
                get {
                    return ((string)(this[this.tableFormField.PositionColumn]));
                }
                set {
                    this[this.tableFormField.PositionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte Width {
                get {
                    return ((byte)(this[this.tableFormField.WidthColumn]));
                }
                set {
                    this[this.tableFormField.WidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public byte LabelWidth {
                get {
                    return ((byte)(this[this.tableFormField.LabelWidthColumn]));
                }
                set {
                    this[this.tableFormField.LabelWidthColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ListDataSource {
                get {
                    try {
                        return ((string)(this[this.tableFormField.ListDataSourceColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ListDataSource\' in table \'FormField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormField.ListDataSourceColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ListValueColumn {
                get {
                    try {
                        return ((string)(this[this.tableFormField.ListValueColumnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ListValueColumn\' in table \'FormField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormField.ListValueColumnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ListDisplayColumn {
                get {
                    try {
                        return ((string)(this[this.tableFormField.ListDisplayColumnColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ListDisplayColumn\' in table \'FormField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormField.ListDisplayColumnColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ListData {
                get {
                    try {
                        return ((string)(this[this.tableFormField.ListDataColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ListData\' in table \'FormField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormField.ListDataColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public float Version {
                get {
                    try {
                        return ((float)(this[this.tableFormField.VersionColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Version\' in table \'FormField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormField.VersionColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EffectiveFrom {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFormField.EffectiveFromColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EffectiveFrom\' in table \'FormField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormField.EffectiveFromColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime EffectiveUntil {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFormField.EffectiveUntilColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'EffectiveUntil\' in table \'FormField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormField.EffectiveUntilColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Created {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFormField.CreatedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Created\' in table \'FormField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormField.CreatedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CreatedBy {
                get {
                    try {
                        return ((string)(this[this.tableFormField.CreatedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CreatedBy\' in table \'FormField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormField.CreatedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public System.DateTime Modified {
                get {
                    try {
                        return ((global::System.DateTime)(this[this.tableFormField.ModifiedColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Modified\' in table \'FormField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormField.ModifiedColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ModifiedBy {
                get {
                    try {
                        return ((string)(this[this.tableFormField.ModifiedByColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ModifiedBy\' in table \'FormField\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableFormField.ModifiedByColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormRow FormRow {
                get {
                    return ((FormRow)(this.GetParentRow(this.Table.ParentRelations["FK_FormField_Form"])));
                }
                set {
                    this.SetParentRow(value, this.Table.ParentRelations["FK_FormField_Form"]);
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAttributeIdNull() {
                return this.IsNull(this.tableFormField.AttributeIdColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAttributeIdNull() {
                this[this.tableFormField.AttributeIdColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLabelNull() {
                return this.IsNull(this.tableFormField.LabelColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetLabelNull() {
                this[this.tableFormField.LabelColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsListDataSourceNull() {
                return this.IsNull(this.tableFormField.ListDataSourceColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetListDataSourceNull() {
                this[this.tableFormField.ListDataSourceColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsListValueColumnNull() {
                return this.IsNull(this.tableFormField.ListValueColumnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetListValueColumnNull() {
                this[this.tableFormField.ListValueColumnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsListDisplayColumnNull() {
                return this.IsNull(this.tableFormField.ListDisplayColumnColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetListDisplayColumnNull() {
                this[this.tableFormField.ListDisplayColumnColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsListDataNull() {
                return this.IsNull(this.tableFormField.ListDataColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetListDataNull() {
                this[this.tableFormField.ListDataColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVersionNull() {
                return this.IsNull(this.tableFormField.VersionColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVersionNull() {
                this[this.tableFormField.VersionColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectiveFromNull() {
                return this.IsNull(this.tableFormField.EffectiveFromColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectiveFromNull() {
                this[this.tableFormField.EffectiveFromColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsEffectiveUntilNull() {
                return this.IsNull(this.tableFormField.EffectiveUntilColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetEffectiveUntilNull() {
                this[this.tableFormField.EffectiveUntilColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedNull() {
                return this.IsNull(this.tableFormField.CreatedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedNull() {
                this[this.tableFormField.CreatedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreatedByNull() {
                return this.IsNull(this.tableFormField.CreatedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreatedByNull() {
                this[this.tableFormField.CreatedByColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedNull() {
                return this.IsNull(this.tableFormField.ModifiedColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedNull() {
                this[this.tableFormField.ModifiedColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsModifiedByNull() {
                return this.IsNull(this.tableFormField.ModifiedByColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetModifiedByNull() {
                this[this.tableFormField.ModifiedByColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class FormRowChangeEvent : global::System.EventArgs {
            
            private FormRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormRowChangeEvent(FormRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        public class FormFieldRowChangeEvent : global::System.EventArgs {
            
            private FormFieldRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormFieldRowChangeEvent(FormFieldRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public FormFieldRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
