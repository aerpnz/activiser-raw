#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace activiser.SchemaEditor.DataAccessLayer
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[System.Data.Linq.Mapping.DatabaseAttribute(Name="kinetics")]
	public partial class activiserSchemaDataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertEntity(Entity instance);
    partial void UpdateEntity(Entity instance);
    partial void DeleteEntity(Entity instance);
    partial void InsertAttribute(Attribute instance);
    partial void UpdateAttribute(Attribute instance);
    partial void DeleteAttribute(Attribute instance);
    partial void InsertClient(Client instance);
    partial void UpdateClient(Client instance);
    partial void DeleteClient(Client instance);
    partial void InsertAttributeType(AttributeType instance);
    partial void UpdateAttributeType(AttributeType instance);
    partial void DeleteAttributeType(AttributeType instance);
    partial void InsertFormField(FormField instance);
    partial void UpdateFormField(FormField instance);
    partial void DeleteFormField(FormField instance);
    partial void InsertForm(Form instance);
    partial void UpdateForm(Form instance);
    partial void DeleteForm(Form instance);
    #endregion
		
		public activiserSchemaDataClassesDataContext() : 
				base(global::activiser.SchemaEditor.DataAccessLayer.Properties.Settings.Default.activiserConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public activiserSchemaDataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public activiserSchemaDataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public activiserSchemaDataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public activiserSchemaDataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Entity> Entities
		{
			get
			{
				return this.GetTable<Entity>();
			}
		}
		
		public System.Data.Linq.Table<Attribute> Attributes
		{
			get
			{
				return this.GetTable<Attribute>();
			}
		}
		
		public System.Data.Linq.Table<Client> Clients
		{
			get
			{
				return this.GetTable<Client>();
			}
		}
		
		public System.Data.Linq.Table<AttributeType> AttributeTypes
		{
			get
			{
				return this.GetTable<AttributeType>();
			}
		}
		
		public System.Data.Linq.Table<FormField> FormFields
		{
			get
			{
				return this.GetTable<FormField>();
			}
		}
		
		public System.Data.Linq.Table<Form> Forms
		{
			get
			{
				return this.GetTable<Form>();
			}
		}
	}
	
	[Table(Name="metadata.SchemaEntity")]
	public partial class Entity : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _EntityId;
		
		private string _EntityName;
		
		private string _PrimaryKeyAttributeName;
		
		private int _PrimaryKeyAttributeType;
		
		private bool _IsCoreEntity;
		
		private int _ClientMask;
		
		private int _ClientMaskInsert;
		
		private int _ClientMaskUpdate;
		
		private int _FillSequence;
		
		private string _ParentEntityName;
		
		private string _ParentAttributeName;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private EntitySet<Attribute> _Attributes;
		
		private EntityRef<AttributeType> _AttributeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnEntityNameChanging(string value);
    partial void OnEntityNameChanged();
    partial void OnPrimaryKeyAttributeNameChanging(string value);
    partial void OnPrimaryKeyAttributeNameChanged();
    partial void OnPrimaryKeyAttributeTypeChanging(int value);
    partial void OnPrimaryKeyAttributeTypeChanged();
    partial void OnIsCoreEntityChanging(bool value);
    partial void OnIsCoreEntityChanged();
    partial void OnClientMaskChanging(int value);
    partial void OnClientMaskChanged();
    partial void OnClientMaskInsertChanging(int value);
    partial void OnClientMaskInsertChanged();
    partial void OnClientMaskUpdateChanging(int value);
    partial void OnClientMaskUpdateChanged();
    partial void OnFillSequenceChanging(int value);
    partial void OnFillSequenceChanged();
    partial void OnParentEntityNameChanging(string value);
    partial void OnParentEntityNameChanged();
    partial void OnParentAttributeNameChanging(string value);
    partial void OnParentAttributeNameChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Entity()
		{
			this._Attributes = new EntitySet<Attribute>(new Action<Attribute>(this.attach_Attributes), new Action<Attribute>(this.detach_Attributes));
			this._AttributeType = default(EntityRef<AttributeType>);
			OnCreated();
		}
		
		[Column(Storage="_EntityId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[Column(Storage="_EntityName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string EntityName
		{
			get
			{
				return this._EntityName;
			}
			set
			{
				if ((this._EntityName != value))
				{
					this.OnEntityNameChanging(value);
					this.SendPropertyChanging();
					this._EntityName = value;
					this.SendPropertyChanged("EntityName");
					this.OnEntityNameChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryKeyAttributeName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string PrimaryKeyAttributeName
		{
			get
			{
				return this._PrimaryKeyAttributeName;
			}
			set
			{
				if ((this._PrimaryKeyAttributeName != value))
				{
					this.OnPrimaryKeyAttributeNameChanging(value);
					this.SendPropertyChanging();
					this._PrimaryKeyAttributeName = value;
					this.SendPropertyChanged("PrimaryKeyAttributeName");
					this.OnPrimaryKeyAttributeNameChanged();
				}
			}
		}
		
		[Column(Storage="_PrimaryKeyAttributeType", DbType="Int NOT NULL")]
		public int PrimaryKeyAttributeType
		{
			get
			{
				return this._PrimaryKeyAttributeType;
			}
			set
			{
				if ((this._PrimaryKeyAttributeType != value))
				{
					if (this._AttributeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrimaryKeyAttributeTypeChanging(value);
					this.SendPropertyChanging();
					this._PrimaryKeyAttributeType = value;
					this.SendPropertyChanged("PrimaryKeyAttributeType");
					this.OnPrimaryKeyAttributeTypeChanged();
				}
			}
		}
		
		[Column(Storage="_IsCoreEntity", DbType="Bit NOT NULL")]
		public bool IsCoreEntity
		{
			get
			{
				return this._IsCoreEntity;
			}
			set
			{
				if ((this._IsCoreEntity != value))
				{
					this.OnIsCoreEntityChanging(value);
					this.SendPropertyChanging();
					this._IsCoreEntity = value;
					this.SendPropertyChanged("IsCoreEntity");
					this.OnIsCoreEntityChanged();
				}
			}
		}
		
		[Column(Storage="_ClientMask", DbType="Int NOT NULL")]
		public int ClientMask
		{
			get
			{
				return this._ClientMask;
			}
			set
			{
				if ((this._ClientMask != value))
				{
					this.OnClientMaskChanging(value);
					this.SendPropertyChanging();
					this._ClientMask = value;
					this.SendPropertyChanged("ClientMask");
					this.OnClientMaskChanged();
				}
			}
		}
		
		[Column(Storage="_ClientMaskInsert", DbType="Int NOT NULL")]
		public int ClientMaskInsert
		{
			get
			{
				return this._ClientMaskInsert;
			}
			set
			{
				if ((this._ClientMaskInsert != value))
				{
					this.OnClientMaskInsertChanging(value);
					this.SendPropertyChanging();
					this._ClientMaskInsert = value;
					this.SendPropertyChanged("ClientMaskInsert");
					this.OnClientMaskInsertChanged();
				}
			}
		}
		
		[Column(Storage="_ClientMaskUpdate", DbType="Int NOT NULL")]
		public int ClientMaskUpdate
		{
			get
			{
				return this._ClientMaskUpdate;
			}
			set
			{
				if ((this._ClientMaskUpdate != value))
				{
					this.OnClientMaskUpdateChanging(value);
					this.SendPropertyChanging();
					this._ClientMaskUpdate = value;
					this.SendPropertyChanged("ClientMaskUpdate");
					this.OnClientMaskUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_FillSequence", DbType="Int NOT NULL")]
		public int FillSequence
		{
			get
			{
				return this._FillSequence;
			}
			set
			{
				if ((this._FillSequence != value))
				{
					this.OnFillSequenceChanging(value);
					this.SendPropertyChanging();
					this._FillSequence = value;
					this.SendPropertyChanged("FillSequence");
					this.OnFillSequenceChanged();
				}
			}
		}
		
		[Column(Storage="_ParentEntityName", DbType="NVarChar(128)")]
		public string ParentEntityName
		{
			get
			{
				return this._ParentEntityName;
			}
			set
			{
				if ((this._ParentEntityName != value))
				{
					this.OnParentEntityNameChanging(value);
					this.SendPropertyChanging();
					this._ParentEntityName = value;
					this.SendPropertyChanged("ParentEntityName");
					this.OnParentEntityNameChanged();
				}
			}
		}
		
		[Column(Storage="_ParentAttributeName", DbType="NVarChar(128)")]
		public string ParentAttributeName
		{
			get
			{
				return this._ParentAttributeName;
			}
			set
			{
				if ((this._ParentAttributeName != value))
				{
					this.OnParentAttributeNameChanging(value);
					this.SendPropertyChanging();
					this._ParentAttributeName = value;
					this.SendPropertyChanged("ParentAttributeName");
					this.OnParentAttributeNameChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(128)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Association(Name="SchemaEntity_SchemaAttribute", Storage="_Attributes", ThisKey="EntityId", OtherKey="EntityId")]
		public EntitySet<Attribute> Attributes
		{
			get
			{
				return this._Attributes;
			}
			set
			{
				this._Attributes.Assign(value);
			}
		}
		
		[Association(Name="SchemaAttributeType_SchemaEntity", Storage="_AttributeType", ThisKey="PrimaryKeyAttributeType", OtherKey="AttributeTypeCode", IsForeignKey=true)]
		public AttributeType AttributeType
		{
			get
			{
				return this._AttributeType.Entity;
			}
			set
			{
				AttributeType previousValue = this._AttributeType.Entity;
				if (((previousValue != value) 
							|| (this._AttributeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttributeType.Entity = null;
						previousValue.Entities.Remove(this);
					}
					this._AttributeType.Entity = value;
					if ((value != null))
					{
						value.Entities.Add(this);
						this._PrimaryKeyAttributeType = value.AttributeTypeCode;
					}
					else
					{
						this._PrimaryKeyAttributeType = default(int);
					}
					this.SendPropertyChanged("AttributeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Entity = this;
		}
		
		private void detach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.Entity = null;
		}
	}
	
	[Table(Name="metadata.SchemaAttribute")]
	public partial class Attribute : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _AttributeId;
		
		private System.Guid _EntityId;
		
		private string _AttributeName;
		
		private bool _IsCoreAttribute;
		
		private bool _IsPrimaryKeyAttribute;
		
		private bool _Required;
		
		private int _AttributeTypeCode;
		
		private int _MaxLength;
		
		private int _ClientMask;
		
		private int _ClientMaskInsert;
		
		private int _ClientMaskUpdate;
		
		private System.Nullable<System.Guid> _LookupSourceEntityId;
		
		private string _Expression;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private EntityRef<Entity> _Entity;
		
		private EntityRef<AttributeType> _AttributeType;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttributeIdChanging(System.Guid value);
    partial void OnAttributeIdChanged();
    partial void OnEntityIdChanging(System.Guid value);
    partial void OnEntityIdChanged();
    partial void OnAttributeNameChanging(string value);
    partial void OnAttributeNameChanged();
    partial void OnIsCoreAttributeChanging(bool value);
    partial void OnIsCoreAttributeChanged();
    partial void OnIsPrimaryKeyAttributeChanging(bool value);
    partial void OnIsPrimaryKeyAttributeChanged();
    partial void OnRequiredChanging(bool value);
    partial void OnRequiredChanged();
    partial void OnAttributeTypeCodeChanging(int value);
    partial void OnAttributeTypeCodeChanged();
    partial void OnMaxLengthChanging(int value);
    partial void OnMaxLengthChanged();
    partial void OnClientMaskChanging(int value);
    partial void OnClientMaskChanged();
    partial void OnClientMaskInsertChanging(int value);
    partial void OnClientMaskInsertChanged();
    partial void OnClientMaskUpdateChanging(int value);
    partial void OnClientMaskUpdateChanged();
    partial void OnLookupSourceEntityIdChanging(System.Nullable<System.Guid> value);
    partial void OnLookupSourceEntityIdChanged();
    partial void OnExpressionChanging(string value);
    partial void OnExpressionChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Attribute()
		{
			this._Entity = default(EntityRef<Entity>);
			this._AttributeType = default(EntityRef<AttributeType>);
			OnCreated();
		}
		
		[Column(Storage="_AttributeId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid AttributeId
		{
			get
			{
				return this._AttributeId;
			}
			set
			{
				if ((this._AttributeId != value))
				{
					this.OnAttributeIdChanging(value);
					this.SendPropertyChanging();
					this._AttributeId = value;
					this.SendPropertyChanged("AttributeId");
					this.OnAttributeIdChanged();
				}
			}
		}
		
		[Column(Storage="_EntityId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid EntityId
		{
			get
			{
				return this._EntityId;
			}
			set
			{
				if ((this._EntityId != value))
				{
					if (this._Entity.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnEntityIdChanging(value);
					this.SendPropertyChanging();
					this._EntityId = value;
					this.SendPropertyChanged("EntityId");
					this.OnEntityIdChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeName", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string AttributeName
		{
			get
			{
				return this._AttributeName;
			}
			set
			{
				if ((this._AttributeName != value))
				{
					this.OnAttributeNameChanging(value);
					this.SendPropertyChanging();
					this._AttributeName = value;
					this.SendPropertyChanged("AttributeName");
					this.OnAttributeNameChanged();
				}
			}
		}
		
		[Column(Storage="_IsCoreAttribute", DbType="Bit NOT NULL")]
		public bool IsCoreAttribute
		{
			get
			{
				return this._IsCoreAttribute;
			}
			set
			{
				if ((this._IsCoreAttribute != value))
				{
					this.OnIsCoreAttributeChanging(value);
					this.SendPropertyChanging();
					this._IsCoreAttribute = value;
					this.SendPropertyChanged("IsCoreAttribute");
					this.OnIsCoreAttributeChanged();
				}
			}
		}
		
		[Column(Storage="_IsPrimaryKeyAttribute", DbType="Bit NOT NULL")]
		public bool IsPrimaryKeyAttribute
		{
			get
			{
				return this._IsPrimaryKeyAttribute;
			}
			set
			{
				if ((this._IsPrimaryKeyAttribute != value))
				{
					this.OnIsPrimaryKeyAttributeChanging(value);
					this.SendPropertyChanging();
					this._IsPrimaryKeyAttribute = value;
					this.SendPropertyChanged("IsPrimaryKeyAttribute");
					this.OnIsPrimaryKeyAttributeChanged();
				}
			}
		}
		
		[Column(Storage="_Required", DbType="Bit NOT NULL")]
		public bool Required
		{
			get
			{
				return this._Required;
			}
			set
			{
				if ((this._Required != value))
				{
					this.OnRequiredChanging(value);
					this.SendPropertyChanging();
					this._Required = value;
					this.SendPropertyChanged("Required");
					this.OnRequiredChanged();
				}
			}
		}
		
		[Column(Storage="_AttributeTypeCode", DbType="Int NOT NULL")]
		public int AttributeTypeCode
		{
			get
			{
				return this._AttributeTypeCode;
			}
			set
			{
				if ((this._AttributeTypeCode != value))
				{
					if (this._AttributeType.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAttributeTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._AttributeTypeCode = value;
					this.SendPropertyChanged("AttributeTypeCode");
					this.OnAttributeTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MaxLength", DbType="Int NOT NULL")]
		public int MaxLength
		{
			get
			{
				return this._MaxLength;
			}
			set
			{
				if ((this._MaxLength != value))
				{
					this.OnMaxLengthChanging(value);
					this.SendPropertyChanging();
					this._MaxLength = value;
					this.SendPropertyChanged("MaxLength");
					this.OnMaxLengthChanged();
				}
			}
		}
		
		[Column(Storage="_ClientMask", DbType="Int NOT NULL")]
		public int ClientMask
		{
			get
			{
				return this._ClientMask;
			}
			set
			{
				if ((this._ClientMask != value))
				{
					this.OnClientMaskChanging(value);
					this.SendPropertyChanging();
					this._ClientMask = value;
					this.SendPropertyChanged("ClientMask");
					this.OnClientMaskChanged();
				}
			}
		}
		
		[Column(Storage="_ClientMaskInsert", DbType="Int NOT NULL")]
		public int ClientMaskInsert
		{
			get
			{
				return this._ClientMaskInsert;
			}
			set
			{
				if ((this._ClientMaskInsert != value))
				{
					this.OnClientMaskInsertChanging(value);
					this.SendPropertyChanging();
					this._ClientMaskInsert = value;
					this.SendPropertyChanged("ClientMaskInsert");
					this.OnClientMaskInsertChanged();
				}
			}
		}
		
		[Column(Storage="_ClientMaskUpdate", DbType="Int NOT NULL")]
		public int ClientMaskUpdate
		{
			get
			{
				return this._ClientMaskUpdate;
			}
			set
			{
				if ((this._ClientMaskUpdate != value))
				{
					this.OnClientMaskUpdateChanging(value);
					this.SendPropertyChanging();
					this._ClientMaskUpdate = value;
					this.SendPropertyChanged("ClientMaskUpdate");
					this.OnClientMaskUpdateChanged();
				}
			}
		}
		
		[Column(Storage="_LookupSourceEntityId", DbType="UniqueIdentifier")]
		public System.Nullable<System.Guid> LookupSourceEntityId
		{
			get
			{
				return this._LookupSourceEntityId;
			}
			set
			{
				if ((this._LookupSourceEntityId != value))
				{
					this.OnLookupSourceEntityIdChanging(value);
					this.SendPropertyChanging();
					this._LookupSourceEntityId = value;
					this.SendPropertyChanged("LookupSourceEntityId");
					this.OnLookupSourceEntityIdChanged();
				}
			}
		}
		
		[Column(Storage="_Expression", DbType="NVarChar(255)")]
		public string Expression
		{
			get
			{
				return this._Expression;
			}
			set
			{
				if ((this._Expression != value))
				{
					this.OnExpressionChanging(value);
					this.SendPropertyChanging();
					this._Expression = value;
					this.SendPropertyChanged("Expression");
					this.OnExpressionChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(128)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Association(Name="SchemaEntity_SchemaAttribute", Storage="_Entity", ThisKey="EntityId", OtherKey="EntityId", IsForeignKey=true)]
		public Entity Entity
		{
			get
			{
				return this._Entity.Entity;
			}
			set
			{
				Entity previousValue = this._Entity.Entity;
				if (((previousValue != value) 
							|| (this._Entity.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Entity.Entity = null;
						previousValue.Attributes.Remove(this);
					}
					this._Entity.Entity = value;
					if ((value != null))
					{
						value.Attributes.Add(this);
						this._EntityId = value.EntityId;
					}
					else
					{
						this._EntityId = default(System.Guid);
					}
					this.SendPropertyChanged("Entity");
				}
			}
		}
		
		[Association(Name="SchemaAttributeType_SchemaAttribute", Storage="_AttributeType", ThisKey="AttributeTypeCode", OtherKey="AttributeTypeCode", IsForeignKey=true)]
		public AttributeType AttributeType
		{
			get
			{
				return this._AttributeType.Entity;
			}
			set
			{
				AttributeType previousValue = this._AttributeType.Entity;
				if (((previousValue != value) 
							|| (this._AttributeType.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._AttributeType.Entity = null;
						previousValue.Attributes.Remove(this);
					}
					this._AttributeType.Entity = value;
					if ((value != null))
					{
						value.Attributes.Add(this);
						this._AttributeTypeCode = value.AttributeTypeCode;
					}
					else
					{
						this._AttributeTypeCode = default(int);
					}
					this.SendPropertyChanged("AttributeType");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.SchemaClient")]
	public partial class Client : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Mask;
		
		private string _Name;
		
		private string _Description;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMaskChanging(int value);
    partial void OnMaskChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Client()
		{
			OnCreated();
		}
		
		[Column(Storage="_Mask", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Mask
		{
			get
			{
				return this._Mask;
			}
			set
			{
				if ((this._Mask != value))
				{
					this.OnMaskChanging(value);
					this.SendPropertyChanging();
					this._Mask = value;
					this.SendPropertyChanged("Mask");
					this.OnMaskChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(MAX)")]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(128)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.SchemaAttributeType")]
	public partial class AttributeType : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _AttributeTypeCode;
		
		private string _Name;
		
		private string _Description;
		
		private string _SqlTypeName;
		
		private EntitySet<Entity> _Entities;
		
		private EntitySet<Attribute> _Attributes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAttributeTypeCodeChanging(int value);
    partial void OnAttributeTypeCodeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnSqlTypeNameChanging(string value);
    partial void OnSqlTypeNameChanged();
    #endregion
		
		public AttributeType()
		{
			this._Entities = new EntitySet<Entity>(new Action<Entity>(this.attach_Entities), new Action<Entity>(this.detach_Entities));
			this._Attributes = new EntitySet<Attribute>(new Action<Attribute>(this.attach_Attributes), new Action<Attribute>(this.detach_Attributes));
			OnCreated();
		}
		
		[Column(Storage="_AttributeTypeCode", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int AttributeTypeCode
		{
			get
			{
				return this._AttributeTypeCode;
			}
			set
			{
				if ((this._AttributeTypeCode != value))
				{
					this.OnAttributeTypeCodeChanging(value);
					this.SendPropertyChanging();
					this._AttributeTypeCode = value;
					this.SendPropertyChanged("AttributeTypeCode");
					this.OnAttributeTypeCodeChanged();
				}
			}
		}
		
		[Column(Storage="_Name", DbType="NVarChar(128)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[Column(Storage="_Description", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[Column(Storage="_SqlTypeName", DbType="NVarChar(128)")]
		public string SqlTypeName
		{
			get
			{
				return this._SqlTypeName;
			}
			set
			{
				if ((this._SqlTypeName != value))
				{
					this.OnSqlTypeNameChanging(value);
					this.SendPropertyChanging();
					this._SqlTypeName = value;
					this.SendPropertyChanged("SqlTypeName");
					this.OnSqlTypeNameChanged();
				}
			}
		}
		
		[Association(Name="SchemaAttributeType_SchemaEntity", Storage="_Entities", ThisKey="AttributeTypeCode", OtherKey="PrimaryKeyAttributeType")]
		public EntitySet<Entity> Entities
		{
			get
			{
				return this._Entities;
			}
			set
			{
				this._Entities.Assign(value);
			}
		}
		
		[Association(Name="SchemaAttributeType_SchemaAttribute", Storage="_Attributes", ThisKey="AttributeTypeCode", OtherKey="AttributeTypeCode")]
		public EntitySet<Attribute> Attributes
		{
			get
			{
				return this._Attributes;
			}
			set
			{
				this._Attributes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.AttributeType = this;
		}
		
		private void detach_Entities(Entity entity)
		{
			this.SendPropertyChanging();
			entity.AttributeType = null;
		}
		
		private void attach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.AttributeType = this;
		}
		
		private void detach_Attributes(Attribute entity)
		{
			this.SendPropertyChanging();
			entity.AttributeType = null;
		}
	}
	
	[Table(Name="metadata.FormField")]
	public partial class FormField : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _FormFieldId;
		
		private System.Guid _FormId;
		
		private int _ClientMask;
		
		private string _Attribute;
		
		private string _Label;
		
		private short _SortPriority;
		
		private byte _DisplayOrder;
		
		private byte _FieldType;
		
		private byte _LockCode;
		
		private decimal _MinimumValue;
		
		private decimal _MaximumValue;
		
		private byte _DecimalPlaces;
		
		private byte _Lines;
		
		private string _Position;
		
		private byte _Width;
		
		private byte _LabelWidth;
		
		private string _ListDataSource;
		
		private string _ListValueColumn;
		
		private string _ListDisplayColumn;
		
		private string _ListData;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private EntityRef<Form> _Form;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormFieldIdChanging(System.Guid value);
    partial void OnFormFieldIdChanged();
    partial void OnFormIdChanging(System.Guid value);
    partial void OnFormIdChanged();
    partial void OnClientMaskChanging(int value);
    partial void OnClientMaskChanged();
    partial void OnAttributeChanging(string value);
    partial void OnAttributeChanged();
    partial void OnLabelChanging(string value);
    partial void OnLabelChanged();
    partial void OnSortPriorityChanging(short value);
    partial void OnSortPriorityChanged();
    partial void OnDisplayOrderChanging(byte value);
    partial void OnDisplayOrderChanged();
    partial void OnFieldTypeChanging(byte value);
    partial void OnFieldTypeChanged();
    partial void OnLockCodeChanging(byte value);
    partial void OnLockCodeChanged();
    partial void OnMinimumValueChanging(decimal value);
    partial void OnMinimumValueChanged();
    partial void OnMaximumValueChanging(decimal value);
    partial void OnMaximumValueChanged();
    partial void OnDecimalPlacesChanging(byte value);
    partial void OnDecimalPlacesChanged();
    partial void OnLinesChanging(byte value);
    partial void OnLinesChanged();
    partial void OnPositionChanging(string value);
    partial void OnPositionChanged();
    partial void OnWidthChanging(byte value);
    partial void OnWidthChanged();
    partial void OnLabelWidthChanging(byte value);
    partial void OnLabelWidthChanged();
    partial void OnListDataSourceChanging(string value);
    partial void OnListDataSourceChanged();
    partial void OnListValueColumnChanging(string value);
    partial void OnListValueColumnChanged();
    partial void OnListDisplayColumnChanging(string value);
    partial void OnListDisplayColumnChanged();
    partial void OnListDataChanging(string value);
    partial void OnListDataChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public FormField()
		{
			this._Form = default(EntityRef<Form>);
			OnCreated();
		}
		
		[Column(Storage="_FormFieldId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FormFieldId
		{
			get
			{
				return this._FormFieldId;
			}
			set
			{
				if ((this._FormFieldId != value))
				{
					this.OnFormFieldIdChanging(value);
					this.SendPropertyChanging();
					this._FormFieldId = value;
					this.SendPropertyChanged("FormFieldId");
					this.OnFormFieldIdChanged();
				}
			}
		}
		
		[Column(Storage="_FormId", DbType="UniqueIdentifier NOT NULL")]
		public System.Guid FormId
		{
			get
			{
				return this._FormId;
			}
			set
			{
				if ((this._FormId != value))
				{
					if (this._Form.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormIdChanging(value);
					this.SendPropertyChanging();
					this._FormId = value;
					this.SendPropertyChanged("FormId");
					this.OnFormIdChanged();
				}
			}
		}
		
		[Column(Storage="_ClientMask", DbType="Int NOT NULL")]
		public int ClientMask
		{
			get
			{
				return this._ClientMask;
			}
			set
			{
				if ((this._ClientMask != value))
				{
					this.OnClientMaskChanging(value);
					this.SendPropertyChanging();
					this._ClientMask = value;
					this.SendPropertyChanged("ClientMask");
					this.OnClientMaskChanged();
				}
			}
		}
		
		[Column(Storage="_Attribute", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Attribute
		{
			get
			{
				return this._Attribute;
			}
			set
			{
				if ((this._Attribute != value))
				{
					this.OnAttributeChanging(value);
					this.SendPropertyChanging();
					this._Attribute = value;
					this.SendPropertyChanged("Attribute");
					this.OnAttributeChanged();
				}
			}
		}
		
		[Column(Storage="_Label", DbType="NVarChar(256)")]
		public string Label
		{
			get
			{
				return this._Label;
			}
			set
			{
				if ((this._Label != value))
				{
					this.OnLabelChanging(value);
					this.SendPropertyChanging();
					this._Label = value;
					this.SendPropertyChanged("Label");
					this.OnLabelChanged();
				}
			}
		}
		
		[Column(Storage="_SortPriority", DbType="SmallInt NOT NULL")]
		public short SortPriority
		{
			get
			{
				return this._SortPriority;
			}
			set
			{
				if ((this._SortPriority != value))
				{
					this.OnSortPriorityChanging(value);
					this.SendPropertyChanging();
					this._SortPriority = value;
					this.SendPropertyChanged("SortPriority");
					this.OnSortPriorityChanged();
				}
			}
		}
		
		[Column(Storage="_DisplayOrder", DbType="TinyInt NOT NULL")]
		public byte DisplayOrder
		{
			get
			{
				return this._DisplayOrder;
			}
			set
			{
				if ((this._DisplayOrder != value))
				{
					this.OnDisplayOrderChanging(value);
					this.SendPropertyChanging();
					this._DisplayOrder = value;
					this.SendPropertyChanged("DisplayOrder");
					this.OnDisplayOrderChanged();
				}
			}
		}
		
		[Column(Storage="_FieldType", DbType="TinyInt NOT NULL")]
		public byte FieldType
		{
			get
			{
				return this._FieldType;
			}
			set
			{
				if ((this._FieldType != value))
				{
					this.OnFieldTypeChanging(value);
					this.SendPropertyChanging();
					this._FieldType = value;
					this.SendPropertyChanged("FieldType");
					this.OnFieldTypeChanged();
				}
			}
		}
		
		[Column(Storage="_LockCode", DbType="TinyInt NOT NULL")]
		public byte LockCode
		{
			get
			{
				return this._LockCode;
			}
			set
			{
				if ((this._LockCode != value))
				{
					this.OnLockCodeChanging(value);
					this.SendPropertyChanging();
					this._LockCode = value;
					this.SendPropertyChanged("LockCode");
					this.OnLockCodeChanged();
				}
			}
		}
		
		[Column(Storage="_MinimumValue", DbType="Decimal(18,8) NOT NULL")]
		public decimal MinimumValue
		{
			get
			{
				return this._MinimumValue;
			}
			set
			{
				if ((this._MinimumValue != value))
				{
					this.OnMinimumValueChanging(value);
					this.SendPropertyChanging();
					this._MinimumValue = value;
					this.SendPropertyChanged("MinimumValue");
					this.OnMinimumValueChanged();
				}
			}
		}
		
		[Column(Storage="_MaximumValue", DbType="Decimal(18,8) NOT NULL")]
		public decimal MaximumValue
		{
			get
			{
				return this._MaximumValue;
			}
			set
			{
				if ((this._MaximumValue != value))
				{
					this.OnMaximumValueChanging(value);
					this.SendPropertyChanging();
					this._MaximumValue = value;
					this.SendPropertyChanged("MaximumValue");
					this.OnMaximumValueChanged();
				}
			}
		}
		
		[Column(Storage="_DecimalPlaces", DbType="TinyInt NOT NULL")]
		public byte DecimalPlaces
		{
			get
			{
				return this._DecimalPlaces;
			}
			set
			{
				if ((this._DecimalPlaces != value))
				{
					this.OnDecimalPlacesChanging(value);
					this.SendPropertyChanging();
					this._DecimalPlaces = value;
					this.SendPropertyChanged("DecimalPlaces");
					this.OnDecimalPlacesChanged();
				}
			}
		}
		
		[Column(Storage="_Lines", DbType="TinyInt NOT NULL")]
		public byte Lines
		{
			get
			{
				return this._Lines;
			}
			set
			{
				if ((this._Lines != value))
				{
					this.OnLinesChanging(value);
					this.SendPropertyChanging();
					this._Lines = value;
					this.SendPropertyChanged("Lines");
					this.OnLinesChanged();
				}
			}
		}
		
		[Column(Storage="_Position", DbType="Char(2) NOT NULL", CanBeNull=false)]
		public string Position
		{
			get
			{
				return this._Position;
			}
			set
			{
				if ((this._Position != value))
				{
					this.OnPositionChanging(value);
					this.SendPropertyChanging();
					this._Position = value;
					this.SendPropertyChanged("Position");
					this.OnPositionChanged();
				}
			}
		}
		
		[Column(Storage="_Width", DbType="TinyInt NOT NULL")]
		public byte Width
		{
			get
			{
				return this._Width;
			}
			set
			{
				if ((this._Width != value))
				{
					this.OnWidthChanging(value);
					this.SendPropertyChanging();
					this._Width = value;
					this.SendPropertyChanged("Width");
					this.OnWidthChanged();
				}
			}
		}
		
		[Column(Storage="_LabelWidth", DbType="TinyInt NOT NULL")]
		public byte LabelWidth
		{
			get
			{
				return this._LabelWidth;
			}
			set
			{
				if ((this._LabelWidth != value))
				{
					this.OnLabelWidthChanging(value);
					this.SendPropertyChanging();
					this._LabelWidth = value;
					this.SendPropertyChanged("LabelWidth");
					this.OnLabelWidthChanged();
				}
			}
		}
		
		[Column(Storage="_ListDataSource", DbType="NVarChar(128)")]
		public string ListDataSource
		{
			get
			{
				return this._ListDataSource;
			}
			set
			{
				if ((this._ListDataSource != value))
				{
					this.OnListDataSourceChanging(value);
					this.SendPropertyChanging();
					this._ListDataSource = value;
					this.SendPropertyChanged("ListDataSource");
					this.OnListDataSourceChanged();
				}
			}
		}
		
		[Column(Storage="_ListValueColumn", DbType="NVarChar(128)")]
		public string ListValueColumn
		{
			get
			{
				return this._ListValueColumn;
			}
			set
			{
				if ((this._ListValueColumn != value))
				{
					this.OnListValueColumnChanging(value);
					this.SendPropertyChanging();
					this._ListValueColumn = value;
					this.SendPropertyChanged("ListValueColumn");
					this.OnListValueColumnChanged();
				}
			}
		}
		
		[Column(Storage="_ListDisplayColumn", DbType="NVarChar(128)")]
		public string ListDisplayColumn
		{
			get
			{
				return this._ListDisplayColumn;
			}
			set
			{
				if ((this._ListDisplayColumn != value))
				{
					this.OnListDisplayColumnChanging(value);
					this.SendPropertyChanging();
					this._ListDisplayColumn = value;
					this.SendPropertyChanged("ListDisplayColumn");
					this.OnListDisplayColumnChanged();
				}
			}
		}
		
		[Column(Storage="_ListData", DbType="NVarChar(MAX)")]
		public string ListData
		{
			get
			{
				return this._ListData;
			}
			set
			{
				if ((this._ListData != value))
				{
					this.OnListDataChanging(value);
					this.SendPropertyChanging();
					this._ListData = value;
					this.SendPropertyChanged("ListData");
					this.OnListDataChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(128)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Association(Name="Form_FormField", Storage="_Form", ThisKey="FormId", OtherKey="FormId", IsForeignKey=true)]
		public Form Form
		{
			get
			{
				return this._Form.Entity;
			}
			set
			{
				Form previousValue = this._Form.Entity;
				if (((previousValue != value) 
							|| (this._Form.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Form.Entity = null;
						previousValue.FormFields.Remove(this);
					}
					this._Form.Entity = value;
					if ((value != null))
					{
						value.FormFields.Add(this);
						this._FormId = value.FormId;
					}
					else
					{
						this._FormId = default(System.Guid);
					}
					this.SendPropertyChanged("Form");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[Table(Name="metadata.Form")]
	public partial class Form : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Guid _FormId;
		
		private int _ClientMask;
		
		private string _FormName;
		
		private string _FormLabel;
		
		private string _Entity;
		
		private string _EntityPK;
		
		private string _ParentEntity;
		
		private string _ParentPK;
		
		private string _EntityParentFK;
		
		private int _MaxItems;
		
		private int _Priority;
		
		private byte _LockCode;
		
		private string _ParentFilter;
		
		private System.Nullable<System.DateTime> _Created;
		
		private string _CreatedBy;
		
		private System.Nullable<System.DateTime> _Modified;
		
		private string _ModifiedBy;
		
		private EntitySet<FormField> _FormFields;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFormIdChanging(System.Guid value);
    partial void OnFormIdChanged();
    partial void OnClientMaskChanging(int value);
    partial void OnClientMaskChanged();
    partial void OnFormNameChanging(string value);
    partial void OnFormNameChanged();
    partial void OnFormLabelChanging(string value);
    partial void OnFormLabelChanged();
    partial void OnEntityChanging(string value);
    partial void OnEntityChanged();
    partial void OnEntityPKChanging(string value);
    partial void OnEntityPKChanged();
    partial void OnParentEntityChanging(string value);
    partial void OnParentEntityChanged();
    partial void OnParentPKChanging(string value);
    partial void OnParentPKChanged();
    partial void OnEntityParentFKChanging(string value);
    partial void OnEntityParentFKChanged();
    partial void OnMaxItemsChanging(int value);
    partial void OnMaxItemsChanged();
    partial void OnPriorityChanging(int value);
    partial void OnPriorityChanged();
    partial void OnLockCodeChanging(byte value);
    partial void OnLockCodeChanged();
    partial void OnParentFilterChanging(string value);
    partial void OnParentFilterChanged();
    partial void OnCreatedChanging(System.Nullable<System.DateTime> value);
    partial void OnCreatedChanged();
    partial void OnCreatedByChanging(string value);
    partial void OnCreatedByChanged();
    partial void OnModifiedChanging(System.Nullable<System.DateTime> value);
    partial void OnModifiedChanged();
    partial void OnModifiedByChanging(string value);
    partial void OnModifiedByChanged();
    #endregion
		
		public Form()
		{
			this._FormFields = new EntitySet<FormField>(new Action<FormField>(this.attach_FormFields), new Action<FormField>(this.detach_FormFields));
			OnCreated();
		}
		
		[Column(Storage="_FormId", DbType="UniqueIdentifier NOT NULL", IsPrimaryKey=true)]
		public System.Guid FormId
		{
			get
			{
				return this._FormId;
			}
			set
			{
				if ((this._FormId != value))
				{
					this.OnFormIdChanging(value);
					this.SendPropertyChanging();
					this._FormId = value;
					this.SendPropertyChanged("FormId");
					this.OnFormIdChanged();
				}
			}
		}
		
		[Column(Storage="_ClientMask", DbType="Int NOT NULL")]
		public int ClientMask
		{
			get
			{
				return this._ClientMask;
			}
			set
			{
				if ((this._ClientMask != value))
				{
					this.OnClientMaskChanging(value);
					this.SendPropertyChanging();
					this._ClientMask = value;
					this.SendPropertyChanged("ClientMask");
					this.OnClientMaskChanged();
				}
			}
		}
		
		[Column(Storage="_FormName", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string FormName
		{
			get
			{
				return this._FormName;
			}
			set
			{
				if ((this._FormName != value))
				{
					this.OnFormNameChanging(value);
					this.SendPropertyChanging();
					this._FormName = value;
					this.SendPropertyChanged("FormName");
					this.OnFormNameChanged();
				}
			}
		}
		
		[Column(Storage="_FormLabel", DbType="NVarChar(32)")]
		public string FormLabel
		{
			get
			{
				return this._FormLabel;
			}
			set
			{
				if ((this._FormLabel != value))
				{
					this.OnFormLabelChanging(value);
					this.SendPropertyChanging();
					this._FormLabel = value;
					this.SendPropertyChanged("FormLabel");
					this.OnFormLabelChanged();
				}
			}
		}
		
		[Column(Storage="_Entity", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string Entity
		{
			get
			{
				return this._Entity;
			}
			set
			{
				if ((this._Entity != value))
				{
					this.OnEntityChanging(value);
					this.SendPropertyChanging();
					this._Entity = value;
					this.SendPropertyChanged("Entity");
					this.OnEntityChanged();
				}
			}
		}
		
		[Column(Storage="_EntityPK", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string EntityPK
		{
			get
			{
				return this._EntityPK;
			}
			set
			{
				if ((this._EntityPK != value))
				{
					this.OnEntityPKChanging(value);
					this.SendPropertyChanging();
					this._EntityPK = value;
					this.SendPropertyChanged("EntityPK");
					this.OnEntityPKChanged();
				}
			}
		}
		
		[Column(Storage="_ParentEntity", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ParentEntity
		{
			get
			{
				return this._ParentEntity;
			}
			set
			{
				if ((this._ParentEntity != value))
				{
					this.OnParentEntityChanging(value);
					this.SendPropertyChanging();
					this._ParentEntity = value;
					this.SendPropertyChanged("ParentEntity");
					this.OnParentEntityChanged();
				}
			}
		}
		
		[Column(Storage="_ParentPK", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string ParentPK
		{
			get
			{
				return this._ParentPK;
			}
			set
			{
				if ((this._ParentPK != value))
				{
					this.OnParentPKChanging(value);
					this.SendPropertyChanging();
					this._ParentPK = value;
					this.SendPropertyChanged("ParentPK");
					this.OnParentPKChanged();
				}
			}
		}
		
		[Column(Storage="_EntityParentFK", DbType="NVarChar(128) NOT NULL", CanBeNull=false)]
		public string EntityParentFK
		{
			get
			{
				return this._EntityParentFK;
			}
			set
			{
				if ((this._EntityParentFK != value))
				{
					this.OnEntityParentFKChanging(value);
					this.SendPropertyChanging();
					this._EntityParentFK = value;
					this.SendPropertyChanged("EntityParentFK");
					this.OnEntityParentFKChanged();
				}
			}
		}
		
		[Column(Storage="_MaxItems", DbType="Int NOT NULL")]
		public int MaxItems
		{
			get
			{
				return this._MaxItems;
			}
			set
			{
				if ((this._MaxItems != value))
				{
					this.OnMaxItemsChanging(value);
					this.SendPropertyChanging();
					this._MaxItems = value;
					this.SendPropertyChanged("MaxItems");
					this.OnMaxItemsChanged();
				}
			}
		}
		
		[Column(Storage="_Priority", DbType="Int NOT NULL")]
		public int Priority
		{
			get
			{
				return this._Priority;
			}
			set
			{
				if ((this._Priority != value))
				{
					this.OnPriorityChanging(value);
					this.SendPropertyChanging();
					this._Priority = value;
					this.SendPropertyChanged("Priority");
					this.OnPriorityChanged();
				}
			}
		}
		
		[Column(Storage="_LockCode", DbType="TinyInt NOT NULL")]
		public byte LockCode
		{
			get
			{
				return this._LockCode;
			}
			set
			{
				if ((this._LockCode != value))
				{
					this.OnLockCodeChanging(value);
					this.SendPropertyChanging();
					this._LockCode = value;
					this.SendPropertyChanged("LockCode");
					this.OnLockCodeChanged();
				}
			}
		}
		
		[Column(Storage="_ParentFilter", DbType="NVarChar(1000)")]
		public string ParentFilter
		{
			get
			{
				return this._ParentFilter;
			}
			set
			{
				if ((this._ParentFilter != value))
				{
					this.OnParentFilterChanging(value);
					this.SendPropertyChanging();
					this._ParentFilter = value;
					this.SendPropertyChanged("ParentFilter");
					this.OnParentFilterChanged();
				}
			}
		}
		
		[Column(Storage="_Created", DbType="DateTime")]
		public System.Nullable<System.DateTime> Created
		{
			get
			{
				return this._Created;
			}
			set
			{
				if ((this._Created != value))
				{
					this.OnCreatedChanging(value);
					this.SendPropertyChanging();
					this._Created = value;
					this.SendPropertyChanged("Created");
					this.OnCreatedChanged();
				}
			}
		}
		
		[Column(Storage="_CreatedBy", DbType="NVarChar(128)")]
		public string CreatedBy
		{
			get
			{
				return this._CreatedBy;
			}
			set
			{
				if ((this._CreatedBy != value))
				{
					this.OnCreatedByChanging(value);
					this.SendPropertyChanging();
					this._CreatedBy = value;
					this.SendPropertyChanged("CreatedBy");
					this.OnCreatedByChanged();
				}
			}
		}
		
		[Column(Storage="_Modified", DbType="DateTime")]
		public System.Nullable<System.DateTime> Modified
		{
			get
			{
				return this._Modified;
			}
			set
			{
				if ((this._Modified != value))
				{
					this.OnModifiedChanging(value);
					this.SendPropertyChanging();
					this._Modified = value;
					this.SendPropertyChanged("Modified");
					this.OnModifiedChanged();
				}
			}
		}
		
		[Column(Storage="_ModifiedBy", DbType="NVarChar(128)")]
		public string ModifiedBy
		{
			get
			{
				return this._ModifiedBy;
			}
			set
			{
				if ((this._ModifiedBy != value))
				{
					this.OnModifiedByChanging(value);
					this.SendPropertyChanging();
					this._ModifiedBy = value;
					this.SendPropertyChanged("ModifiedBy");
					this.OnModifiedByChanged();
				}
			}
		}
		
		[Association(Name="Form_FormField", Storage="_FormFields", ThisKey="FormId", OtherKey="FormId")]
		public EntitySet<FormField> FormFields
		{
			get
			{
				return this._FormFields;
			}
			set
			{
				this._FormFields.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FormFields(FormField entity)
		{
			this.SendPropertyChanging();
			entity.Form = this;
		}
		
		private void detach_FormFields(FormField entity)
		{
			this.SendPropertyChanging();
			entity.Form = null;
		}
	}
}
#pragma warning restore 1591
